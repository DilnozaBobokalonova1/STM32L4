
HelloBSPLove.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005b64  08005b64  00015b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bac  08005bac  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bac  08005bac  00015bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bb4  08005bb4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bb4  08005bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bb8  08005bb8  00015bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  2000001c  08005bd8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000080c  08005bd8  0002080c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001939d  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003342  00000000  00000000  0003942c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f0  00000000  00000000  0003c770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011be  00000000  00000000  0003de60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027c87  00000000  00000000  0003f01e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a1df  00000000  00000000  00066ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f149a  00000000  00000000  00080e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006198  00000000  00000000  00172320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001784b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b4c 	.word	0x08005b4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08005b4c 	.word	0x08005b4c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f001 f964 	bl	8001794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f81a 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f9e2 	bl	8000898 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004d4:	f000 f878 	bl	80005c8 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004d8:	f000 f8ae 	bl	8000638 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004dc:	f000 f8ea 	bl	80006b4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004e0:	f000 f90e 	bl	8000700 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e4:	f000 f94a 	bl	800077c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004e8:	f000 f978 	bl	80007dc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004ec:	f000 f9a6 	bl	800083c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  BSP_HSENSOR_Init();
 80004f0:	f001 f852 	bl	8001598 <BSP_HSENSOR_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  BSP_LED_Toggle(LED2);
 80004f4:	2000      	movs	r0, #0
 80004f6:	f000 fee9 	bl	80012cc <BSP_LED_Toggle>
	  HAL_Delay(1000);
 80004fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004fe:	f001 f9bd 	bl	800187c <HAL_Delay>
	  BSP_LED_Toggle(LED2);
 8000502:	e7f7      	b.n	80004f4 <main+0x30>

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b096      	sub	sp, #88	; 0x58
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	2244      	movs	r2, #68	; 0x44
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f005 faee 	bl	8005af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	463b      	mov	r3, r7
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000526:	f44f 7000 	mov.w	r0, #512	; 0x200
 800052a:	f002 fe8b 	bl	8003244 <HAL_PWREx_ControlVoltageScaling>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000534:	f000 fb62 	bl	8000bfc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000538:	f002 fe66 	bl	8003208 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800053c:	4b21      	ldr	r3, [pc, #132]	; (80005c4 <SystemClock_Config+0xc0>)
 800053e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000542:	4a20      	ldr	r2, [pc, #128]	; (80005c4 <SystemClock_Config+0xc0>)
 8000544:	f023 0318 	bic.w	r3, r3, #24
 8000548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800054c:	2314      	movs	r3, #20
 800054e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000550:	2301      	movs	r3, #1
 8000552:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000554:	2301      	movs	r3, #1
 8000556:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800055c:	2360      	movs	r3, #96	; 0x60
 800055e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	2302      	movs	r3, #2
 8000562:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000564:	2301      	movs	r3, #1
 8000566:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000568:	2301      	movs	r3, #1
 800056a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800056c:	2328      	movs	r3, #40	; 0x28
 800056e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000570:	2307      	movs	r3, #7
 8000572:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	4618      	mov	r0, r3
 8000582:	f002 ff81 	bl	8003488 <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800058c:	f000 fb36 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000594:	2303      	movs	r3, #3
 8000596:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a4:	463b      	mov	r3, r7
 80005a6:	2104      	movs	r1, #4
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 fb49 	bl	8003c40 <HAL_RCC_ClockConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005b4:	f000 fb22 	bl	8000bfc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005b8:	f004 f850 	bl	800465c <HAL_RCCEx_EnableMSIPLLMode>
}
 80005bc:	bf00      	nop
 80005be:	3758      	adds	r7, #88	; 0x58
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40021000 	.word	0x40021000

080005c8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <MX_DFSDM1_Init+0x68>)
 80005ce:	4a19      	ldr	r2, [pc, #100]	; (8000634 <MX_DFSDM1_Init+0x6c>)
 80005d0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80005d2:	4b17      	ldr	r3, [pc, #92]	; (8000630 <MX_DFSDM1_Init+0x68>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <MX_DFSDM1_Init+0x68>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_DFSDM1_Init+0x68>)
 80005e0:	2202      	movs	r2, #2
 80005e2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_DFSDM1_Init+0x68>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_DFSDM1_Init+0x68>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_DFSDM1_Init+0x68>)
 80005f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005f6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80005f8:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <MX_DFSDM1_Init+0x68>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_DFSDM1_Init+0x68>)
 8000600:	2204      	movs	r2, #4
 8000602:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <MX_DFSDM1_Init+0x68>)
 8000606:	2200      	movs	r2, #0
 8000608:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_DFSDM1_Init+0x68>)
 800060c:	2201      	movs	r2, #1
 800060e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <MX_DFSDM1_Init+0x68>)
 8000612:	2200      	movs	r2, #0
 8000614:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_DFSDM1_Init+0x68>)
 8000618:	2200      	movs	r2, #0
 800061a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_DFSDM1_Init+0x68>)
 800061e:	f001 fa63 	bl	8001ae8 <HAL_DFSDM_ChannelInit>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000628:	f000 fae8 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000038 	.word	0x20000038
 8000634:	40016020 	.word	0x40016020

08000638 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_I2C2_Init+0x74>)
 800063e:	4a1c      	ldr	r2, [pc, #112]	; (80006b0 <MX_I2C2_Init+0x78>)
 8000640:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_I2C2_Init+0x74>)
 8000644:	f640 6214 	movw	r2, #3604	; 0xe14
 8000648:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800064a:	4b18      	ldr	r3, [pc, #96]	; (80006ac <MX_I2C2_Init+0x74>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MX_I2C2_Init+0x74>)
 8000652:	2201      	movs	r2, #1
 8000654:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_I2C2_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <MX_I2C2_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_I2C2_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000668:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_I2C2_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_I2C2_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000674:	480d      	ldr	r0, [pc, #52]	; (80006ac <MX_I2C2_Init+0x74>)
 8000676:	f001 fe36 	bl	80022e6 <HAL_I2C_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000680:	f000 fabc 	bl	8000bfc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000684:	2100      	movs	r1, #0
 8000686:	4809      	ldr	r0, [pc, #36]	; (80006ac <MX_I2C2_Init+0x74>)
 8000688:	f002 fbde 	bl	8002e48 <HAL_I2CEx_ConfigAnalogFilter>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000692:	f000 fab3 	bl	8000bfc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000696:	2100      	movs	r1, #0
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <MX_I2C2_Init+0x74>)
 800069a:	f002 fc20 	bl	8002ede <HAL_I2CEx_ConfigDigitalFilter>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80006a4:	f000 faaa 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000070 	.word	0x20000070
 80006b0:	40005800 	.word	0x40005800

080006b4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_QUADSPI_Init+0x44>)
 80006ba:	4a10      	ldr	r2, [pc, #64]	; (80006fc <MX_QUADSPI_Init+0x48>)
 80006bc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_QUADSPI_Init+0x44>)
 80006c0:	2202      	movs	r2, #2
 80006c2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_QUADSPI_Init+0x44>)
 80006c6:	2204      	movs	r2, #4
 80006c8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_QUADSPI_Init+0x44>)
 80006cc:	2210      	movs	r2, #16
 80006ce:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_QUADSPI_Init+0x44>)
 80006d2:	2217      	movs	r2, #23
 80006d4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_QUADSPI_Init+0x44>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_QUADSPI_Init+0x44>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_QUADSPI_Init+0x44>)
 80006e4:	f002 fe14 	bl	8003310 <HAL_QSPI_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80006ee:	f000 fa85 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	200000c4 	.word	0x200000c4
 80006fc:	a0001000 	.word	0xa0001000

08000700 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_SPI3_Init+0x74>)
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <MX_SPI3_Init+0x78>)
 8000708:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_SPI3_Init+0x74>)
 800070c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000710:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_SPI3_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_SPI3_Init+0x74>)
 800071a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800071e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_SPI3_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_SPI3_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_SPI3_Init+0x74>)
 800072e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000732:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_SPI3_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_SPI3_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_SPI3_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_SPI3_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_SPI3_Init+0x74>)
 800074e:	2207      	movs	r2, #7
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_SPI3_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_SPI3_Init+0x74>)
 800075a:	2208      	movs	r2, #8
 800075c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_SPI3_Init+0x74>)
 8000760:	f004 f95e 	bl	8004a20 <HAL_SPI_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800076a:	f000 fa47 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000108 	.word	0x20000108
 8000778:	40003c00 	.word	0x40003c00

0800077c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_USART1_UART_Init+0x58>)
 8000782:	4a15      	ldr	r2, [pc, #84]	; (80007d8 <MX_USART1_UART_Init+0x5c>)
 8000784:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_USART1_UART_Init+0x58>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USART1_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_USART1_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART1_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USART1_UART_Init+0x58>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USART1_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USART1_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USART1_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USART1_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_USART1_UART_Init+0x58>)
 80007c0:	f004 f9d1 	bl	8004b66 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007ca:	f000 fa17 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2000016c 	.word	0x2000016c
 80007d8:	40013800 	.word	0x40013800

080007dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_USART3_UART_Init+0x58>)
 80007e2:	4a15      	ldr	r2, [pc, #84]	; (8000838 <MX_USART3_UART_Init+0x5c>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <MX_USART3_UART_Init+0x58>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_USART3_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_USART3_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_USART3_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_USART3_UART_Init+0x58>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_USART3_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_USART3_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_USART3_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_USART3_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_USART3_UART_Init+0x58>)
 8000820:	f004 f9a1 	bl	8004b66 <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800082a:	f000 f9e7 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200001f4 	.word	0x200001f4
 8000838:	40004800 	.word	0x40004800

0800083c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000842:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000846:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084a:	2206      	movs	r2, #6
 800084c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000850:	2202      	movs	r2, #2
 8000852:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000856:	2202      	movs	r2, #2
 8000858:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000880:	f002 fb79 	bl	8002f76 <HAL_PCD_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800088a:	f000 f9b7 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000027c 	.word	0x2000027c

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ae:	4bbd      	ldr	r3, [pc, #756]	; (8000ba4 <MX_GPIO_Init+0x30c>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4abc      	ldr	r2, [pc, #752]	; (8000ba4 <MX_GPIO_Init+0x30c>)
 80008b4:	f043 0310 	orr.w	r3, r3, #16
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4bba      	ldr	r3, [pc, #744]	; (8000ba4 <MX_GPIO_Init+0x30c>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0310 	and.w	r3, r3, #16
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	4bb7      	ldr	r3, [pc, #732]	; (8000ba4 <MX_GPIO_Init+0x30c>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4ab6      	ldr	r2, [pc, #728]	; (8000ba4 <MX_GPIO_Init+0x30c>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4bb4      	ldr	r3, [pc, #720]	; (8000ba4 <MX_GPIO_Init+0x30c>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4bb1      	ldr	r3, [pc, #708]	; (8000ba4 <MX_GPIO_Init+0x30c>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4ab0      	ldr	r2, [pc, #704]	; (8000ba4 <MX_GPIO_Init+0x30c>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4bae      	ldr	r3, [pc, #696]	; (8000ba4 <MX_GPIO_Init+0x30c>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4bab      	ldr	r3, [pc, #684]	; (8000ba4 <MX_GPIO_Init+0x30c>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4aaa      	ldr	r2, [pc, #680]	; (8000ba4 <MX_GPIO_Init+0x30c>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4ba8      	ldr	r3, [pc, #672]	; (8000ba4 <MX_GPIO_Init+0x30c>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090e:	4ba5      	ldr	r3, [pc, #660]	; (8000ba4 <MX_GPIO_Init+0x30c>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4aa4      	ldr	r2, [pc, #656]	; (8000ba4 <MX_GPIO_Init+0x30c>)
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4ba2      	ldr	r3, [pc, #648]	; (8000ba4 <MX_GPIO_Init+0x30c>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 718a 	mov.w	r1, #276	; 0x114
 800092c:	489e      	ldr	r0, [pc, #632]	; (8000ba8 <MX_GPIO_Init+0x310>)
 800092e:	f001 fc85 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f248 1104 	movw	r1, #33028	; 0x8104
 8000938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093c:	f001 fc7e 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000940:	2200      	movs	r2, #0
 8000942:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000946:	4899      	ldr	r0, [pc, #612]	; (8000bac <MX_GPIO_Init+0x314>)
 8000948:	f001 fc78 	bl	800223c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f241 0181 	movw	r1, #4225	; 0x1081
 8000952:	4897      	ldr	r0, [pc, #604]	; (8000bb0 <MX_GPIO_Init+0x318>)
 8000954:	f001 fc72 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095e:	4894      	ldr	r0, [pc, #592]	; (8000bb0 <MX_GPIO_Init+0x318>)
 8000960:	f001 fc6c 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 7110 	mov.w	r1, #576	; 0x240
 800096a:	4892      	ldr	r0, [pc, #584]	; (8000bb4 <MX_GPIO_Init+0x31c>)
 800096c:	f001 fc66 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000970:	2201      	movs	r2, #1
 8000972:	2120      	movs	r1, #32
 8000974:	488d      	ldr	r0, [pc, #564]	; (8000bac <MX_GPIO_Init+0x314>)
 8000976:	f001 fc61 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	2101      	movs	r1, #1
 800097e:	488a      	ldr	r0, [pc, #552]	; (8000ba8 <MX_GPIO_Init+0x310>)
 8000980:	f001 fc5c 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000984:	f240 1315 	movw	r3, #277	; 0x115
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4882      	ldr	r0, [pc, #520]	; (8000ba8 <MX_GPIO_Init+0x310>)
 800099e:	f001 f9af 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80009a2:	236a      	movs	r3, #106	; 0x6a
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	487c      	ldr	r0, [pc, #496]	; (8000ba8 <MX_GPIO_Init+0x310>)
 80009b8:	f001 f9a2 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80009bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009c2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	4878      	ldr	r0, [pc, #480]	; (8000bb4 <MX_GPIO_Init+0x31c>)
 80009d4:	f001 f994 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80009d8:	233f      	movs	r3, #63	; 0x3f
 80009da:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009dc:	230b      	movs	r3, #11
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	4872      	ldr	r0, [pc, #456]	; (8000bb4 <MX_GPIO_Init+0x31c>)
 80009ec:	f001 f988 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80009f0:	2303      	movs	r3, #3
 80009f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a00:	2308      	movs	r3, #8
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0e:	f001 f977 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a12:	f248 1304 	movw	r3, #33028	; 0x8104
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2e:	f001 f967 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000a32:	2308      	movs	r3, #8
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a42:	2301      	movs	r3, #1
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a50:	f001 f956 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000a54:	2310      	movs	r3, #16
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a58:	230b      	movs	r3, #11
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6a:	f001 f949 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000a6e:	23e0      	movs	r3, #224	; 0xe0
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a7e:	2305      	movs	r3, #5
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8c:	f001 f938 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000a90:	2301      	movs	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4841      	ldr	r0, [pc, #260]	; (8000bac <MX_GPIO_Init+0x314>)
 8000aa6:	f001 f92b 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000aae:	230b      	movs	r3, #11
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	483b      	ldr	r0, [pc, #236]	; (8000bac <MX_GPIO_Init+0x314>)
 8000abe:	f001 f91f 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ac2:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000ac6:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4834      	ldr	r0, [pc, #208]	; (8000bac <MX_GPIO_Init+0x314>)
 8000adc:	f001 f910 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000ae0:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000ae4:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	482e      	ldr	r0, [pc, #184]	; (8000bb0 <MX_GPIO_Init+0x318>)
 8000af8:	f001 f902 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000afc:	f243 0381 	movw	r3, #12417	; 0x3081
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4826      	ldr	r0, [pc, #152]	; (8000bb0 <MX_GPIO_Init+0x318>)
 8000b16:	f001 f8f3 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b1a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	4820      	ldr	r0, [pc, #128]	; (8000bb4 <MX_GPIO_Init+0x31c>)
 8000b34:	f001 f8e4 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000b38:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b3e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4819      	ldr	r0, [pc, #100]	; (8000bb4 <MX_GPIO_Init+0x31c>)
 8000b50:	f001 f8d6 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000b54:	2302      	movs	r3, #2
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b64:	2305      	movs	r3, #5
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4810      	ldr	r0, [pc, #64]	; (8000bb0 <MX_GPIO_Init+0x318>)
 8000b70:	f001 f8c6 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000b74:	2378      	movs	r3, #120	; 0x78
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b84:	2307      	movs	r3, #7
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <MX_GPIO_Init+0x318>)
 8000b90:	f001 f8b6 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000b94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b9a:	2312      	movs	r3, #18
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e00a      	b.n	8000bb8 <MX_GPIO_Init+0x320>
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	48001000 	.word	0x48001000
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	48000c00 	.word	0x48000c00
 8000bb4:	48000800 	.word	0x48000800
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480b      	ldr	r0, [pc, #44]	; (8000bf8 <MX_GPIO_Init+0x360>)
 8000bca:	f001 f899 	bl	8001d00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2017      	movs	r0, #23
 8000bd4:	f000 ff51 	bl	8001a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bd8:	2017      	movs	r0, #23
 8000bda:	f000 ff6a 	bl	8001ab2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2028      	movs	r0, #40	; 0x28
 8000be4:	f000 ff49 	bl	8001a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000be8:	2028      	movs	r0, #40	; 0x28
 8000bea:	f000 ff62 	bl	8001ab2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	48000400 	.word	0x48000400

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <Error_Handler+0x8>
	...

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <HAL_MspInit+0x44>)
 8000c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c12:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <HAL_MspInit+0x44>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6613      	str	r3, [r2, #96]	; 0x60
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_MspInit+0x44>)
 8000c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <HAL_MspInit+0x44>)
 8000c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2a:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <HAL_MspInit+0x44>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c30:	6593      	str	r3, [r2, #88]	; 0x58
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_MspInit+0x44>)
 8000c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40021000 	.word	0x40021000

08000c50 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0ac      	sub	sp, #176	; 0xb0
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2288      	movs	r2, #136	; 0x88
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f004 ff3f 	bl	8005af4 <memset>
  if(DFSDM1_Init == 0)
 8000c76:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d142      	bne.n	8000d04 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000c7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f003 f9fa 	bl	8004088 <HAL_RCCEx_PeriphCLKConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000c9a:	f7ff ffaf 	bl	8000bfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca2:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ca4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ca8:	6613      	str	r3, [r2, #96]	; 0x60
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	4a15      	ldr	r2, [pc, #84]	; (8000d10 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cbc:	f043 0310 	orr.w	r3, r3, #16
 8000cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	f003 0310 	and.w	r3, r3, #16
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000cce:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000cd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000ce8:	2306      	movs	r3, #6
 8000cea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4807      	ldr	r0, [pc, #28]	; (8000d14 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000cf6:	f001 f803 	bl	8001d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	4a02      	ldr	r2, [pc, #8]	; (8000d0c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d02:	6013      	str	r3, [r2, #0]
  }

}
 8000d04:	bf00      	nop
 8000d06:	37b0      	adds	r7, #176	; 0xb0
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000788 	.word	0x20000788
 8000d10:	40021000 	.word	0x40021000
 8000d14:	48001000 	.word	0x48001000

08000d18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0ac      	sub	sp, #176	; 0xb0
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2288      	movs	r2, #136	; 0x88
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f004 fedb 	bl	8005af4 <memset>
  if(hi2c->Instance==I2C2)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <HAL_I2C_MspInit+0xb0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d13b      	bne.n	8000dc0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4618      	mov	r0, r3
 8000d56:	f003 f997 	bl	8004088 <HAL_RCCEx_PeriphCLKConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d60:	f7ff ff4c 	bl	8000bfc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <HAL_I2C_MspInit+0xb4>)
 8000d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d68:	4a18      	ldr	r2, [pc, #96]	; (8000dcc <HAL_I2C_MspInit+0xb4>)
 8000d6a:	f043 0302 	orr.w	r3, r3, #2
 8000d6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <HAL_I2C_MspInit+0xb4>)
 8000d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000d7c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d84:	2312      	movs	r3, #18
 8000d86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d96:	2304      	movs	r3, #4
 8000d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000da0:	4619      	mov	r1, r3
 8000da2:	480b      	ldr	r0, [pc, #44]	; (8000dd0 <HAL_I2C_MspInit+0xb8>)
 8000da4:	f000 ffac 	bl	8001d00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_I2C_MspInit+0xb4>)
 8000daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_I2C_MspInit+0xb4>)
 8000dae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000db2:	6593      	str	r3, [r2, #88]	; 0x58
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <HAL_I2C_MspInit+0xb4>)
 8000db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	37b0      	adds	r7, #176	; 0xb0
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40005800 	.word	0x40005800
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	48000400 	.word	0x48000400

08000dd4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <HAL_I2C_MspDeInit+0x3c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d10f      	bne.n	8000e06 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_I2C_MspDeInit+0x40>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <HAL_I2C_MspDeInit+0x40>)
 8000dec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000df0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8000df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df6:	4808      	ldr	r0, [pc, #32]	; (8000e18 <HAL_I2C_MspDeInit+0x44>)
 8000df8:	f001 f92c 	bl	8002054 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8000dfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <HAL_I2C_MspDeInit+0x44>)
 8000e02:	f001 f927 	bl	8002054 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40005800 	.word	0x40005800
 8000e14:	40021000 	.word	0x40021000
 8000e18:	48000400 	.word	0x48000400

08000e1c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a17      	ldr	r2, [pc, #92]	; (8000e98 <HAL_QSPI_MspInit+0x7c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d128      	bne.n	8000e90 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <HAL_QSPI_MspInit+0x80>)
 8000e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e42:	4a16      	ldr	r2, [pc, #88]	; (8000e9c <HAL_QSPI_MspInit+0x80>)
 8000e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e48:	6513      	str	r3, [r2, #80]	; 0x50
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <HAL_QSPI_MspInit+0x80>)
 8000e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <HAL_QSPI_MspInit+0x80>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <HAL_QSPI_MspInit+0x80>)
 8000e5c:	f043 0310 	orr.w	r3, r3, #16
 8000e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <HAL_QSPI_MspInit+0x80>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	f003 0310 	and.w	r3, r3, #16
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000e6e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000e72:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e80:	230a      	movs	r3, #10
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <HAL_QSPI_MspInit+0x84>)
 8000e8c:	f000 ff38 	bl	8001d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000e90:	bf00      	nop
 8000e92:	3728      	adds	r7, #40	; 0x28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	a0001000 	.word	0xa0001000
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	48001000 	.word	0x48001000

08000ea4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a17      	ldr	r2, [pc, #92]	; (8000f20 <HAL_SPI_MspInit+0x7c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d128      	bne.n	8000f18 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <HAL_SPI_MspInit+0x80>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	4a16      	ldr	r2, [pc, #88]	; (8000f24 <HAL_SPI_MspInit+0x80>)
 8000ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_SPI_MspInit+0x80>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_SPI_MspInit+0x80>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <HAL_SPI_MspInit+0x80>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <HAL_SPI_MspInit+0x80>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000ef6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f08:	2306      	movs	r3, #6
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4619      	mov	r1, r3
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <HAL_SPI_MspInit+0x84>)
 8000f14:	f000 fef4 	bl	8001d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f18:	bf00      	nop
 8000f1a:	3728      	adds	r7, #40	; 0x28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40003c00 	.word	0x40003c00
 8000f24:	40021000 	.word	0x40021000
 8000f28:	48000800 	.word	0x48000800

08000f2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b0ae      	sub	sp, #184	; 0xb8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	2288      	movs	r2, #136	; 0x88
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f004 fdd1 	bl	8005af4 <memset>
  if(huart->Instance==USART1)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a42      	ldr	r2, [pc, #264]	; (8001060 <HAL_UART_MspInit+0x134>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d13b      	bne.n	8000fd4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f60:	2300      	movs	r3, #0
 8000f62:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f003 f88d 	bl	8004088 <HAL_RCCEx_PeriphCLKConfig>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f74:	f7ff fe42 	bl	8000bfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f78:	4b3a      	ldr	r3, [pc, #232]	; (8001064 <HAL_UART_MspInit+0x138>)
 8000f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7c:	4a39      	ldr	r2, [pc, #228]	; (8001064 <HAL_UART_MspInit+0x138>)
 8000f7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f82:	6613      	str	r3, [r2, #96]	; 0x60
 8000f84:	4b37      	ldr	r3, [pc, #220]	; (8001064 <HAL_UART_MspInit+0x138>)
 8000f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8c:	61bb      	str	r3, [r7, #24]
 8000f8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f90:	4b34      	ldr	r3, [pc, #208]	; (8001064 <HAL_UART_MspInit+0x138>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f94:	4a33      	ldr	r2, [pc, #204]	; (8001064 <HAL_UART_MspInit+0x138>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9c:	4b31      	ldr	r3, [pc, #196]	; (8001064 <HAL_UART_MspInit+0x138>)
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000fa8:	23c0      	movs	r3, #192	; 0xc0
 8000faa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4826      	ldr	r0, [pc, #152]	; (8001068 <HAL_UART_MspInit+0x13c>)
 8000fce:	f000 fe97 	bl	8001d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fd2:	e040      	b.n	8001056 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a24      	ldr	r2, [pc, #144]	; (800106c <HAL_UART_MspInit+0x140>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d13b      	bne.n	8001056 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	4618      	mov	r0, r3
 8000fec:	f003 f84c 	bl	8004088 <HAL_RCCEx_PeriphCLKConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_UART_MspInit+0xce>
      Error_Handler();
 8000ff6:	f7ff fe01 	bl	8000bfc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <HAL_UART_MspInit+0x138>)
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffe:	4a19      	ldr	r2, [pc, #100]	; (8001064 <HAL_UART_MspInit+0x138>)
 8001000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001004:	6593      	str	r3, [r2, #88]	; 0x58
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HAL_UART_MspInit+0x138>)
 8001008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HAL_UART_MspInit+0x138>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	4a13      	ldr	r2, [pc, #76]	; (8001064 <HAL_UART_MspInit+0x138>)
 8001018:	f043 0308 	orr.w	r3, r3, #8
 800101c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_UART_MspInit+0x138>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	f003 0308 	and.w	r3, r3, #8
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800102a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800102e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001044:	2307      	movs	r3, #7
 8001046:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800104a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800104e:	4619      	mov	r1, r3
 8001050:	4807      	ldr	r0, [pc, #28]	; (8001070 <HAL_UART_MspInit+0x144>)
 8001052:	f000 fe55 	bl	8001d00 <HAL_GPIO_Init>
}
 8001056:	bf00      	nop
 8001058:	37b8      	adds	r7, #184	; 0xb8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40013800 	.word	0x40013800
 8001064:	40021000 	.word	0x40021000
 8001068:	48000400 	.word	0x48000400
 800106c:	40004800 	.word	0x40004800
 8001070:	48000c00 	.word	0x48000c00

08001074 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b0ac      	sub	sp, #176	; 0xb0
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2288      	movs	r2, #136	; 0x88
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f004 fd2d 	bl	8005af4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010a2:	d17c      	bne.n	800119e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80010aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80010b2:	2301      	movs	r3, #1
 80010b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80010ba:	2318      	movs	r3, #24
 80010bc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010be:	2307      	movs	r3, #7
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80010ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4618      	mov	r0, r3
 80010d6:	f002 ffd7 	bl	8004088 <HAL_RCCEx_PeriphCLKConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80010e0:	f7ff fd8c 	bl	8000bfc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	4b30      	ldr	r3, [pc, #192]	; (80011a8 <HAL_PCD_MspInit+0x134>)
 80010e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e8:	4a2f      	ldr	r2, [pc, #188]	; (80011a8 <HAL_PCD_MspInit+0x134>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f0:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <HAL_PCD_MspInit+0x134>)
 80010f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80010fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111a:	f000 fdf1 	bl	8001d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800111e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001122:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001138:	230a      	movs	r3, #10
 800113a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001142:	4619      	mov	r1, r3
 8001144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001148:	f000 fdda 	bl	8001d00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <HAL_PCD_MspInit+0x134>)
 800114e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001150:	4a15      	ldr	r2, [pc, #84]	; (80011a8 <HAL_PCD_MspInit+0x134>)
 8001152:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001156:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <HAL_PCD_MspInit+0x134>)
 800115a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001164:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <HAL_PCD_MspInit+0x134>)
 8001166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d114      	bne.n	800119a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <HAL_PCD_MspInit+0x134>)
 8001172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001174:	4a0c      	ldr	r2, [pc, #48]	; (80011a8 <HAL_PCD_MspInit+0x134>)
 8001176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117a:	6593      	str	r3, [r2, #88]	; 0x58
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_PCD_MspInit+0x134>)
 800117e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001188:	f002 f8b2 	bl	80032f0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_PCD_MspInit+0x134>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001190:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <HAL_PCD_MspInit+0x134>)
 8001192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001196:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001198:	e001      	b.n	800119e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800119a:	f002 f8a9 	bl	80032f0 <HAL_PWREx_EnableVddUSB>
}
 800119e:	bf00      	nop
 80011a0:	37b0      	adds	r7, #176	; 0xb0
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <NMI_Handler+0x4>

080011b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <MemManage_Handler+0x4>

080011be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <UsageFault_Handler+0x4>

080011ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f8:	f000 fb20 	bl	800183c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001204:	2020      	movs	r0, #32
 8001206:	f001 f84b 	bl	80022a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800120a:	2040      	movs	r0, #64	; 0x40
 800120c:	f001 f848 	bl	80022a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001210:	2080      	movs	r0, #128	; 0x80
 8001212:	f001 f845 	bl	80022a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001216:	f44f 7080 	mov.w	r0, #256	; 0x100
 800121a:	f001 f841 	bl	80022a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}

08001222 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001226:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800122a:	f001 f839 	bl	80022a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800122e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001232:	f001 f835 	bl	80022a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001236:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800123a:	f001 f831 	bl	80022a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800123e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001242:	f001 f82d 	bl	80022a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001246:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800124a:	f001 f829 	bl	80022a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <SystemInit+0x20>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <SystemInit+0x20>)
 8001260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800127c:	f7ff ffea 	bl	8001254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001282:	490d      	ldr	r1, [pc, #52]	; (80012b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <LoopForever+0xe>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001298:	4c0a      	ldr	r4, [pc, #40]	; (80012c4 <LoopForever+0x16>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012a6:	f004 fc2d 	bl	8005b04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012aa:	f7ff f90b 	bl	80004c4 <main>

080012ae <LoopForever>:

LoopForever:
    b LoopForever
 80012ae:	e7fe      	b.n	80012ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80012bc:	08005bbc 	.word	0x08005bbc
  ldr r2, =_sbss
 80012c0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80012c4:	2000080c 	.word	0x2000080c

080012c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC1_2_IRQHandler>
	...

080012cc <BSP_LED_Toggle>:
  * @param  Led  LED to be toggled
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <BSP_LED_Toggle+0x28>)
 80012da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012e2:	b292      	uxth	r2, r2
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 ffc0 	bl	800226c <HAL_GPIO_TogglePin>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000004 	.word	0x20000004

080012f8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001300:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <I2Cx_MspInit+0xa8>)
 8001302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001304:	4a26      	ldr	r2, [pc, #152]	; (80013a0 <I2Cx_MspInit+0xa8>)
 8001306:	f043 0302 	orr.w	r3, r3, #2
 800130a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130c:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <I2Cx_MspInit+0xa8>)
 800130e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001318:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800131c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800131e:	2312      	movs	r3, #18
 8001320:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001322:	2301      	movs	r3, #1
 8001324:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800132a:	2304      	movs	r3, #4
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	481b      	ldr	r0, [pc, #108]	; (80013a4 <I2Cx_MspInit+0xac>)
 8001336:	f000 fce3 	bl	8001d00 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	4818      	ldr	r0, [pc, #96]	; (80013a4 <I2Cx_MspInit+0xac>)
 8001342:	f000 fcdd 	bl	8001d00 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <I2Cx_MspInit+0xa8>)
 8001348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134a:	4a15      	ldr	r2, [pc, #84]	; (80013a0 <I2Cx_MspInit+0xa8>)
 800134c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001350:	6593      	str	r3, [r2, #88]	; 0x58
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <I2Cx_MspInit+0xa8>)
 8001354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <I2Cx_MspInit+0xa8>)
 8001360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001362:	4a0f      	ldr	r2, [pc, #60]	; (80013a0 <I2Cx_MspInit+0xa8>)
 8001364:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001368:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800136a:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <I2Cx_MspInit+0xa8>)
 800136c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136e:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <I2Cx_MspInit+0xa8>)
 8001370:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001374:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	210f      	movs	r1, #15
 800137a:	2021      	movs	r0, #33	; 0x21
 800137c:	f000 fb7d 	bl	8001a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001380:	2021      	movs	r0, #33	; 0x21
 8001382:	f000 fb96 	bl	8001ab2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	210f      	movs	r1, #15
 800138a:	2022      	movs	r0, #34	; 0x22
 800138c:	f000 fb75 	bl	8001a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001390:	2022      	movs	r0, #34	; 0x22
 8001392:	f000 fb8e 	bl	8001ab2 <HAL_NVIC_EnableIRQ>
}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	; 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000
 80013a4:	48000400 	.word	0x48000400

080013a8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <I2Cx_Init+0x54>)
 80013b4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a11      	ldr	r2, [pc, #68]	; (8001400 <I2Cx_Init+0x58>)
 80013ba:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff89 	bl	80012f8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 ff7d 	bl	80022e6 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80013ec:	2100      	movs	r1, #0
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f001 fd2a 	bl	8002e48 <HAL_I2CEx_ConfigAnalogFilter>
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40005800 	.word	0x40005800
 8001400:	00702681 	.word	0x00702681

08001404 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af04      	add	r7, sp, #16
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	4608      	mov	r0, r1
 800140e:	4611      	mov	r1, r2
 8001410:	461a      	mov	r2, r3
 8001412:	4603      	mov	r3, r0
 8001414:	72fb      	strb	r3, [r7, #11]
 8001416:	460b      	mov	r3, r1
 8001418:	813b      	strh	r3, [r7, #8]
 800141a:	4613      	mov	r3, r2
 800141c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001422:	7afb      	ldrb	r3, [r7, #11]
 8001424:	b299      	uxth	r1, r3
 8001426:	88f8      	ldrh	r0, [r7, #6]
 8001428:	893a      	ldrh	r2, [r7, #8]
 800142a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142e:	9302      	str	r3, [sp, #8]
 8001430:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	4603      	mov	r3, r0
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f001 f932 	bl	80026a4 <HAL_I2C_Mem_Read>
 8001440:	4603      	mov	r3, r0
 8001442:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001444:	7dfb      	ldrb	r3, [r7, #23]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d004      	beq.n	8001454 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800144a:	7afb      	ldrb	r3, [r7, #11]
 800144c:	4619      	mov	r1, r3
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f000 f832 	bl	80014b8 <I2Cx_Error>
  }
  return status;
 8001454:	7dfb      	ldrb	r3, [r7, #23]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b08a      	sub	sp, #40	; 0x28
 8001462:	af04      	add	r7, sp, #16
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	4608      	mov	r0, r1
 8001468:	4611      	mov	r1, r2
 800146a:	461a      	mov	r2, r3
 800146c:	4603      	mov	r3, r0
 800146e:	72fb      	strb	r3, [r7, #11]
 8001470:	460b      	mov	r3, r1
 8001472:	813b      	strh	r3, [r7, #8]
 8001474:	4613      	mov	r3, r2
 8001476:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800147c:	7afb      	ldrb	r3, [r7, #11]
 800147e:	b299      	uxth	r1, r3
 8001480:	88f8      	ldrh	r0, [r7, #6]
 8001482:	893a      	ldrh	r2, [r7, #8]
 8001484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001488:	9302      	str	r3, [sp, #8]
 800148a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	6a3b      	ldr	r3, [r7, #32]
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	4603      	mov	r3, r0
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f000 fff1 	bl	800247c <HAL_I2C_Mem_Write>
 800149a:	4603      	mov	r3, r0
 800149c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800149e:	7dfb      	ldrb	r3, [r7, #23]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d004      	beq.n	80014ae <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80014a4:	7afb      	ldrb	r3, [r7, #11]
 80014a6:	4619      	mov	r1, r3
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f000 f805 	bl	80014b8 <I2Cx_Error>
  }
  return status;
 80014ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 ffa9 	bl	800241c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ff6c 	bl	80013a8 <I2Cx_Init>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <SENSOR_IO_Init+0x10>)
 80014de:	f7ff ff63 	bl	80013a8 <I2Cx_Init>
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2000078c 	.word	0x2000078c

080014ec <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af02      	add	r7, sp, #8
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
 80014f6:	460b      	mov	r3, r1
 80014f8:	71bb      	strb	r3, [r7, #6]
 80014fa:	4613      	mov	r3, r2
 80014fc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80014fe:	79bb      	ldrb	r3, [r7, #6]
 8001500:	b29a      	uxth	r2, r3
 8001502:	79f9      	ldrb	r1, [r7, #7]
 8001504:	2301      	movs	r3, #1
 8001506:	9301      	str	r3, [sp, #4]
 8001508:	1d7b      	adds	r3, r7, #5
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	2301      	movs	r3, #1
 800150e:	4803      	ldr	r0, [pc, #12]	; (800151c <SENSOR_IO_Write+0x30>)
 8001510:	f7ff ffa5 	bl	800145e <I2Cx_WriteMultiple>
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000078c 	.word	0x2000078c

08001520 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af02      	add	r7, sp, #8
 8001526:	4603      	mov	r3, r0
 8001528:	460a      	mov	r2, r1
 800152a:	71fb      	strb	r3, [r7, #7]
 800152c:	4613      	mov	r3, r2
 800152e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001534:	79bb      	ldrb	r3, [r7, #6]
 8001536:	b29a      	uxth	r2, r3
 8001538:	79f9      	ldrb	r1, [r7, #7]
 800153a:	2301      	movs	r3, #1
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	f107 030f 	add.w	r3, r7, #15
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2301      	movs	r3, #1
 8001546:	4804      	ldr	r0, [pc, #16]	; (8001558 <SENSOR_IO_Read+0x38>)
 8001548:	f7ff ff5c 	bl	8001404 <I2Cx_ReadMultiple>

  return read_value;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000078c 	.word	0x2000078c

0800155c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af02      	add	r7, sp, #8
 8001562:	603a      	str	r2, [r7, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
 800156a:	460b      	mov	r3, r1
 800156c:	71bb      	strb	r3, [r7, #6]
 800156e:	4613      	mov	r3, r2
 8001570:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001572:	79bb      	ldrb	r3, [r7, #6]
 8001574:	b29a      	uxth	r2, r3
 8001576:	79f9      	ldrb	r1, [r7, #7]
 8001578:	88bb      	ldrh	r3, [r7, #4]
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2301      	movs	r3, #1
 8001582:	4804      	ldr	r0, [pc, #16]	; (8001594 <SENSOR_IO_ReadMultiple+0x38>)
 8001584:	f7ff ff3e 	bl	8001404 <I2Cx_ReadMultiple>
 8001588:	4603      	mov	r3, r0
 800158a:	b29b      	uxth	r3, r3
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	2000078c 	.word	0x2000078c

08001598 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <BSP_HSENSOR_Init+0x38>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	20be      	movs	r0, #190	; 0xbe
 80015a4:	4798      	blx	r3
 80015a6:	4603      	mov	r3, r0
 80015a8:	2bbc      	cmp	r3, #188	; 0xbc
 80015aa:	d002      	beq.n	80015b2 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	e009      	b.n	80015c6 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <BSP_HSENSOR_Init+0x3c>)
 80015b4:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <BSP_HSENSOR_Init+0x38>)
 80015b6:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <BSP_HSENSOR_Init+0x3c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	20be      	movs	r0, #190	; 0xbe
 80015c0:	4798      	blx	r3
    ret = HSENSOR_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80015c6:	687b      	ldr	r3, [r7, #4]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000008 	.word	0x20000008
 80015d4:	200007e0 	.word	0x200007e0

080015d8 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2120      	movs	r1, #32
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff99 	bl	8001520 <SENSOR_IO_Read>
 80015ee:	4603      	mov	r3, r0
 80015f0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	f023 0304 	bic.w	r3, r3, #4
 80015f8:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	f023 0303 	bic.w	r3, r3, #3
 8001608:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001618:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	2120      	movs	r1, #32
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ff62 	bl	80014ec <SENSOR_IO_Write>
}
 8001628:	bf00      	nop
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800163a:	2300      	movs	r3, #0
 800163c:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800163e:	f7ff ff4b 	bl	80014d8 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	210f      	movs	r1, #15
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff69 	bl	8001520 <SENSOR_IO_Read>
 800164e:	4603      	mov	r3, r0
 8001650:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001652:	7bfb      	ldrb	r3, [r7, #15]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	b2d8      	uxtb	r0, r3
 800166a:	f107 020c 	add.w	r2, r7, #12
 800166e:	2302      	movs	r3, #2
 8001670:	21b0      	movs	r1, #176	; 0xb0
 8001672:	f7ff ff73 	bl	800155c <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8001676:	7b3b      	ldrb	r3, [r7, #12]
 8001678:	085b      	lsrs	r3, r3, #1
 800167a:	b2db      	uxtb	r3, r3
 800167c:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800167e:	7b7b      	ldrb	r3, [r7, #13]
 8001680:	085b      	lsrs	r3, r3, #1
 8001682:	b2db      	uxtb	r3, r3
 8001684:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	f107 020c 	add.w	r2, r7, #12
 800168e:	2302      	movs	r3, #2
 8001690:	21b6      	movs	r1, #182	; 0xb6
 8001692:	f7ff ff63 	bl	800155c <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001696:	7b7b      	ldrb	r3, [r7, #13]
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	b21a      	sxth	r2, r3
 800169c:	7b3b      	ldrb	r3, [r7, #12]
 800169e:	b21b      	sxth	r3, r3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	b2d8      	uxtb	r0, r3
 80016a8:	f107 020c 	add.w	r2, r7, #12
 80016ac:	2302      	movs	r3, #2
 80016ae:	21ba      	movs	r1, #186	; 0xba
 80016b0:	f7ff ff54 	bl	800155c <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80016b4:	7b7b      	ldrb	r3, [r7, #13]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	b21a      	sxth	r2, r3
 80016ba:	7b3b      	ldrb	r3, [r7, #12]
 80016bc:	b21b      	sxth	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	f107 020c 	add.w	r2, r7, #12
 80016ca:	2302      	movs	r3, #2
 80016cc:	21a8      	movs	r1, #168	; 0xa8
 80016ce:	f7ff ff45 	bl	800155c <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80016d2:	7b7b      	ldrb	r3, [r7, #13]
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	7b3b      	ldrb	r3, [r7, #12]
 80016da:	b21b      	sxth	r3, r3
 80016dc:	4313      	orrs	r3, r2
 80016de:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80016e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016e4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	ee07 3a90 	vmov	s15, r3
 80016ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80016f6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001704:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001708:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800170c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800171e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001722:	ee07 3a90 	vmov	s15, r3
 8001726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800172a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172e:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001732:	edd7 7a04 	vldr	s15, [r7, #16]
 8001736:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800173a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173e:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001742:	edd7 7a04 	vldr	s15, [r7, #16]
 8001746:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800178c <HTS221_H_ReadHumidity+0x130>
 800174a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800174e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001752:	dd01      	ble.n	8001758 <HTS221_H_ReadHumidity+0xfc>
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <HTS221_H_ReadHumidity+0x134>)
 8001756:	e00a      	b.n	800176e <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8001758:	edd7 7a04 	vldr	s15, [r7, #16]
 800175c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001764:	d502      	bpl.n	800176c <HTS221_H_ReadHumidity+0x110>
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	e000      	b.n	800176e <HTS221_H_ReadHumidity+0x112>
 800176c:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800176e:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001770:	edd7 7a04 	vldr	s15, [r7, #16]
 8001774:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001778:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800177c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001780:	eeb0 0a67 	vmov.f32	s0, s15
 8001784:	3720      	adds	r7, #32
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	447a0000 	.word	0x447a0000
 8001790:	447a0000 	.word	0x447a0000

08001794 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179e:	2003      	movs	r0, #3
 80017a0:	f000 f960 	bl	8001a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017a4:	2000      	movs	r0, #0
 80017a6:	f000 f80d 	bl	80017c4 <HAL_InitTick>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d002      	beq.n	80017b6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	71fb      	strb	r3, [r7, #7]
 80017b4:	e001      	b.n	80017ba <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017b6:	f7ff fa27 	bl	8000c08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017ba:	79fb      	ldrb	r3, [r7, #7]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017cc:	2300      	movs	r3, #0
 80017ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HAL_InitTick+0x6c>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d023      	beq.n	8001820 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <HAL_InitTick+0x70>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <HAL_InitTick+0x6c>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f96d 	bl	8001ace <HAL_SYSTICK_Config>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10f      	bne.n	800181a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b0f      	cmp	r3, #15
 80017fe:	d809      	bhi.n	8001814 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001800:	2200      	movs	r2, #0
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001808:	f000 f937 	bl	8001a7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800180c:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_InitTick+0x74>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	e007      	b.n	8001824 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
 8001818:	e004      	b.n	8001824 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	73fb      	strb	r3, [r7, #15]
 800181e:	e001      	b.n	8001824 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001824:	7bfb      	ldrb	r3, [r7, #15]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000018 	.word	0x20000018
 8001834:	20000000 	.word	0x20000000
 8001838:	20000014 	.word	0x20000014

0800183c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_IncTick+0x20>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x24>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4413      	add	r3, r2
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <HAL_IncTick+0x24>)
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000018 	.word	0x20000018
 8001860:	200007e4 	.word	0x200007e4

08001864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return uwTick;
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <HAL_GetTick+0x14>)
 800186a:	681b      	ldr	r3, [r3, #0]
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	200007e4 	.word	0x200007e4

0800187c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001884:	f7ff ffee 	bl	8001864 <HAL_GetTick>
 8001888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001894:	d005      	beq.n	80018a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_Delay+0x44>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4413      	add	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018a2:	bf00      	nop
 80018a4:	f7ff ffde 	bl	8001864 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d8f7      	bhi.n	80018a4 <HAL_Delay+0x28>
  {
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000018 	.word	0x20000018

080018c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e0:	4013      	ands	r3, r2
 80018e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f6:	4a04      	ldr	r2, [pc, #16]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	60d3      	str	r3, [r2, #12]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <__NVIC_GetPriorityGrouping+0x18>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	f003 0307 	and.w	r3, r3, #7
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	2b00      	cmp	r3, #0
 8001938:	db0b      	blt.n	8001952 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	4907      	ldr	r1, [pc, #28]	; (8001960 <__NVIC_EnableIRQ+0x38>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	2001      	movs	r0, #1
 800194a:	fa00 f202 	lsl.w	r2, r0, r2
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100

08001964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	db0a      	blt.n	800198e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	490c      	ldr	r1, [pc, #48]	; (80019b0 <__NVIC_SetPriority+0x4c>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	440b      	add	r3, r1
 8001988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800198c:	e00a      	b.n	80019a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4908      	ldr	r1, [pc, #32]	; (80019b4 <__NVIC_SetPriority+0x50>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	3b04      	subs	r3, #4
 800199c:	0112      	lsls	r2, r2, #4
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	440b      	add	r3, r1
 80019a2:	761a      	strb	r2, [r3, #24]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f1c3 0307 	rsb	r3, r3, #7
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	bf28      	it	cs
 80019d6:	2304      	movcs	r3, #4
 80019d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3304      	adds	r3, #4
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d902      	bls.n	80019e8 <NVIC_EncodePriority+0x30>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3b03      	subs	r3, #3
 80019e6:	e000      	b.n	80019ea <NVIC_EncodePriority+0x32>
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	401a      	ands	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43d9      	mvns	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	4313      	orrs	r3, r2
         );
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	; 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a30:	d301      	bcc.n	8001a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00f      	b.n	8001a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <SysTick_Config+0x40>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3e:	210f      	movs	r1, #15
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a44:	f7ff ff8e 	bl	8001964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <SysTick_Config+0x40>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4e:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <SysTick_Config+0x40>)
 8001a50:	2207      	movs	r2, #7
 8001a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010

08001a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff29 	bl	80018c4 <__NVIC_SetPriorityGrouping>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a8c:	f7ff ff3e 	bl	800190c <__NVIC_GetPriorityGrouping>
 8001a90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	f7ff ff8e 	bl	80019b8 <NVIC_EncodePriority>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff5d 	bl	8001964 <__NVIC_SetPriority>
}
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff31 	bl	8001928 <__NVIC_EnableIRQ>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ffa2 	bl	8001a20 <SysTick_Config>
 8001adc:	4603      	mov	r3, r0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e0ac      	b.n	8001c54 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 f8b2 	bl	8001c68 <DFSDM_GetChannelFromInstance>
 8001b04:	4603      	mov	r3, r0
 8001b06:	4a55      	ldr	r2, [pc, #340]	; (8001c5c <HAL_DFSDM_ChannelInit+0x174>)
 8001b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e09f      	b.n	8001c54 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff f89b 	bl	8000c50 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001b1a:	4b51      	ldr	r3, [pc, #324]	; (8001c60 <HAL_DFSDM_ChannelInit+0x178>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	4a4f      	ldr	r2, [pc, #316]	; (8001c60 <HAL_DFSDM_ChannelInit+0x178>)
 8001b22:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001b24:	4b4e      	ldr	r3, [pc, #312]	; (8001c60 <HAL_DFSDM_ChannelInit+0x178>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d125      	bne.n	8001b78 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001b2c:	4b4d      	ldr	r3, [pc, #308]	; (8001c64 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a4c      	ldr	r2, [pc, #304]	; (8001c64 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001b36:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001b38:	4b4a      	ldr	r3, [pc, #296]	; (8001c64 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	4948      	ldr	r1, [pc, #288]	; (8001c64 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001b46:	4b47      	ldr	r3, [pc, #284]	; (8001c64 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a46      	ldr	r2, [pc, #280]	; (8001c64 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b4c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001b50:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	791b      	ldrb	r3, [r3, #4]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d108      	bne.n	8001b6c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001b5a:	4b42      	ldr	r3, [pc, #264]	; (8001c64 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	041b      	lsls	r3, r3, #16
 8001b66:	493f      	ldr	r1, [pc, #252]	; (8001c64 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001b6c:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a3c      	ldr	r2, [pc, #240]	; (8001c64 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b76:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001b86:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6819      	ldr	r1, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b96:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001b9c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 020f 	bic.w	r2, r2, #15
 8001bb4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6819      	ldr	r1, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001bdc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6899      	ldr	r1, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	3b01      	subs	r3, #1
 8001bee:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f002 0207 	and.w	r2, r2, #7
 8001c08:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6859      	ldr	r1, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c34:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f810 	bl	8001c68 <DFSDM_GetChannelFromInstance>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4904      	ldr	r1, [pc, #16]	; (8001c5c <HAL_DFSDM_ChannelInit+0x174>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	200007ec 	.word	0x200007ec
 8001c60:	200007e8 	.word	0x200007e8
 8001c64:	40016000 	.word	0x40016000

08001c68 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <DFSDM_GetChannelFromInstance+0x7c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d102      	bne.n	8001c7e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	e02b      	b.n	8001cd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a19      	ldr	r2, [pc, #100]	; (8001ce8 <DFSDM_GetChannelFromInstance+0x80>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d102      	bne.n	8001c8c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001c86:	2301      	movs	r3, #1
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	e024      	b.n	8001cd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a17      	ldr	r2, [pc, #92]	; (8001cec <DFSDM_GetChannelFromInstance+0x84>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d102      	bne.n	8001c9a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001c94:	2302      	movs	r3, #2
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	e01d      	b.n	8001cd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <DFSDM_GetChannelFromInstance+0x88>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d102      	bne.n	8001ca8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	e016      	b.n	8001cd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <DFSDM_GetChannelFromInstance+0x8c>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d102      	bne.n	8001cb6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001cb0:	2305      	movs	r3, #5
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	e00f      	b.n	8001cd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a0f      	ldr	r2, [pc, #60]	; (8001cf8 <DFSDM_GetChannelFromInstance+0x90>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d102      	bne.n	8001cc4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001cbe:	2306      	movs	r3, #6
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	e008      	b.n	8001cd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a0d      	ldr	r2, [pc, #52]	; (8001cfc <DFSDM_GetChannelFromInstance+0x94>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d102      	bne.n	8001cd2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001ccc:	2307      	movs	r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	e001      	b.n	8001cd6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	40016000 	.word	0x40016000
 8001ce8:	40016020 	.word	0x40016020
 8001cec:	40016040 	.word	0x40016040
 8001cf0:	40016080 	.word	0x40016080
 8001cf4:	400160a0 	.word	0x400160a0
 8001cf8:	400160c0 	.word	0x400160c0
 8001cfc:	400160e0 	.word	0x400160e0

08001d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b087      	sub	sp, #28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0e:	e17f      	b.n	8002010 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2101      	movs	r1, #1
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 8171 	beq.w	800200a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d005      	beq.n	8001d40 <HAL_GPIO_Init+0x40>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d130      	bne.n	8001da2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d76:	2201      	movs	r2, #1
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	091b      	lsrs	r3, r3, #4
 8001d8c:	f003 0201 	and.w	r2, r3, #1
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b03      	cmp	r3, #3
 8001dac:	d118      	bne.n	8001de0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001db4:	2201      	movs	r2, #1
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	08db      	lsrs	r3, r3, #3
 8001dca:	f003 0201 	and.w	r2, r3, #1
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d017      	beq.n	8001e1c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	2203      	movs	r2, #3
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d123      	bne.n	8001e70 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	08da      	lsrs	r2, r3, #3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3208      	adds	r2, #8
 8001e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e34:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	220f      	movs	r2, #15
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	08da      	lsrs	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3208      	adds	r2, #8
 8001e6a:	6939      	ldr	r1, [r7, #16]
 8001e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0203 	and.w	r2, r3, #3
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 80ac 	beq.w	800200a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb2:	4b5f      	ldr	r3, [pc, #380]	; (8002030 <HAL_GPIO_Init+0x330>)
 8001eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb6:	4a5e      	ldr	r2, [pc, #376]	; (8002030 <HAL_GPIO_Init+0x330>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6613      	str	r3, [r2, #96]	; 0x60
 8001ebe:	4b5c      	ldr	r3, [pc, #368]	; (8002030 <HAL_GPIO_Init+0x330>)
 8001ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001eca:	4a5a      	ldr	r2, [pc, #360]	; (8002034 <HAL_GPIO_Init+0x334>)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	089b      	lsrs	r3, r3, #2
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ef4:	d025      	beq.n	8001f42 <HAL_GPIO_Init+0x242>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4f      	ldr	r2, [pc, #316]	; (8002038 <HAL_GPIO_Init+0x338>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01f      	beq.n	8001f3e <HAL_GPIO_Init+0x23e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4e      	ldr	r2, [pc, #312]	; (800203c <HAL_GPIO_Init+0x33c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d019      	beq.n	8001f3a <HAL_GPIO_Init+0x23a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4d      	ldr	r2, [pc, #308]	; (8002040 <HAL_GPIO_Init+0x340>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_GPIO_Init+0x236>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4c      	ldr	r2, [pc, #304]	; (8002044 <HAL_GPIO_Init+0x344>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00d      	beq.n	8001f32 <HAL_GPIO_Init+0x232>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4b      	ldr	r2, [pc, #300]	; (8002048 <HAL_GPIO_Init+0x348>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d007      	beq.n	8001f2e <HAL_GPIO_Init+0x22e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4a      	ldr	r2, [pc, #296]	; (800204c <HAL_GPIO_Init+0x34c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d101      	bne.n	8001f2a <HAL_GPIO_Init+0x22a>
 8001f26:	2306      	movs	r3, #6
 8001f28:	e00c      	b.n	8001f44 <HAL_GPIO_Init+0x244>
 8001f2a:	2307      	movs	r3, #7
 8001f2c:	e00a      	b.n	8001f44 <HAL_GPIO_Init+0x244>
 8001f2e:	2305      	movs	r3, #5
 8001f30:	e008      	b.n	8001f44 <HAL_GPIO_Init+0x244>
 8001f32:	2304      	movs	r3, #4
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x244>
 8001f36:	2303      	movs	r3, #3
 8001f38:	e004      	b.n	8001f44 <HAL_GPIO_Init+0x244>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e002      	b.n	8001f44 <HAL_GPIO_Init+0x244>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <HAL_GPIO_Init+0x244>
 8001f42:	2300      	movs	r3, #0
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	f002 0203 	and.w	r2, r2, #3
 8001f4a:	0092      	lsls	r2, r2, #2
 8001f4c:	4093      	lsls	r3, r2
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f54:	4937      	ldr	r1, [pc, #220]	; (8002034 <HAL_GPIO_Init+0x334>)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f62:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <HAL_GPIO_Init+0x350>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f86:	4a32      	ldr	r2, [pc, #200]	; (8002050 <HAL_GPIO_Init+0x350>)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f8c:	4b30      	ldr	r3, [pc, #192]	; (8002050 <HAL_GPIO_Init+0x350>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fb0:	4a27      	ldr	r2, [pc, #156]	; (8002050 <HAL_GPIO_Init+0x350>)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fb6:	4b26      	ldr	r3, [pc, #152]	; (8002050 <HAL_GPIO_Init+0x350>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fda:	4a1d      	ldr	r2, [pc, #116]	; (8002050 <HAL_GPIO_Init+0x350>)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <HAL_GPIO_Init+0x350>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002004:	4a12      	ldr	r2, [pc, #72]	; (8002050 <HAL_GPIO_Init+0x350>)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3301      	adds	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	fa22 f303 	lsr.w	r3, r2, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	f47f ae78 	bne.w	8001d10 <HAL_GPIO_Init+0x10>
  }
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	371c      	adds	r7, #28
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	40010000 	.word	0x40010000
 8002038:	48000400 	.word	0x48000400
 800203c:	48000800 	.word	0x48000800
 8002040:	48000c00 	.word	0x48000c00
 8002044:	48001000 	.word	0x48001000
 8002048:	48001400 	.word	0x48001400
 800204c:	48001800 	.word	0x48001800
 8002050:	40010400 	.word	0x40010400

08002054 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002054:	b480      	push	{r7}
 8002056:	b087      	sub	sp, #28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002062:	e0cd      	b.n	8002200 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002064:	2201      	movs	r2, #1
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 80c0 	beq.w	80021fa <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800207a:	4a68      	ldr	r2, [pc, #416]	; (800221c <HAL_GPIO_DeInit+0x1c8>)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	3302      	adds	r3, #2
 8002082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002086:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	220f      	movs	r2, #15
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4013      	ands	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020a2:	d025      	beq.n	80020f0 <HAL_GPIO_DeInit+0x9c>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a5e      	ldr	r2, [pc, #376]	; (8002220 <HAL_GPIO_DeInit+0x1cc>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d01f      	beq.n	80020ec <HAL_GPIO_DeInit+0x98>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a5d      	ldr	r2, [pc, #372]	; (8002224 <HAL_GPIO_DeInit+0x1d0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d019      	beq.n	80020e8 <HAL_GPIO_DeInit+0x94>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a5c      	ldr	r2, [pc, #368]	; (8002228 <HAL_GPIO_DeInit+0x1d4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d013      	beq.n	80020e4 <HAL_GPIO_DeInit+0x90>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a5b      	ldr	r2, [pc, #364]	; (800222c <HAL_GPIO_DeInit+0x1d8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d00d      	beq.n	80020e0 <HAL_GPIO_DeInit+0x8c>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a5a      	ldr	r2, [pc, #360]	; (8002230 <HAL_GPIO_DeInit+0x1dc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d007      	beq.n	80020dc <HAL_GPIO_DeInit+0x88>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a59      	ldr	r2, [pc, #356]	; (8002234 <HAL_GPIO_DeInit+0x1e0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d101      	bne.n	80020d8 <HAL_GPIO_DeInit+0x84>
 80020d4:	2306      	movs	r3, #6
 80020d6:	e00c      	b.n	80020f2 <HAL_GPIO_DeInit+0x9e>
 80020d8:	2307      	movs	r3, #7
 80020da:	e00a      	b.n	80020f2 <HAL_GPIO_DeInit+0x9e>
 80020dc:	2305      	movs	r3, #5
 80020de:	e008      	b.n	80020f2 <HAL_GPIO_DeInit+0x9e>
 80020e0:	2304      	movs	r3, #4
 80020e2:	e006      	b.n	80020f2 <HAL_GPIO_DeInit+0x9e>
 80020e4:	2303      	movs	r3, #3
 80020e6:	e004      	b.n	80020f2 <HAL_GPIO_DeInit+0x9e>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e002      	b.n	80020f2 <HAL_GPIO_DeInit+0x9e>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_GPIO_DeInit+0x9e>
 80020f0:	2300      	movs	r3, #0
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	f002 0203 	and.w	r2, r2, #3
 80020f8:	0092      	lsls	r2, r2, #2
 80020fa:	4093      	lsls	r3, r2
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d132      	bne.n	8002168 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002102:	4b4d      	ldr	r3, [pc, #308]	; (8002238 <HAL_GPIO_DeInit+0x1e4>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	43db      	mvns	r3, r3
 800210a:	494b      	ldr	r1, [pc, #300]	; (8002238 <HAL_GPIO_DeInit+0x1e4>)
 800210c:	4013      	ands	r3, r2
 800210e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002110:	4b49      	ldr	r3, [pc, #292]	; (8002238 <HAL_GPIO_DeInit+0x1e4>)
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	43db      	mvns	r3, r3
 8002118:	4947      	ldr	r1, [pc, #284]	; (8002238 <HAL_GPIO_DeInit+0x1e4>)
 800211a:	4013      	ands	r3, r2
 800211c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800211e:	4b46      	ldr	r3, [pc, #280]	; (8002238 <HAL_GPIO_DeInit+0x1e4>)
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	43db      	mvns	r3, r3
 8002126:	4944      	ldr	r1, [pc, #272]	; (8002238 <HAL_GPIO_DeInit+0x1e4>)
 8002128:	4013      	ands	r3, r2
 800212a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800212c:	4b42      	ldr	r3, [pc, #264]	; (8002238 <HAL_GPIO_DeInit+0x1e4>)
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	43db      	mvns	r3, r3
 8002134:	4940      	ldr	r1, [pc, #256]	; (8002238 <HAL_GPIO_DeInit+0x1e4>)
 8002136:	4013      	ands	r3, r2
 8002138:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	220f      	movs	r2, #15
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800214a:	4a34      	ldr	r2, [pc, #208]	; (800221c <HAL_GPIO_DeInit+0x1c8>)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	089b      	lsrs	r3, r3, #2
 8002150:	3302      	adds	r3, #2
 8002152:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	43da      	mvns	r2, r3
 800215a:	4830      	ldr	r0, [pc, #192]	; (800221c <HAL_GPIO_DeInit+0x1c8>)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	089b      	lsrs	r3, r3, #2
 8002160:	400a      	ands	r2, r1
 8002162:	3302      	adds	r3, #2
 8002164:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	2103      	movs	r1, #3
 8002172:	fa01 f303 	lsl.w	r3, r1, r3
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	08da      	lsrs	r2, r3, #3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3208      	adds	r2, #8
 8002184:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	220f      	movs	r2, #15
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	08d2      	lsrs	r2, r2, #3
 800219c:	4019      	ands	r1, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3208      	adds	r2, #8
 80021a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2103      	movs	r1, #3
 80021b0:	fa01 f303 	lsl.w	r3, r1, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	401a      	ands	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	2101      	movs	r1, #1
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	401a      	ands	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2103      	movs	r1, #3
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	401a      	ands	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ea:	2101      	movs	r1, #1
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	401a      	ands	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	3301      	adds	r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	f47f af2b 	bne.w	8002064 <HAL_GPIO_DeInit+0x10>
  }
}
 800220e:	bf00      	nop
 8002210:	bf00      	nop
 8002212:	371c      	adds	r7, #28
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40010000 	.word	0x40010000
 8002220:	48000400 	.word	0x48000400
 8002224:	48000800 	.word	0x48000800
 8002228:	48000c00 	.word	0x48000c00
 800222c:	48001000 	.word	0x48001000
 8002230:	48001400 	.word	0x48001400
 8002234:	48001800 	.word	0x48001800
 8002238:	40010400 	.word	0x40010400

0800223c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	807b      	strh	r3, [r7, #2]
 8002248:	4613      	mov	r3, r2
 800224a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800224c:	787b      	ldrb	r3, [r7, #1]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002258:	e002      	b.n	8002260 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800225a:	887a      	ldrh	r2, [r7, #2]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4013      	ands	r3, r2
 8002284:	041a      	lsls	r2, r3, #16
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	43d9      	mvns	r1, r3
 800228a:	887b      	ldrh	r3, [r7, #2]
 800228c:	400b      	ands	r3, r1
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	619a      	str	r2, [r3, #24]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d006      	beq.n	80022c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022b6:	4a05      	ldr	r2, [pc, #20]	; (80022cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f806 	bl	80022d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40010400 	.word	0x40010400

080022d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e08d      	b.n	8002414 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d106      	bne.n	8002312 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7fe fd03 	bl	8000d18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2224      	movs	r2, #36	; 0x24
 8002316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0201 	bic.w	r2, r2, #1
 8002328:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002336:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002346:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d107      	bne.n	8002360 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	e006      	b.n	800236e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800236c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d108      	bne.n	8002388 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	e007      	b.n	8002398 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002396:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023aa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023ba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69d9      	ldr	r1, [r3, #28]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1a      	ldr	r2, [r3, #32]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0201 	orr.w	r2, r2, #1
 80023f4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e021      	b.n	8002472 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2224      	movs	r2, #36	; 0x24
 8002432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0201 	bic.w	r2, r2, #1
 8002444:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7fe fcc4 	bl	8000dd4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af02      	add	r7, sp, #8
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	4608      	mov	r0, r1
 8002486:	4611      	mov	r1, r2
 8002488:	461a      	mov	r2, r3
 800248a:	4603      	mov	r3, r0
 800248c:	817b      	strh	r3, [r7, #10]
 800248e:	460b      	mov	r3, r1
 8002490:	813b      	strh	r3, [r7, #8]
 8002492:	4613      	mov	r3, r2
 8002494:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b20      	cmp	r3, #32
 80024a0:	f040 80f9 	bne.w	8002696 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <HAL_I2C_Mem_Write+0x34>
 80024aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d105      	bne.n	80024bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0ed      	b.n	8002698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_I2C_Mem_Write+0x4e>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e0e6      	b.n	8002698 <HAL_I2C_Mem_Write+0x21c>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024d2:	f7ff f9c7 	bl	8001864 <HAL_GetTick>
 80024d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	2319      	movs	r3, #25
 80024de:	2201      	movs	r2, #1
 80024e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 fac3 	bl	8002a70 <I2C_WaitOnFlagUntilTimeout>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0d1      	b.n	8002698 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2221      	movs	r2, #33	; 0x21
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2240      	movs	r2, #64	; 0x40
 8002500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a3a      	ldr	r2, [r7, #32]
 800250e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002514:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800251c:	88f8      	ldrh	r0, [r7, #6]
 800251e:	893a      	ldrh	r2, [r7, #8]
 8002520:	8979      	ldrh	r1, [r7, #10]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	9301      	str	r3, [sp, #4]
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	4603      	mov	r3, r0
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 f9d3 	bl	80028d8 <I2C_RequestMemoryWrite>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0a9      	b.n	8002698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002548:	b29b      	uxth	r3, r3
 800254a:	2bff      	cmp	r3, #255	; 0xff
 800254c:	d90e      	bls.n	800256c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	22ff      	movs	r2, #255	; 0xff
 8002552:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002558:	b2da      	uxtb	r2, r3
 800255a:	8979      	ldrh	r1, [r7, #10]
 800255c:	2300      	movs	r3, #0
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 fc3d 	bl	8002de4 <I2C_TransferConfig>
 800256a:	e00f      	b.n	800258c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257a:	b2da      	uxtb	r2, r3
 800257c:	8979      	ldrh	r1, [r7, #10]
 800257e:	2300      	movs	r3, #0
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 fc2c 	bl	8002de4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 fabc 	bl	8002b0e <I2C_WaitOnTXISFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e07b      	b.n	8002698 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	781a      	ldrb	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d034      	beq.n	8002644 <HAL_I2C_Mem_Write+0x1c8>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d130      	bne.n	8002644 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e8:	2200      	movs	r2, #0
 80025ea:	2180      	movs	r1, #128	; 0x80
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 fa3f 	bl	8002a70 <I2C_WaitOnFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e04d      	b.n	8002698 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002600:	b29b      	uxth	r3, r3
 8002602:	2bff      	cmp	r3, #255	; 0xff
 8002604:	d90e      	bls.n	8002624 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	22ff      	movs	r2, #255	; 0xff
 800260a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002610:	b2da      	uxtb	r2, r3
 8002612:	8979      	ldrh	r1, [r7, #10]
 8002614:	2300      	movs	r3, #0
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 fbe1 	bl	8002de4 <I2C_TransferConfig>
 8002622:	e00f      	b.n	8002644 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002632:	b2da      	uxtb	r2, r3
 8002634:	8979      	ldrh	r1, [r7, #10]
 8002636:	2300      	movs	r3, #0
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 fbd0 	bl	8002de4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29b      	uxth	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d19e      	bne.n	800258c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 faa2 	bl	8002b9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e01a      	b.n	8002698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2220      	movs	r2, #32
 8002668:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6859      	ldr	r1, [r3, #4]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <HAL_I2C_Mem_Write+0x224>)
 8002676:	400b      	ands	r3, r1
 8002678:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2220      	movs	r2, #32
 800267e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	e000      	b.n	8002698 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002696:	2302      	movs	r3, #2
  }
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	fe00e800 	.word	0xfe00e800

080026a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	4608      	mov	r0, r1
 80026ae:	4611      	mov	r1, r2
 80026b0:	461a      	mov	r2, r3
 80026b2:	4603      	mov	r3, r0
 80026b4:	817b      	strh	r3, [r7, #10]
 80026b6:	460b      	mov	r3, r1
 80026b8:	813b      	strh	r3, [r7, #8]
 80026ba:	4613      	mov	r3, r2
 80026bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b20      	cmp	r3, #32
 80026c8:	f040 80fd 	bne.w	80028c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <HAL_I2C_Mem_Read+0x34>
 80026d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d105      	bne.n	80026e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0f1      	b.n	80028c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_I2C_Mem_Read+0x4e>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e0ea      	b.n	80028c8 <HAL_I2C_Mem_Read+0x224>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026fa:	f7ff f8b3 	bl	8001864 <HAL_GetTick>
 80026fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	2319      	movs	r3, #25
 8002706:	2201      	movs	r2, #1
 8002708:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 f9af 	bl	8002a70 <I2C_WaitOnFlagUntilTimeout>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0d5      	b.n	80028c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2222      	movs	r2, #34	; 0x22
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2240      	movs	r2, #64	; 0x40
 8002728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a3a      	ldr	r2, [r7, #32]
 8002736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800273c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002744:	88f8      	ldrh	r0, [r7, #6]
 8002746:	893a      	ldrh	r2, [r7, #8]
 8002748:	8979      	ldrh	r1, [r7, #10]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	9301      	str	r3, [sp, #4]
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	4603      	mov	r3, r0
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f913 	bl	8002980 <I2C_RequestMemoryRead>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0ad      	b.n	80028c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002770:	b29b      	uxth	r3, r3
 8002772:	2bff      	cmp	r3, #255	; 0xff
 8002774:	d90e      	bls.n	8002794 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	22ff      	movs	r2, #255	; 0xff
 800277a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002780:	b2da      	uxtb	r2, r3
 8002782:	8979      	ldrh	r1, [r7, #10]
 8002784:	4b52      	ldr	r3, [pc, #328]	; (80028d0 <HAL_I2C_Mem_Read+0x22c>)
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fb29 	bl	8002de4 <I2C_TransferConfig>
 8002792:	e00f      	b.n	80027b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	8979      	ldrh	r1, [r7, #10]
 80027a6:	4b4a      	ldr	r3, [pc, #296]	; (80028d0 <HAL_I2C_Mem_Read+0x22c>)
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 fb18 	bl	8002de4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ba:	2200      	movs	r2, #0
 80027bc:	2104      	movs	r1, #4
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f956 	bl	8002a70 <I2C_WaitOnFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e07c      	b.n	80028c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d034      	beq.n	8002874 <HAL_I2C_Mem_Read+0x1d0>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280e:	2b00      	cmp	r3, #0
 8002810:	d130      	bne.n	8002874 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002818:	2200      	movs	r2, #0
 800281a:	2180      	movs	r1, #128	; 0x80
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 f927 	bl	8002a70 <I2C_WaitOnFlagUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e04d      	b.n	80028c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002830:	b29b      	uxth	r3, r3
 8002832:	2bff      	cmp	r3, #255	; 0xff
 8002834:	d90e      	bls.n	8002854 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	22ff      	movs	r2, #255	; 0xff
 800283a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002840:	b2da      	uxtb	r2, r3
 8002842:	8979      	ldrh	r1, [r7, #10]
 8002844:	2300      	movs	r3, #0
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 fac9 	bl	8002de4 <I2C_TransferConfig>
 8002852:	e00f      	b.n	8002874 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002862:	b2da      	uxtb	r2, r3
 8002864:	8979      	ldrh	r1, [r7, #10]
 8002866:	2300      	movs	r3, #0
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 fab8 	bl	8002de4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002878:	b29b      	uxth	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d19a      	bne.n	80027b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f98a 	bl	8002b9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e01a      	b.n	80028c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2220      	movs	r2, #32
 8002898:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6859      	ldr	r1, [r3, #4]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_I2C_Mem_Read+0x230>)
 80028a6:	400b      	ands	r3, r1
 80028a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e000      	b.n	80028c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80028c6:	2302      	movs	r3, #2
  }
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	80002400 	.word	0x80002400
 80028d4:	fe00e800 	.word	0xfe00e800

080028d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af02      	add	r7, sp, #8
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	4608      	mov	r0, r1
 80028e2:	4611      	mov	r1, r2
 80028e4:	461a      	mov	r2, r3
 80028e6:	4603      	mov	r3, r0
 80028e8:	817b      	strh	r3, [r7, #10]
 80028ea:	460b      	mov	r3, r1
 80028ec:	813b      	strh	r3, [r7, #8]
 80028ee:	4613      	mov	r3, r2
 80028f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	8979      	ldrh	r1, [r7, #10]
 80028f8:	4b20      	ldr	r3, [pc, #128]	; (800297c <I2C_RequestMemoryWrite+0xa4>)
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 fa6f 	bl	8002de4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002906:	69fa      	ldr	r2, [r7, #28]
 8002908:	69b9      	ldr	r1, [r7, #24]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 f8ff 	bl	8002b0e <I2C_WaitOnTXISFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e02c      	b.n	8002974 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d105      	bne.n	800292c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002920:	893b      	ldrh	r3, [r7, #8]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	629a      	str	r2, [r3, #40]	; 0x28
 800292a:	e015      	b.n	8002958 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800292c:	893b      	ldrh	r3, [r7, #8]
 800292e:	0a1b      	lsrs	r3, r3, #8
 8002930:	b29b      	uxth	r3, r3
 8002932:	b2da      	uxtb	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800293a:	69fa      	ldr	r2, [r7, #28]
 800293c:	69b9      	ldr	r1, [r7, #24]
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f8e5 	bl	8002b0e <I2C_WaitOnTXISFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e012      	b.n	8002974 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800294e:	893b      	ldrh	r3, [r7, #8]
 8002950:	b2da      	uxtb	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	2200      	movs	r2, #0
 8002960:	2180      	movs	r1, #128	; 0x80
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f884 	bl	8002a70 <I2C_WaitOnFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	80002000 	.word	0x80002000

08002980 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af02      	add	r7, sp, #8
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	4608      	mov	r0, r1
 800298a:	4611      	mov	r1, r2
 800298c:	461a      	mov	r2, r3
 800298e:	4603      	mov	r3, r0
 8002990:	817b      	strh	r3, [r7, #10]
 8002992:	460b      	mov	r3, r1
 8002994:	813b      	strh	r3, [r7, #8]
 8002996:	4613      	mov	r3, r2
 8002998:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	8979      	ldrh	r1, [r7, #10]
 80029a0:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <I2C_RequestMemoryRead+0xa4>)
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	2300      	movs	r3, #0
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 fa1c 	bl	8002de4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	69b9      	ldr	r1, [r7, #24]
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f8ac 	bl	8002b0e <I2C_WaitOnTXISFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e02c      	b.n	8002a1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d105      	bne.n	80029d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029c6:	893b      	ldrh	r3, [r7, #8]
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	629a      	str	r2, [r3, #40]	; 0x28
 80029d0:	e015      	b.n	80029fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029d2:	893b      	ldrh	r3, [r7, #8]
 80029d4:	0a1b      	lsrs	r3, r3, #8
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029e0:	69fa      	ldr	r2, [r7, #28]
 80029e2:	69b9      	ldr	r1, [r7, #24]
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 f892 	bl	8002b0e <I2C_WaitOnTXISFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e012      	b.n	8002a1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029f4:	893b      	ldrh	r3, [r7, #8]
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	2200      	movs	r2, #0
 8002a06:	2140      	movs	r1, #64	; 0x40
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f831 	bl	8002a70 <I2C_WaitOnFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	80002000 	.word	0x80002000

08002a28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d103      	bne.n	8002a46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2200      	movs	r2, #0
 8002a44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d007      	beq.n	8002a64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699a      	ldr	r2, [r3, #24]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	619a      	str	r2, [r3, #24]
  }
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a80:	e031      	b.n	8002ae6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a88:	d02d      	beq.n	8002ae6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8a:	f7fe feeb 	bl	8001864 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d302      	bcc.n	8002aa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d122      	bne.n	8002ae6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d113      	bne.n	8002ae6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f043 0220 	orr.w	r2, r3, #32
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e00f      	b.n	8002b06 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699a      	ldr	r2, [r3, #24]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4013      	ands	r3, r2
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	bf0c      	ite	eq
 8002af6:	2301      	moveq	r3, #1
 8002af8:	2300      	movne	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d0be      	beq.n	8002a82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b1a:	e033      	b.n	8002b84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 f87f 	bl	8002c24 <I2C_IsErrorOccurred>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e031      	b.n	8002b94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b36:	d025      	beq.n	8002b84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b38:	f7fe fe94 	bl	8001864 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d302      	bcc.n	8002b4e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d11a      	bne.n	8002b84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d013      	beq.n	8002b84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b60:	f043 0220 	orr.w	r2, r3, #32
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e007      	b.n	8002b94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d1c4      	bne.n	8002b1c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ba8:	e02f      	b.n	8002c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 f838 	bl	8002c24 <I2C_IsErrorOccurred>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e02d      	b.n	8002c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bbe:	f7fe fe51 	bl	8001864 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d302      	bcc.n	8002bd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d11a      	bne.n	8002c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b20      	cmp	r3, #32
 8002be0:	d013      	beq.n	8002c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	f043 0220 	orr.w	r2, r3, #32
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e007      	b.n	8002c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d1c8      	bne.n	8002baa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08a      	sub	sp, #40	; 0x28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d068      	beq.n	8002d22 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2210      	movs	r2, #16
 8002c56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c58:	e049      	b.n	8002cee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c60:	d045      	beq.n	8002cee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c62:	f7fe fdff 	bl	8001864 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d302      	bcc.n	8002c78 <I2C_IsErrorOccurred+0x54>
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d13a      	bne.n	8002cee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c9a:	d121      	bne.n	8002ce0 <I2C_IsErrorOccurred+0xbc>
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ca2:	d01d      	beq.n	8002ce0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ca4:	7cfb      	ldrb	r3, [r7, #19]
 8002ca6:	2b20      	cmp	r3, #32
 8002ca8:	d01a      	beq.n	8002ce0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cb8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002cba:	f7fe fdd3 	bl	8001864 <HAL_GetTick>
 8002cbe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cc0:	e00e      	b.n	8002ce0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002cc2:	f7fe fdcf 	bl	8001864 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b19      	cmp	r3, #25
 8002cce:	d907      	bls.n	8002ce0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	f043 0320 	orr.w	r3, r3, #32
 8002cd6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002cde:	e006      	b.n	8002cee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	d1e9      	bne.n	8002cc2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d003      	beq.n	8002d04 <I2C_IsErrorOccurred+0xe0>
 8002cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0aa      	beq.n	8002c5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d103      	bne.n	8002d14 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2220      	movs	r2, #32
 8002d12:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	f043 0304 	orr.w	r3, r3, #4
 8002d1a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00b      	beq.n	8002d4c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00b      	beq.n	8002d6e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	f043 0308 	orr.w	r3, r3, #8
 8002d5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00b      	beq.n	8002d90 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	f043 0302 	orr.w	r3, r3, #2
 8002d7e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d01c      	beq.n	8002dd2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f7ff fe45 	bl	8002a28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6859      	ldr	r1, [r3, #4]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <I2C_IsErrorOccurred+0x1bc>)
 8002daa:	400b      	ands	r3, r1
 8002dac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	431a      	orrs	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3728      	adds	r7, #40	; 0x28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	fe00e800 	.word	0xfe00e800

08002de4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	607b      	str	r3, [r7, #4]
 8002dee:	460b      	mov	r3, r1
 8002df0:	817b      	strh	r3, [r7, #10]
 8002df2:	4613      	mov	r3, r2
 8002df4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002df6:	897b      	ldrh	r3, [r7, #10]
 8002df8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dfc:	7a7b      	ldrb	r3, [r7, #9]
 8002dfe:	041b      	lsls	r3, r3, #16
 8002e00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e04:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e12:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	0d5b      	lsrs	r3, r3, #21
 8002e1e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <I2C_TransferConfig+0x60>)
 8002e24:	430b      	orrs	r3, r1
 8002e26:	43db      	mvns	r3, r3
 8002e28:	ea02 0103 	and.w	r1, r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e36:	bf00      	nop
 8002e38:	371c      	adds	r7, #28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	03ff63ff 	.word	0x03ff63ff

08002e48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d138      	bne.n	8002ed0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e032      	b.n	8002ed2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2224      	movs	r2, #36	; 0x24
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0201 	bic.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6819      	ldr	r1, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e000      	b.n	8002ed2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ed0:	2302      	movs	r3, #2
  }
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d139      	bne.n	8002f68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e033      	b.n	8002f6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2224      	movs	r2, #36	; 0x24
 8002f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0201 	bic.w	r2, r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	021b      	lsls	r3, r3, #8
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	e000      	b.n	8002f6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f68:	2302      	movs	r3, #2
  }
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f78:	b08f      	sub	sp, #60	; 0x3c
 8002f7a:	af0a      	add	r7, sp, #40	; 0x28
 8002f7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e116      	b.n	80031b6 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fe f866 	bl	8001074 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2203      	movs	r2, #3
 8002fac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f002 fb15 	bl	80055f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	603b      	str	r3, [r7, #0]
 8002fd2:	687e      	ldr	r6, [r7, #4]
 8002fd4:	466d      	mov	r5, sp
 8002fd6:	f106 0410 	add.w	r4, r6, #16
 8002fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fe2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fe6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fea:	1d33      	adds	r3, r6, #4
 8002fec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fee:	6838      	ldr	r0, [r7, #0]
 8002ff0:	f002 fad5 	bl	800559e <USB_CoreInit>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d005      	beq.n	8003006 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e0d7      	b.n	80031b6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2100      	movs	r1, #0
 800300c:	4618      	mov	r0, r3
 800300e:	f002 fb03 	bl	8005618 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003012:	2300      	movs	r3, #0
 8003014:	73fb      	strb	r3, [r7, #15]
 8003016:	e04a      	b.n	80030ae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003018:	7bfa      	ldrb	r2, [r7, #15]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	333d      	adds	r3, #61	; 0x3d
 8003028:	2201      	movs	r2, #1
 800302a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800302c:	7bfa      	ldrb	r2, [r7, #15]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4413      	add	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	333c      	adds	r3, #60	; 0x3c
 800303c:	7bfa      	ldrb	r2, [r7, #15]
 800303e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003040:	7bfa      	ldrb	r2, [r7, #15]
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	b298      	uxth	r0, r3
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	3356      	adds	r3, #86	; 0x56
 8003054:	4602      	mov	r2, r0
 8003056:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003058:	7bfa      	ldrb	r2, [r7, #15]
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	3340      	adds	r3, #64	; 0x40
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800306c:	7bfa      	ldrb	r2, [r7, #15]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	3344      	adds	r3, #68	; 0x44
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003080:	7bfa      	ldrb	r2, [r7, #15]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	3348      	adds	r3, #72	; 0x48
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003094:	7bfa      	ldrb	r2, [r7, #15]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	334c      	adds	r3, #76	; 0x4c
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	3301      	adds	r3, #1
 80030ac:	73fb      	strb	r3, [r7, #15]
 80030ae:	7bfa      	ldrb	r2, [r7, #15]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d3af      	bcc.n	8003018 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b8:	2300      	movs	r3, #0
 80030ba:	73fb      	strb	r3, [r7, #15]
 80030bc:	e044      	b.n	8003148 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030be:	7bfa      	ldrb	r2, [r7, #15]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030d4:	7bfa      	ldrb	r2, [r7, #15]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80030e6:	7bfa      	ldrb	r2, [r7, #15]
 80030e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030ea:	7bfa      	ldrb	r2, [r7, #15]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003100:	7bfa      	ldrb	r2, [r7, #15]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003116:	7bfa      	ldrb	r2, [r7, #15]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800312c:	7bfa      	ldrb	r2, [r7, #15]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003142:	7bfb      	ldrb	r3, [r7, #15]
 8003144:	3301      	adds	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
 8003148:	7bfa      	ldrb	r2, [r7, #15]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	429a      	cmp	r2, r3
 8003150:	d3b5      	bcc.n	80030be <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	687e      	ldr	r6, [r7, #4]
 800315a:	466d      	mov	r5, sp
 800315c:	f106 0410 	add.w	r4, r6, #16
 8003160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003168:	e894 0003 	ldmia.w	r4, {r0, r1}
 800316c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003170:	1d33      	adds	r3, r6, #4
 8003172:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003174:	6838      	ldr	r0, [r7, #0]
 8003176:	f002 fa9b 	bl	80056b0 <USB_DevInit>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e014      	b.n	80031b6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d102      	bne.n	80031aa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f80a 	bl	80031be <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f002 fc3d 	bl	8005a2e <USB_DevDisconnect>

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031be <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031be:	b480      	push	{r7}
 80031c0:	b085      	sub	sp, #20
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f0:	f043 0303 	orr.w	r3, r3, #3
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800320c:	4b05      	ldr	r3, [pc, #20]	; (8003224 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a04      	ldr	r2, [pc, #16]	; (8003224 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003216:	6013      	str	r3, [r2, #0]
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40007000 	.word	0x40007000

08003228 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800322c:	4b04      	ldr	r3, [pc, #16]	; (8003240 <HAL_PWREx_GetVoltageRange+0x18>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003234:	4618      	mov	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40007000 	.word	0x40007000

08003244 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003252:	d130      	bne.n	80032b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003254:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800325c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003260:	d038      	beq.n	80032d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003262:	4b20      	ldr	r3, [pc, #128]	; (80032e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800326a:	4a1e      	ldr	r2, [pc, #120]	; (80032e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800326c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003270:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003272:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2232      	movs	r2, #50	; 0x32
 8003278:	fb02 f303 	mul.w	r3, r2, r3
 800327c:	4a1b      	ldr	r2, [pc, #108]	; (80032ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800327e:	fba2 2303 	umull	r2, r3, r2, r3
 8003282:	0c9b      	lsrs	r3, r3, #18
 8003284:	3301      	adds	r3, #1
 8003286:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003288:	e002      	b.n	8003290 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	3b01      	subs	r3, #1
 800328e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003290:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329c:	d102      	bne.n	80032a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f2      	bne.n	800328a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032a4:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b0:	d110      	bne.n	80032d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e00f      	b.n	80032d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032b6:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c2:	d007      	beq.n	80032d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032c4:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032cc:	4a05      	ldr	r2, [pc, #20]	; (80032e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40007000 	.word	0x40007000
 80032e8:	20000000 	.word	0x20000000
 80032ec:	431bde83 	.word	0x431bde83

080032f0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80032f4:	4b05      	ldr	r3, [pc, #20]	; (800330c <HAL_PWREx_EnableVddUSB+0x1c>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4a04      	ldr	r2, [pc, #16]	; (800330c <HAL_PWREx_EnableVddUSB+0x1c>)
 80032fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032fe:	6053      	str	r3, [r2, #4]
}
 8003300:	bf00      	nop
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40007000 	.word	0x40007000

08003310 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af02      	add	r7, sp, #8
 8003316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003318:	f7fe faa4 	bl	8001864 <HAL_GetTick>
 800331c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e063      	b.n	80033f0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10b      	bne.n	800334c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7fd fd6d 	bl	8000e1c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003342:	f241 3188 	movw	r1, #5000	; 0x1388
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f858 	bl	80033fc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	3b01      	subs	r3, #1
 800335c:	021a      	lsls	r2, r3, #8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	2120      	movs	r1, #32
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f850 	bl	8003418 <QSPI_WaitFlagStateUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800337c:	7afb      	ldrb	r3, [r7, #11]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d131      	bne.n	80033e6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800338c:	f023 0310 	bic.w	r3, r3, #16
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6852      	ldr	r2, [r2, #4]
 8003394:	0611      	lsls	r1, r2, #24
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68d2      	ldr	r2, [r2, #12]
 800339a:	4311      	orrs	r1, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	430b      	orrs	r3, r1
 80033a2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <HAL_QSPI_Init+0xe8>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6912      	ldr	r2, [r2, #16]
 80033b2:	0411      	lsls	r1, r2, #16
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6952      	ldr	r2, [r2, #20]
 80033b8:	4311      	orrs	r1, r2
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6992      	ldr	r2, [r2, #24]
 80033be:	4311      	orrs	r1, r2
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	430b      	orrs	r3, r1
 80033c6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80033ee:	7afb      	ldrb	r3, [r7, #11]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	ffe0f8fe 	.word	0xffe0f8fe

080033fc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003428:	e01a      	b.n	8003460 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003430:	d016      	beq.n	8003460 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003432:	f7fe fa17 	bl	8001864 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	429a      	cmp	r2, r3
 8003440:	d302      	bcc.n	8003448 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10b      	bne.n	8003460 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2204      	movs	r2, #4
 800344c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003454:	f043 0201 	orr.w	r2, r3, #1
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e00e      	b.n	800347e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	4013      	ands	r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	bf14      	ite	ne
 800346e:	2301      	movne	r3, #1
 8003470:	2300      	moveq	r3, #0
 8003472:	b2db      	uxtb	r3, r3
 8003474:	461a      	mov	r2, r3
 8003476:	79fb      	ldrb	r3, [r7, #7]
 8003478:	429a      	cmp	r2, r3
 800347a:	d1d6      	bne.n	800342a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e3ca      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800349a:	4b97      	ldr	r3, [pc, #604]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034a4:	4b94      	ldr	r3, [pc, #592]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 80e4 	beq.w	8003684 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d007      	beq.n	80034d2 <HAL_RCC_OscConfig+0x4a>
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	2b0c      	cmp	r3, #12
 80034c6:	f040 808b 	bne.w	80035e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	f040 8087 	bne.w	80035e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034d2:	4b89      	ldr	r3, [pc, #548]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d005      	beq.n	80034ea <HAL_RCC_OscConfig+0x62>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e3a2      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1a      	ldr	r2, [r3, #32]
 80034ee:	4b82      	ldr	r3, [pc, #520]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d004      	beq.n	8003504 <HAL_RCC_OscConfig+0x7c>
 80034fa:	4b7f      	ldr	r3, [pc, #508]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003502:	e005      	b.n	8003510 <HAL_RCC_OscConfig+0x88>
 8003504:	4b7c      	ldr	r3, [pc, #496]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800350a:	091b      	lsrs	r3, r3, #4
 800350c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003510:	4293      	cmp	r3, r2
 8003512:	d223      	bcs.n	800355c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fd55 	bl	8003fc8 <RCC_SetFlashLatencyFromMSIRange>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e383      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003528:	4b73      	ldr	r3, [pc, #460]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a72      	ldr	r2, [pc, #456]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 800352e:	f043 0308 	orr.w	r3, r3, #8
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	4b70      	ldr	r3, [pc, #448]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	496d      	ldr	r1, [pc, #436]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003546:	4b6c      	ldr	r3, [pc, #432]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	021b      	lsls	r3, r3, #8
 8003554:	4968      	ldr	r1, [pc, #416]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003556:	4313      	orrs	r3, r2
 8003558:	604b      	str	r3, [r1, #4]
 800355a:	e025      	b.n	80035a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800355c:	4b66      	ldr	r3, [pc, #408]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a65      	ldr	r2, [pc, #404]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003562:	f043 0308 	orr.w	r3, r3, #8
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	4b63      	ldr	r3, [pc, #396]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4960      	ldr	r1, [pc, #384]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003576:	4313      	orrs	r3, r2
 8003578:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800357a:	4b5f      	ldr	r3, [pc, #380]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	495b      	ldr	r1, [pc, #364]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 800358a:	4313      	orrs	r3, r2
 800358c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d109      	bne.n	80035a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fd15 	bl	8003fc8 <RCC_SetFlashLatencyFromMSIRange>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e343      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035a8:	f000 fc4a 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 80035ac:	4602      	mov	r2, r0
 80035ae:	4b52      	ldr	r3, [pc, #328]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	091b      	lsrs	r3, r3, #4
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	4950      	ldr	r1, [pc, #320]	; (80036fc <HAL_RCC_OscConfig+0x274>)
 80035ba:	5ccb      	ldrb	r3, [r1, r3]
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	fa22 f303 	lsr.w	r3, r2, r3
 80035c4:	4a4e      	ldr	r2, [pc, #312]	; (8003700 <HAL_RCC_OscConfig+0x278>)
 80035c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035c8:	4b4e      	ldr	r3, [pc, #312]	; (8003704 <HAL_RCC_OscConfig+0x27c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fe f8f9 	bl	80017c4 <HAL_InitTick>
 80035d2:	4603      	mov	r3, r0
 80035d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d052      	beq.n	8003682 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	e327      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d032      	beq.n	800364e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035e8:	4b43      	ldr	r3, [pc, #268]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a42      	ldr	r2, [pc, #264]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035f4:	f7fe f936 	bl	8001864 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035fc:	f7fe f932 	bl	8001864 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e310      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800360e:	4b3a      	ldr	r3, [pc, #232]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800361a:	4b37      	ldr	r3, [pc, #220]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a36      	ldr	r2, [pc, #216]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003620:	f043 0308 	orr.w	r3, r3, #8
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	4b34      	ldr	r3, [pc, #208]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	4931      	ldr	r1, [pc, #196]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003634:	4313      	orrs	r3, r2
 8003636:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003638:	4b2f      	ldr	r3, [pc, #188]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	021b      	lsls	r3, r3, #8
 8003646:	492c      	ldr	r1, [pc, #176]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003648:	4313      	orrs	r3, r2
 800364a:	604b      	str	r3, [r1, #4]
 800364c:	e01a      	b.n	8003684 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800364e:	4b2a      	ldr	r3, [pc, #168]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a29      	ldr	r2, [pc, #164]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800365a:	f7fe f903 	bl	8001864 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003662:	f7fe f8ff 	bl	8001864 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e2dd      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003674:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f0      	bne.n	8003662 <HAL_RCC_OscConfig+0x1da>
 8003680:	e000      	b.n	8003684 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003682:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d074      	beq.n	800377a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	2b08      	cmp	r3, #8
 8003694:	d005      	beq.n	80036a2 <HAL_RCC_OscConfig+0x21a>
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b0c      	cmp	r3, #12
 800369a:	d10e      	bne.n	80036ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d10b      	bne.n	80036ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a2:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d064      	beq.n	8003778 <HAL_RCC_OscConfig+0x2f0>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d160      	bne.n	8003778 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e2ba      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c2:	d106      	bne.n	80036d2 <HAL_RCC_OscConfig+0x24a>
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a0b      	ldr	r2, [pc, #44]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80036ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	e026      	b.n	8003720 <HAL_RCC_OscConfig+0x298>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036da:	d115      	bne.n	8003708 <HAL_RCC_OscConfig+0x280>
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a05      	ldr	r2, [pc, #20]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80036e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	4b03      	ldr	r3, [pc, #12]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a02      	ldr	r2, [pc, #8]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80036ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	e014      	b.n	8003720 <HAL_RCC_OscConfig+0x298>
 80036f6:	bf00      	nop
 80036f8:	40021000 	.word	0x40021000
 80036fc:	08005b64 	.word	0x08005b64
 8003700:	20000000 	.word	0x20000000
 8003704:	20000014 	.word	0x20000014
 8003708:	4ba0      	ldr	r3, [pc, #640]	; (800398c <HAL_RCC_OscConfig+0x504>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a9f      	ldr	r2, [pc, #636]	; (800398c <HAL_RCC_OscConfig+0x504>)
 800370e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	4b9d      	ldr	r3, [pc, #628]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a9c      	ldr	r2, [pc, #624]	; (800398c <HAL_RCC_OscConfig+0x504>)
 800371a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800371e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d013      	beq.n	8003750 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fe f89c 	bl	8001864 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003730:	f7fe f898 	bl	8001864 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	; 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e276      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003742:	4b92      	ldr	r3, [pc, #584]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0x2a8>
 800374e:	e014      	b.n	800377a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fe f888 	bl	8001864 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003758:	f7fe f884 	bl	8001864 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e262      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800376a:	4b88      	ldr	r3, [pc, #544]	; (800398c <HAL_RCC_OscConfig+0x504>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x2d0>
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d060      	beq.n	8003848 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	2b04      	cmp	r3, #4
 800378a:	d005      	beq.n	8003798 <HAL_RCC_OscConfig+0x310>
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	2b0c      	cmp	r3, #12
 8003790:	d119      	bne.n	80037c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d116      	bne.n	80037c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003798:	4b7c      	ldr	r3, [pc, #496]	; (800398c <HAL_RCC_OscConfig+0x504>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_OscConfig+0x328>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e23f      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b0:	4b76      	ldr	r3, [pc, #472]	; (800398c <HAL_RCC_OscConfig+0x504>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	061b      	lsls	r3, r3, #24
 80037be:	4973      	ldr	r1, [pc, #460]	; (800398c <HAL_RCC_OscConfig+0x504>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037c4:	e040      	b.n	8003848 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d023      	beq.n	8003816 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ce:	4b6f      	ldr	r3, [pc, #444]	; (800398c <HAL_RCC_OscConfig+0x504>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a6e      	ldr	r2, [pc, #440]	; (800398c <HAL_RCC_OscConfig+0x504>)
 80037d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037da:	f7fe f843 	bl	8001864 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e2:	f7fe f83f 	bl	8001864 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e21d      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037f4:	4b65      	ldr	r3, [pc, #404]	; (800398c <HAL_RCC_OscConfig+0x504>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003800:	4b62      	ldr	r3, [pc, #392]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	061b      	lsls	r3, r3, #24
 800380e:	495f      	ldr	r1, [pc, #380]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003810:	4313      	orrs	r3, r2
 8003812:	604b      	str	r3, [r1, #4]
 8003814:	e018      	b.n	8003848 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003816:	4b5d      	ldr	r3, [pc, #372]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a5c      	ldr	r2, [pc, #368]	; (800398c <HAL_RCC_OscConfig+0x504>)
 800381c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003822:	f7fe f81f 	bl	8001864 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800382a:	f7fe f81b 	bl	8001864 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e1f9      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800383c:	4b53      	ldr	r3, [pc, #332]	; (800398c <HAL_RCC_OscConfig+0x504>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1f0      	bne.n	800382a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d03c      	beq.n	80038ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01c      	beq.n	8003896 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800385c:	4b4b      	ldr	r3, [pc, #300]	; (800398c <HAL_RCC_OscConfig+0x504>)
 800385e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003862:	4a4a      	ldr	r2, [pc, #296]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386c:	f7fd fffa 	bl	8001864 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003874:	f7fd fff6 	bl	8001864 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e1d4      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003886:	4b41      	ldr	r3, [pc, #260]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0ef      	beq.n	8003874 <HAL_RCC_OscConfig+0x3ec>
 8003894:	e01b      	b.n	80038ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003896:	4b3d      	ldr	r3, [pc, #244]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003898:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800389c:	4a3b      	ldr	r2, [pc, #236]	; (800398c <HAL_RCC_OscConfig+0x504>)
 800389e:	f023 0301 	bic.w	r3, r3, #1
 80038a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a6:	f7fd ffdd 	bl	8001864 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ae:	f7fd ffd9 	bl	8001864 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e1b7      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038c0:	4b32      	ldr	r3, [pc, #200]	; (800398c <HAL_RCC_OscConfig+0x504>)
 80038c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1ef      	bne.n	80038ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 80a6 	beq.w	8003a28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038dc:	2300      	movs	r3, #0
 80038de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038e0:	4b2a      	ldr	r3, [pc, #168]	; (800398c <HAL_RCC_OscConfig+0x504>)
 80038e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10d      	bne.n	8003908 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ec:	4b27      	ldr	r3, [pc, #156]	; (800398c <HAL_RCC_OscConfig+0x504>)
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	4a26      	ldr	r2, [pc, #152]	; (800398c <HAL_RCC_OscConfig+0x504>)
 80038f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f6:	6593      	str	r3, [r2, #88]	; 0x58
 80038f8:	4b24      	ldr	r3, [pc, #144]	; (800398c <HAL_RCC_OscConfig+0x504>)
 80038fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003904:	2301      	movs	r3, #1
 8003906:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003908:	4b21      	ldr	r3, [pc, #132]	; (8003990 <HAL_RCC_OscConfig+0x508>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d118      	bne.n	8003946 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003914:	4b1e      	ldr	r3, [pc, #120]	; (8003990 <HAL_RCC_OscConfig+0x508>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a1d      	ldr	r2, [pc, #116]	; (8003990 <HAL_RCC_OscConfig+0x508>)
 800391a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800391e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003920:	f7fd ffa0 	bl	8001864 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003928:	f7fd ff9c 	bl	8001864 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e17a      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800393a:	4b15      	ldr	r3, [pc, #84]	; (8003990 <HAL_RCC_OscConfig+0x508>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d108      	bne.n	8003960 <HAL_RCC_OscConfig+0x4d8>
 800394e:	4b0f      	ldr	r3, [pc, #60]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003954:	4a0d      	ldr	r2, [pc, #52]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003956:	f043 0301 	orr.w	r3, r3, #1
 800395a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800395e:	e029      	b.n	80039b4 <HAL_RCC_OscConfig+0x52c>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b05      	cmp	r3, #5
 8003966:	d115      	bne.n	8003994 <HAL_RCC_OscConfig+0x50c>
 8003968:	4b08      	ldr	r3, [pc, #32]	; (800398c <HAL_RCC_OscConfig+0x504>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396e:	4a07      	ldr	r2, [pc, #28]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003970:	f043 0304 	orr.w	r3, r3, #4
 8003974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003978:	4b04      	ldr	r3, [pc, #16]	; (800398c <HAL_RCC_OscConfig+0x504>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397e:	4a03      	ldr	r2, [pc, #12]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003988:	e014      	b.n	80039b4 <HAL_RCC_OscConfig+0x52c>
 800398a:	bf00      	nop
 800398c:	40021000 	.word	0x40021000
 8003990:	40007000 	.word	0x40007000
 8003994:	4b9c      	ldr	r3, [pc, #624]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	4a9b      	ldr	r2, [pc, #620]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 800399c:	f023 0301 	bic.w	r3, r3, #1
 80039a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039a4:	4b98      	ldr	r3, [pc, #608]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 80039a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039aa:	4a97      	ldr	r2, [pc, #604]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 80039ac:	f023 0304 	bic.w	r3, r3, #4
 80039b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d016      	beq.n	80039ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039bc:	f7fd ff52 	bl	8001864 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039c2:	e00a      	b.n	80039da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c4:	f7fd ff4e 	bl	8001864 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e12a      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039da:	4b8b      	ldr	r3, [pc, #556]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 80039dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0ed      	beq.n	80039c4 <HAL_RCC_OscConfig+0x53c>
 80039e8:	e015      	b.n	8003a16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ea:	f7fd ff3b 	bl	8001864 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039f0:	e00a      	b.n	8003a08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f2:	f7fd ff37 	bl	8001864 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e113      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a08:	4b7f      	ldr	r3, [pc, #508]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1ed      	bne.n	80039f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a16:	7ffb      	ldrb	r3, [r7, #31]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d105      	bne.n	8003a28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a1c:	4b7a      	ldr	r3, [pc, #488]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	4a79      	ldr	r2, [pc, #484]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a26:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80fe 	beq.w	8003c2e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	f040 80d0 	bne.w	8003bdc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a3c:	4b72      	ldr	r3, [pc, #456]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f003 0203 	and.w	r2, r3, #3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d130      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d127      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d11f      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a7c:	2a07      	cmp	r2, #7
 8003a7e:	bf14      	ite	ne
 8003a80:	2201      	movne	r2, #1
 8003a82:	2200      	moveq	r2, #0
 8003a84:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d113      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a94:	085b      	lsrs	r3, r3, #1
 8003a96:	3b01      	subs	r3, #1
 8003a98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d109      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	085b      	lsrs	r3, r3, #1
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d06e      	beq.n	8003b90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2b0c      	cmp	r3, #12
 8003ab6:	d069      	beq.n	8003b8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ab8:	4b53      	ldr	r3, [pc, #332]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d105      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ac4:	4b50      	ldr	r3, [pc, #320]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0ad      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ad4:	4b4c      	ldr	r3, [pc, #304]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a4b      	ldr	r2, [pc, #300]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ade:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ae0:	f7fd fec0 	bl	8001864 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae8:	f7fd febc 	bl	8001864 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e09a      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003afa:	4b43      	ldr	r3, [pc, #268]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b06:	4b40      	ldr	r3, [pc, #256]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	4b40      	ldr	r3, [pc, #256]	; (8003c0c <HAL_RCC_OscConfig+0x784>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b16:	3a01      	subs	r2, #1
 8003b18:	0112      	lsls	r2, r2, #4
 8003b1a:	4311      	orrs	r1, r2
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b20:	0212      	lsls	r2, r2, #8
 8003b22:	4311      	orrs	r1, r2
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b28:	0852      	lsrs	r2, r2, #1
 8003b2a:	3a01      	subs	r2, #1
 8003b2c:	0552      	lsls	r2, r2, #21
 8003b2e:	4311      	orrs	r1, r2
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b34:	0852      	lsrs	r2, r2, #1
 8003b36:	3a01      	subs	r2, #1
 8003b38:	0652      	lsls	r2, r2, #25
 8003b3a:	4311      	orrs	r1, r2
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b40:	0912      	lsrs	r2, r2, #4
 8003b42:	0452      	lsls	r2, r2, #17
 8003b44:	430a      	orrs	r2, r1
 8003b46:	4930      	ldr	r1, [pc, #192]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b4c:	4b2e      	ldr	r3, [pc, #184]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a2d      	ldr	r2, [pc, #180]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b58:	4b2b      	ldr	r3, [pc, #172]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4a2a      	ldr	r2, [pc, #168]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b64:	f7fd fe7e 	bl	8001864 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6c:	f7fd fe7a 	bl	8001864 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e058      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b7e:	4b22      	ldr	r3, [pc, #136]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b8a:	e050      	b.n	8003c2e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e04f      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b90:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d148      	bne.n	8003c2e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b9c:	4b1a      	ldr	r3, [pc, #104]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a19      	ldr	r2, [pc, #100]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ba6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ba8:	4b17      	ldr	r3, [pc, #92]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4a16      	ldr	r2, [pc, #88]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bb4:	f7fd fe56 	bl	8001864 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bbc:	f7fd fe52 	bl	8001864 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e030      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bce:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0x734>
 8003bda:	e028      	b.n	8003c2e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b0c      	cmp	r3, #12
 8003be0:	d023      	beq.n	8003c2a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a08      	ldr	r2, [pc, #32]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003be8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bee:	f7fd fe39 	bl	8001864 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf4:	e00c      	b.n	8003c10 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf6:	f7fd fe35 	bl	8001864 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d905      	bls.n	8003c10 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e013      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c10:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_RCC_OscConfig+0x7b0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1ec      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c1c:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <HAL_RCC_OscConfig+0x7b0>)
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	4905      	ldr	r1, [pc, #20]	; (8003c38 <HAL_RCC_OscConfig+0x7b0>)
 8003c22:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <HAL_RCC_OscConfig+0x7b4>)
 8003c24:	4013      	ands	r3, r2
 8003c26:	60cb      	str	r3, [r1, #12]
 8003c28:	e001      	b.n	8003c2e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3720      	adds	r7, #32
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	feeefffc 	.word	0xfeeefffc

08003c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0e7      	b.n	8003e24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c54:	4b75      	ldr	r3, [pc, #468]	; (8003e2c <HAL_RCC_ClockConfig+0x1ec>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d910      	bls.n	8003c84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c62:	4b72      	ldr	r3, [pc, #456]	; (8003e2c <HAL_RCC_ClockConfig+0x1ec>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 0207 	bic.w	r2, r3, #7
 8003c6a:	4970      	ldr	r1, [pc, #448]	; (8003e2c <HAL_RCC_ClockConfig+0x1ec>)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c72:	4b6e      	ldr	r3, [pc, #440]	; (8003e2c <HAL_RCC_ClockConfig+0x1ec>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d001      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0cf      	b.n	8003e24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d010      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	4b66      	ldr	r3, [pc, #408]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d908      	bls.n	8003cb2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca0:	4b63      	ldr	r3, [pc, #396]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	4960      	ldr	r1, [pc, #384]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d04c      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d107      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cc6:	4b5a      	ldr	r3, [pc, #360]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d121      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e0a6      	b.n	8003e24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d107      	bne.n	8003cee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cde:	4b54      	ldr	r3, [pc, #336]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d115      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e09a      	b.n	8003e24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cf6:	4b4e      	ldr	r3, [pc, #312]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e08e      	b.n	8003e24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d06:	4b4a      	ldr	r3, [pc, #296]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e086      	b.n	8003e24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d16:	4b46      	ldr	r3, [pc, #280]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f023 0203 	bic.w	r2, r3, #3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	4943      	ldr	r1, [pc, #268]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d28:	f7fd fd9c 	bl	8001864 <HAL_GetTick>
 8003d2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2e:	e00a      	b.n	8003d46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d30:	f7fd fd98 	bl	8001864 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e06e      	b.n	8003e24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d46:	4b3a      	ldr	r3, [pc, #232]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 020c 	and.w	r2, r3, #12
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d1eb      	bne.n	8003d30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d010      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	4b31      	ldr	r3, [pc, #196]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d208      	bcs.n	8003d86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d74:	4b2e      	ldr	r3, [pc, #184]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	492b      	ldr	r1, [pc, #172]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d86:	4b29      	ldr	r3, [pc, #164]	; (8003e2c <HAL_RCC_ClockConfig+0x1ec>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d210      	bcs.n	8003db6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d94:	4b25      	ldr	r3, [pc, #148]	; (8003e2c <HAL_RCC_ClockConfig+0x1ec>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f023 0207 	bic.w	r2, r3, #7
 8003d9c:	4923      	ldr	r1, [pc, #140]	; (8003e2c <HAL_RCC_ClockConfig+0x1ec>)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da4:	4b21      	ldr	r3, [pc, #132]	; (8003e2c <HAL_RCC_ClockConfig+0x1ec>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d001      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e036      	b.n	8003e24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d008      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc2:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	4918      	ldr	r1, [pc, #96]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d009      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003de0:	4b13      	ldr	r3, [pc, #76]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4910      	ldr	r1, [pc, #64]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003df4:	f000 f824 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	4b0d      	ldr	r3, [pc, #52]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	091b      	lsrs	r3, r3, #4
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	490b      	ldr	r1, [pc, #44]	; (8003e34 <HAL_RCC_ClockConfig+0x1f4>)
 8003e06:	5ccb      	ldrb	r3, [r1, r3]
 8003e08:	f003 031f 	and.w	r3, r3, #31
 8003e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e10:	4a09      	ldr	r2, [pc, #36]	; (8003e38 <HAL_RCC_ClockConfig+0x1f8>)
 8003e12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e14:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <HAL_RCC_ClockConfig+0x1fc>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fd fcd3 	bl	80017c4 <HAL_InitTick>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e22:	7afb      	ldrb	r3, [r7, #11]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40022000 	.word	0x40022000
 8003e30:	40021000 	.word	0x40021000
 8003e34:	08005b64 	.word	0x08005b64
 8003e38:	20000000 	.word	0x20000000
 8003e3c:	20000014 	.word	0x20000014

08003e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b089      	sub	sp, #36	; 0x24
 8003e44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	61fb      	str	r3, [r7, #28]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e4e:	4b3e      	ldr	r3, [pc, #248]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
 8003e56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e58:	4b3b      	ldr	r3, [pc, #236]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_RCC_GetSysClockFreq+0x34>
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	2b0c      	cmp	r3, #12
 8003e6c:	d121      	bne.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d11e      	bne.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e74:	4b34      	ldr	r3, [pc, #208]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d107      	bne.n	8003e90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e80:	4b31      	ldr	r3, [pc, #196]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e86:	0a1b      	lsrs	r3, r3, #8
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	61fb      	str	r3, [r7, #28]
 8003e8e:	e005      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e90:	4b2d      	ldr	r3, [pc, #180]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	091b      	lsrs	r3, r3, #4
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e9c:	4a2b      	ldr	r2, [pc, #172]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10d      	bne.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003eb0:	e00a      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d102      	bne.n	8003ebe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003eb8:	4b25      	ldr	r3, [pc, #148]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x110>)
 8003eba:	61bb      	str	r3, [r7, #24]
 8003ebc:	e004      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ec4:	4b23      	ldr	r3, [pc, #140]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ec6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	2b0c      	cmp	r3, #12
 8003ecc:	d134      	bne.n	8003f38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ece:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d003      	beq.n	8003ee6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d003      	beq.n	8003eec <HAL_RCC_GetSysClockFreq+0xac>
 8003ee4:	e005      	b.n	8003ef2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ee6:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ee8:	617b      	str	r3, [r7, #20]
      break;
 8003eea:	e005      	b.n	8003ef8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003eec:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x114>)
 8003eee:	617b      	str	r3, [r7, #20]
      break;
 8003ef0:	e002      	b.n	8003ef8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	617b      	str	r3, [r7, #20]
      break;
 8003ef6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ef8:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	091b      	lsrs	r3, r3, #4
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	3301      	adds	r3, #1
 8003f04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f06:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	0a1b      	lsrs	r3, r3, #8
 8003f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	fb03 f202 	mul.w	r2, r3, r2
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	0e5b      	lsrs	r3, r3, #25
 8003f24:	f003 0303 	and.w	r3, r3, #3
 8003f28:	3301      	adds	r3, #1
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f38:	69bb      	ldr	r3, [r7, #24]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3724      	adds	r7, #36	; 0x24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	08005b7c 	.word	0x08005b7c
 8003f50:	00f42400 	.word	0x00f42400
 8003f54:	007a1200 	.word	0x007a1200

08003f58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f5c:	4b03      	ldr	r3, [pc, #12]	; (8003f6c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	20000000 	.word	0x20000000

08003f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f74:	f7ff fff0 	bl	8003f58 <HAL_RCC_GetHCLKFreq>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	0a1b      	lsrs	r3, r3, #8
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	4904      	ldr	r1, [pc, #16]	; (8003f98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f86:	5ccb      	ldrb	r3, [r1, r3]
 8003f88:	f003 031f 	and.w	r3, r3, #31
 8003f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40021000 	.word	0x40021000
 8003f98:	08005b74 	.word	0x08005b74

08003f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003fa0:	f7ff ffda 	bl	8003f58 <HAL_RCC_GetHCLKFreq>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	0adb      	lsrs	r3, r3, #11
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	4904      	ldr	r1, [pc, #16]	; (8003fc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fb2:	5ccb      	ldrb	r3, [r1, r3]
 8003fb4:	f003 031f 	and.w	r3, r3, #31
 8003fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	08005b74 	.word	0x08005b74

08003fc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fd4:	4b2a      	ldr	r3, [pc, #168]	; (8004080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fe0:	f7ff f922 	bl	8003228 <HAL_PWREx_GetVoltageRange>
 8003fe4:	6178      	str	r0, [r7, #20]
 8003fe6:	e014      	b.n	8004012 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fe8:	4b25      	ldr	r3, [pc, #148]	; (8004080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fec:	4a24      	ldr	r2, [pc, #144]	; (8004080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ff4:	4b22      	ldr	r3, [pc, #136]	; (8004080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004000:	f7ff f912 	bl	8003228 <HAL_PWREx_GetVoltageRange>
 8004004:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004006:	4b1e      	ldr	r3, [pc, #120]	; (8004080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400a:	4a1d      	ldr	r2, [pc, #116]	; (8004080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800400c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004010:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004018:	d10b      	bne.n	8004032 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b80      	cmp	r3, #128	; 0x80
 800401e:	d919      	bls.n	8004054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2ba0      	cmp	r3, #160	; 0xa0
 8004024:	d902      	bls.n	800402c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004026:	2302      	movs	r3, #2
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	e013      	b.n	8004054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800402c:	2301      	movs	r3, #1
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	e010      	b.n	8004054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b80      	cmp	r3, #128	; 0x80
 8004036:	d902      	bls.n	800403e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004038:	2303      	movs	r3, #3
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	e00a      	b.n	8004054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b80      	cmp	r3, #128	; 0x80
 8004042:	d102      	bne.n	800404a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004044:	2302      	movs	r3, #2
 8004046:	613b      	str	r3, [r7, #16]
 8004048:	e004      	b.n	8004054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b70      	cmp	r3, #112	; 0x70
 800404e:	d101      	bne.n	8004054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004050:	2301      	movs	r3, #1
 8004052:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f023 0207 	bic.w	r2, r3, #7
 800405c:	4909      	ldr	r1, [pc, #36]	; (8004084 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004064:	4b07      	ldr	r3, [pc, #28]	; (8004084 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	429a      	cmp	r2, r3
 8004070:	d001      	beq.n	8004076 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40021000 	.word	0x40021000
 8004084:	40022000 	.word	0x40022000

08004088 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004090:	2300      	movs	r3, #0
 8004092:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004094:	2300      	movs	r3, #0
 8004096:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d041      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040ac:	d02a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80040ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040b2:	d824      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040b8:	d008      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040be:	d81e      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c8:	d010      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040ca:	e018      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040cc:	4b86      	ldr	r3, [pc, #536]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4a85      	ldr	r2, [pc, #532]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040d8:	e015      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3304      	adds	r3, #4
 80040de:	2100      	movs	r1, #0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 facb 	bl	800467c <RCCEx_PLLSAI1_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040ea:	e00c      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3320      	adds	r3, #32
 80040f0:	2100      	movs	r1, #0
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fbb6 	bl	8004864 <RCCEx_PLLSAI2_Config>
 80040f8:	4603      	mov	r3, r0
 80040fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040fc:	e003      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	74fb      	strb	r3, [r7, #19]
      break;
 8004102:	e000      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004104:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004106:	7cfb      	ldrb	r3, [r7, #19]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10b      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800410c:	4b76      	ldr	r3, [pc, #472]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004112:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800411a:	4973      	ldr	r1, [pc, #460]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004122:	e001      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004124:	7cfb      	ldrb	r3, [r7, #19]
 8004126:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d041      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004138:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800413c:	d02a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800413e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004142:	d824      	bhi.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004144:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004148:	d008      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800414a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800414e:	d81e      	bhi.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004158:	d010      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800415a:	e018      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800415c:	4b62      	ldr	r3, [pc, #392]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4a61      	ldr	r2, [pc, #388]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004166:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004168:	e015      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3304      	adds	r3, #4
 800416e:	2100      	movs	r1, #0
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fa83 	bl	800467c <RCCEx_PLLSAI1_Config>
 8004176:	4603      	mov	r3, r0
 8004178:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800417a:	e00c      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3320      	adds	r3, #32
 8004180:	2100      	movs	r1, #0
 8004182:	4618      	mov	r0, r3
 8004184:	f000 fb6e 	bl	8004864 <RCCEx_PLLSAI2_Config>
 8004188:	4603      	mov	r3, r0
 800418a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800418c:	e003      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	74fb      	strb	r3, [r7, #19]
      break;
 8004192:	e000      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004196:	7cfb      	ldrb	r3, [r7, #19]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10b      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800419c:	4b52      	ldr	r3, [pc, #328]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800419e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041aa:	494f      	ldr	r1, [pc, #316]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041b2:	e001      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b4:	7cfb      	ldrb	r3, [r7, #19]
 80041b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 80a0 	beq.w	8004306 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041c6:	2300      	movs	r3, #0
 80041c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041ca:	4b47      	ldr	r3, [pc, #284]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80041da:	2300      	movs	r3, #0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00d      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e0:	4b41      	ldr	r3, [pc, #260]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e4:	4a40      	ldr	r2, [pc, #256]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ea:	6593      	str	r3, [r2, #88]	; 0x58
 80041ec:	4b3e      	ldr	r3, [pc, #248]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f8:	2301      	movs	r3, #1
 80041fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041fc:	4b3b      	ldr	r3, [pc, #236]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a3a      	ldr	r2, [pc, #232]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004206:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004208:	f7fd fb2c 	bl	8001864 <HAL_GetTick>
 800420c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800420e:	e009      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004210:	f7fd fb28 	bl	8001864 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d902      	bls.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	74fb      	strb	r3, [r7, #19]
        break;
 8004222:	e005      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004224:	4b31      	ldr	r3, [pc, #196]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0ef      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004230:	7cfb      	ldrb	r3, [r7, #19]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d15c      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004236:	4b2c      	ldr	r3, [pc, #176]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004240:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d01f      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	429a      	cmp	r2, r3
 8004252:	d019      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004254:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800425e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004260:	4b21      	ldr	r3, [pc, #132]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	4a20      	ldr	r2, [pc, #128]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004270:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	4a1c      	ldr	r2, [pc, #112]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004280:	4a19      	ldr	r2, [pc, #100]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d016      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004292:	f7fd fae7 	bl	8001864 <HAL_GetTick>
 8004296:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004298:	e00b      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800429a:	f7fd fae3 	bl	8001864 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d902      	bls.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	74fb      	strb	r3, [r7, #19]
            break;
 80042b0:	e006      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042b2:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0ec      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80042c0:	7cfb      	ldrb	r3, [r7, #19]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10c      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042c6:	4b08      	ldr	r3, [pc, #32]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d6:	4904      	ldr	r1, [pc, #16]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042de:	e009      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042e0:	7cfb      	ldrb	r3, [r7, #19]
 80042e2:	74bb      	strb	r3, [r7, #18]
 80042e4:	e006      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80042e6:	bf00      	nop
 80042e8:	40021000 	.word	0x40021000
 80042ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f0:	7cfb      	ldrb	r3, [r7, #19]
 80042f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042f4:	7c7b      	ldrb	r3, [r7, #17]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d105      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042fa:	4b9e      	ldr	r3, [pc, #632]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fe:	4a9d      	ldr	r2, [pc, #628]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004304:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004312:	4b98      	ldr	r3, [pc, #608]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004318:	f023 0203 	bic.w	r2, r3, #3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	4994      	ldr	r1, [pc, #592]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004334:	4b8f      	ldr	r3, [pc, #572]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433a:	f023 020c 	bic.w	r2, r3, #12
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004342:	498c      	ldr	r1, [pc, #560]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004356:	4b87      	ldr	r3, [pc, #540]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	4983      	ldr	r1, [pc, #524]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004378:	4b7e      	ldr	r3, [pc, #504]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004386:	497b      	ldr	r1, [pc, #492]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800439a:	4b76      	ldr	r3, [pc, #472]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a8:	4972      	ldr	r1, [pc, #456]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043bc:	4b6d      	ldr	r3, [pc, #436]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ca:	496a      	ldr	r1, [pc, #424]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043de:	4b65      	ldr	r3, [pc, #404]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ec:	4961      	ldr	r1, [pc, #388]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004400:	4b5c      	ldr	r3, [pc, #368]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004406:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440e:	4959      	ldr	r1, [pc, #356]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004422:	4b54      	ldr	r3, [pc, #336]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004430:	4950      	ldr	r1, [pc, #320]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004444:	4b4b      	ldr	r3, [pc, #300]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004452:	4948      	ldr	r1, [pc, #288]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004466:	4b43      	ldr	r3, [pc, #268]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004474:	493f      	ldr	r1, [pc, #252]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d028      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004488:	4b3a      	ldr	r3, [pc, #232]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004496:	4937      	ldr	r1, [pc, #220]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044a6:	d106      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044a8:	4b32      	ldr	r3, [pc, #200]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4a31      	ldr	r2, [pc, #196]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044b2:	60d3      	str	r3, [r2, #12]
 80044b4:	e011      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044be:	d10c      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3304      	adds	r3, #4
 80044c4:	2101      	movs	r1, #1
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 f8d8 	bl	800467c <RCCEx_PLLSAI1_Config>
 80044cc:	4603      	mov	r3, r0
 80044ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044d0:	7cfb      	ldrb	r3, [r7, #19]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80044d6:	7cfb      	ldrb	r3, [r7, #19]
 80044d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d028      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044e6:	4b23      	ldr	r3, [pc, #140]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f4:	491f      	ldr	r1, [pc, #124]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004504:	d106      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004506:	4b1b      	ldr	r3, [pc, #108]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	4a1a      	ldr	r2, [pc, #104]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004510:	60d3      	str	r3, [r2, #12]
 8004512:	e011      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004518:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800451c:	d10c      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3304      	adds	r3, #4
 8004522:	2101      	movs	r1, #1
 8004524:	4618      	mov	r0, r3
 8004526:	f000 f8a9 	bl	800467c <RCCEx_PLLSAI1_Config>
 800452a:	4603      	mov	r3, r0
 800452c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800452e:	7cfb      	ldrb	r3, [r7, #19]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004534:	7cfb      	ldrb	r3, [r7, #19]
 8004536:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d02b      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004552:	4908      	ldr	r1, [pc, #32]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004554:	4313      	orrs	r3, r2
 8004556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004562:	d109      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004564:	4b03      	ldr	r3, [pc, #12]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	4a02      	ldr	r2, [pc, #8]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800456e:	60d3      	str	r3, [r2, #12]
 8004570:	e014      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004572:	bf00      	nop
 8004574:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800457c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004580:	d10c      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3304      	adds	r3, #4
 8004586:	2101      	movs	r1, #1
 8004588:	4618      	mov	r0, r3
 800458a:	f000 f877 	bl	800467c <RCCEx_PLLSAI1_Config>
 800458e:	4603      	mov	r3, r0
 8004590:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004592:	7cfb      	ldrb	r3, [r7, #19]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004598:	7cfb      	ldrb	r3, [r7, #19]
 800459a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d02f      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045a8:	4b2b      	ldr	r3, [pc, #172]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045b6:	4928      	ldr	r1, [pc, #160]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045c6:	d10d      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3304      	adds	r3, #4
 80045cc:	2102      	movs	r1, #2
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 f854 	bl	800467c <RCCEx_PLLSAI1_Config>
 80045d4:	4603      	mov	r3, r0
 80045d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045d8:	7cfb      	ldrb	r3, [r7, #19]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d014      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045de:	7cfb      	ldrb	r3, [r7, #19]
 80045e0:	74bb      	strb	r3, [r7, #18]
 80045e2:	e011      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045ec:	d10c      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3320      	adds	r3, #32
 80045f2:	2102      	movs	r1, #2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 f935 	bl	8004864 <RCCEx_PLLSAI2_Config>
 80045fa:	4603      	mov	r3, r0
 80045fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045fe:	7cfb      	ldrb	r3, [r7, #19]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004604:	7cfb      	ldrb	r3, [r7, #19]
 8004606:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004614:	4b10      	ldr	r3, [pc, #64]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004622:	490d      	ldr	r1, [pc, #52]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00b      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004636:	4b08      	ldr	r3, [pc, #32]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004646:	4904      	ldr	r1, [pc, #16]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800464e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40021000 	.word	0x40021000

0800465c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004660:	4b05      	ldr	r3, [pc, #20]	; (8004678 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a04      	ldr	r2, [pc, #16]	; (8004678 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004666:	f043 0304 	orr.w	r3, r3, #4
 800466a:	6013      	str	r3, [r2, #0]
}
 800466c:	bf00      	nop
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40021000 	.word	0x40021000

0800467c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800468a:	4b75      	ldr	r3, [pc, #468]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d018      	beq.n	80046c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004696:	4b72      	ldr	r3, [pc, #456]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f003 0203 	and.w	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d10d      	bne.n	80046c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
       ||
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80046ae:	4b6c      	ldr	r3, [pc, #432]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	091b      	lsrs	r3, r3, #4
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
       ||
 80046be:	429a      	cmp	r2, r3
 80046c0:	d047      	beq.n	8004752 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	73fb      	strb	r3, [r7, #15]
 80046c6:	e044      	b.n	8004752 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d018      	beq.n	8004702 <RCCEx_PLLSAI1_Config+0x86>
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d825      	bhi.n	8004720 <RCCEx_PLLSAI1_Config+0xa4>
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d002      	beq.n	80046de <RCCEx_PLLSAI1_Config+0x62>
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d009      	beq.n	80046f0 <RCCEx_PLLSAI1_Config+0x74>
 80046dc:	e020      	b.n	8004720 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046de:	4b60      	ldr	r3, [pc, #384]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d11d      	bne.n	8004726 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ee:	e01a      	b.n	8004726 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046f0:	4b5b      	ldr	r3, [pc, #364]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d116      	bne.n	800472a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004700:	e013      	b.n	800472a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004702:	4b57      	ldr	r3, [pc, #348]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10f      	bne.n	800472e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800470e:	4b54      	ldr	r3, [pc, #336]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d109      	bne.n	800472e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800471e:	e006      	b.n	800472e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	73fb      	strb	r3, [r7, #15]
      break;
 8004724:	e004      	b.n	8004730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004726:	bf00      	nop
 8004728:	e002      	b.n	8004730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800472a:	bf00      	nop
 800472c:	e000      	b.n	8004730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800472e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10d      	bne.n	8004752 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004736:	4b4a      	ldr	r3, [pc, #296]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	3b01      	subs	r3, #1
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	430b      	orrs	r3, r1
 800474c:	4944      	ldr	r1, [pc, #272]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800474e:	4313      	orrs	r3, r2
 8004750:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d17d      	bne.n	8004854 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004758:	4b41      	ldr	r3, [pc, #260]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a40      	ldr	r2, [pc, #256]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800475e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004762:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004764:	f7fd f87e 	bl	8001864 <HAL_GetTick>
 8004768:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800476a:	e009      	b.n	8004780 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800476c:	f7fd f87a 	bl	8001864 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d902      	bls.n	8004780 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	73fb      	strb	r3, [r7, #15]
        break;
 800477e:	e005      	b.n	800478c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004780:	4b37      	ldr	r3, [pc, #220]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1ef      	bne.n	800476c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d160      	bne.n	8004854 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d111      	bne.n	80047bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004798:	4b31      	ldr	r3, [pc, #196]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80047a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6892      	ldr	r2, [r2, #8]
 80047a8:	0211      	lsls	r1, r2, #8
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	68d2      	ldr	r2, [r2, #12]
 80047ae:	0912      	lsrs	r2, r2, #4
 80047b0:	0452      	lsls	r2, r2, #17
 80047b2:	430a      	orrs	r2, r1
 80047b4:	492a      	ldr	r1, [pc, #168]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	610b      	str	r3, [r1, #16]
 80047ba:	e027      	b.n	800480c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d112      	bne.n	80047e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047c2:	4b27      	ldr	r3, [pc, #156]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80047ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6892      	ldr	r2, [r2, #8]
 80047d2:	0211      	lsls	r1, r2, #8
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6912      	ldr	r2, [r2, #16]
 80047d8:	0852      	lsrs	r2, r2, #1
 80047da:	3a01      	subs	r2, #1
 80047dc:	0552      	lsls	r2, r2, #21
 80047de:	430a      	orrs	r2, r1
 80047e0:	491f      	ldr	r1, [pc, #124]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	610b      	str	r3, [r1, #16]
 80047e6:	e011      	b.n	800480c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047e8:	4b1d      	ldr	r3, [pc, #116]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6892      	ldr	r2, [r2, #8]
 80047f8:	0211      	lsls	r1, r2, #8
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6952      	ldr	r2, [r2, #20]
 80047fe:	0852      	lsrs	r2, r2, #1
 8004800:	3a01      	subs	r2, #1
 8004802:	0652      	lsls	r2, r2, #25
 8004804:	430a      	orrs	r2, r1
 8004806:	4916      	ldr	r1, [pc, #88]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004808:	4313      	orrs	r3, r2
 800480a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800480c:	4b14      	ldr	r3, [pc, #80]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a13      	ldr	r2, [pc, #76]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004812:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004816:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004818:	f7fd f824 	bl	8001864 <HAL_GetTick>
 800481c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800481e:	e009      	b.n	8004834 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004820:	f7fd f820 	bl	8001864 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d902      	bls.n	8004834 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	73fb      	strb	r3, [r7, #15]
          break;
 8004832:	e005      	b.n	8004840 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004834:	4b0a      	ldr	r3, [pc, #40]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0ef      	beq.n	8004820 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d106      	bne.n	8004854 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004846:	4b06      	ldr	r3, [pc, #24]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	4904      	ldr	r1, [pc, #16]	; (8004860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004850:	4313      	orrs	r3, r2
 8004852:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004854:	7bfb      	ldrb	r3, [r7, #15]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40021000 	.word	0x40021000

08004864 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004872:	4b6a      	ldr	r3, [pc, #424]	; (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d018      	beq.n	80048b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800487e:	4b67      	ldr	r3, [pc, #412]	; (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f003 0203 	and.w	r2, r3, #3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d10d      	bne.n	80048aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
       ||
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004896:	4b61      	ldr	r3, [pc, #388]	; (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	091b      	lsrs	r3, r3, #4
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
       ||
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d047      	beq.n	800493a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	73fb      	strb	r3, [r7, #15]
 80048ae:	e044      	b.n	800493a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d018      	beq.n	80048ea <RCCEx_PLLSAI2_Config+0x86>
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d825      	bhi.n	8004908 <RCCEx_PLLSAI2_Config+0xa4>
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d002      	beq.n	80048c6 <RCCEx_PLLSAI2_Config+0x62>
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d009      	beq.n	80048d8 <RCCEx_PLLSAI2_Config+0x74>
 80048c4:	e020      	b.n	8004908 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048c6:	4b55      	ldr	r3, [pc, #340]	; (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d11d      	bne.n	800490e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048d6:	e01a      	b.n	800490e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048d8:	4b50      	ldr	r3, [pc, #320]	; (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d116      	bne.n	8004912 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e8:	e013      	b.n	8004912 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048ea:	4b4c      	ldr	r3, [pc, #304]	; (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10f      	bne.n	8004916 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048f6:	4b49      	ldr	r3, [pc, #292]	; (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004906:	e006      	b.n	8004916 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	73fb      	strb	r3, [r7, #15]
      break;
 800490c:	e004      	b.n	8004918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800490e:	bf00      	nop
 8004910:	e002      	b.n	8004918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004912:	bf00      	nop
 8004914:	e000      	b.n	8004918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004916:	bf00      	nop
    }

    if(status == HAL_OK)
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10d      	bne.n	800493a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800491e:	4b3f      	ldr	r3, [pc, #252]	; (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6819      	ldr	r1, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	3b01      	subs	r3, #1
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	430b      	orrs	r3, r1
 8004934:	4939      	ldr	r1, [pc, #228]	; (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004936:	4313      	orrs	r3, r2
 8004938:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800493a:	7bfb      	ldrb	r3, [r7, #15]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d167      	bne.n	8004a10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004940:	4b36      	ldr	r3, [pc, #216]	; (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a35      	ldr	r2, [pc, #212]	; (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800494a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494c:	f7fc ff8a 	bl	8001864 <HAL_GetTick>
 8004950:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004952:	e009      	b.n	8004968 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004954:	f7fc ff86 	bl	8001864 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d902      	bls.n	8004968 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	73fb      	strb	r3, [r7, #15]
        break;
 8004966:	e005      	b.n	8004974 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004968:	4b2c      	ldr	r3, [pc, #176]	; (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1ef      	bne.n	8004954 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d14a      	bne.n	8004a10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d111      	bne.n	80049a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004980:	4b26      	ldr	r3, [pc, #152]	; (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6892      	ldr	r2, [r2, #8]
 8004990:	0211      	lsls	r1, r2, #8
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	68d2      	ldr	r2, [r2, #12]
 8004996:	0912      	lsrs	r2, r2, #4
 8004998:	0452      	lsls	r2, r2, #17
 800499a:	430a      	orrs	r2, r1
 800499c:	491f      	ldr	r1, [pc, #124]	; (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	614b      	str	r3, [r1, #20]
 80049a2:	e011      	b.n	80049c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049a4:	4b1d      	ldr	r3, [pc, #116]	; (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6892      	ldr	r2, [r2, #8]
 80049b4:	0211      	lsls	r1, r2, #8
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6912      	ldr	r2, [r2, #16]
 80049ba:	0852      	lsrs	r2, r2, #1
 80049bc:	3a01      	subs	r2, #1
 80049be:	0652      	lsls	r2, r2, #25
 80049c0:	430a      	orrs	r2, r1
 80049c2:	4916      	ldr	r1, [pc, #88]	; (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80049c8:	4b14      	ldr	r3, [pc, #80]	; (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a13      	ldr	r2, [pc, #76]	; (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d4:	f7fc ff46 	bl	8001864 <HAL_GetTick>
 80049d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049da:	e009      	b.n	80049f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049dc:	f7fc ff42 	bl	8001864 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d902      	bls.n	80049f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	73fb      	strb	r3, [r7, #15]
          break;
 80049ee:	e005      	b.n	80049fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049f0:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0ef      	beq.n	80049dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a02:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a04:	695a      	ldr	r2, [r3, #20]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	4904      	ldr	r1, [pc, #16]	; (8004a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40021000 	.word	0x40021000

08004a20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e095      	b.n	8004b5e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d108      	bne.n	8004a4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a42:	d009      	beq.n	8004a58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	61da      	str	r2, [r3, #28]
 8004a4a:	e005      	b.n	8004a58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7fc fa16 	bl	8000ea4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a98:	d902      	bls.n	8004aa0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	e002      	b.n	8004aa6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004aa4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004aae:	d007      	beq.n	8004ac0 <HAL_SPI_Init+0xa0>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ab8:	d002      	beq.n	8004ac0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b02:	ea42 0103 	orr.w	r1, r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	0c1b      	lsrs	r3, r3, #16
 8004b1c:	f003 0204 	and.w	r2, r3, #4
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b3c:	ea42 0103 	orr.w	r1, r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b082      	sub	sp, #8
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e040      	b.n	8004bfa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d106      	bne.n	8004b8e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7fc f9cf 	bl	8000f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2224      	movs	r2, #36	; 0x24
 8004b92:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0201 	bic.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fae1 	bl	8005174 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f826 	bl	8004c04 <UART_SetConfig>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e01b      	b.n	8004bfa <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004be0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0201 	orr.w	r2, r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 fb60 	bl	80052b8 <UART_CheckIdleState>
 8004bf8:	4603      	mov	r3, r0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c08:	b08a      	sub	sp, #40	; 0x28
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	4ba4      	ldr	r3, [pc, #656]	; (8004ec4 <UART_SetConfig+0x2c0>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c3c:	430b      	orrs	r3, r1
 8004c3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a99      	ldr	r2, [pc, #612]	; (8004ec8 <UART_SetConfig+0x2c4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d004      	beq.n	8004c70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c80:	430a      	orrs	r2, r1
 8004c82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a90      	ldr	r2, [pc, #576]	; (8004ecc <UART_SetConfig+0x2c8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d126      	bne.n	8004cdc <UART_SetConfig+0xd8>
 8004c8e:	4b90      	ldr	r3, [pc, #576]	; (8004ed0 <UART_SetConfig+0x2cc>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	f003 0303 	and.w	r3, r3, #3
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d81b      	bhi.n	8004cd4 <UART_SetConfig+0xd0>
 8004c9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ca4 <UART_SetConfig+0xa0>)
 8004c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca2:	bf00      	nop
 8004ca4:	08004cb5 	.word	0x08004cb5
 8004ca8:	08004cc5 	.word	0x08004cc5
 8004cac:	08004cbd 	.word	0x08004cbd
 8004cb0:	08004ccd 	.word	0x08004ccd
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cba:	e116      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc2:	e112      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cca:	e10e      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004ccc:	2308      	movs	r3, #8
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd2:	e10a      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cda:	e106      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a7c      	ldr	r2, [pc, #496]	; (8004ed4 <UART_SetConfig+0x2d0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d138      	bne.n	8004d58 <UART_SetConfig+0x154>
 8004ce6:	4b7a      	ldr	r3, [pc, #488]	; (8004ed0 <UART_SetConfig+0x2cc>)
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cec:	f003 030c 	and.w	r3, r3, #12
 8004cf0:	2b0c      	cmp	r3, #12
 8004cf2:	d82d      	bhi.n	8004d50 <UART_SetConfig+0x14c>
 8004cf4:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <UART_SetConfig+0xf8>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d31 	.word	0x08004d31
 8004d00:	08004d51 	.word	0x08004d51
 8004d04:	08004d51 	.word	0x08004d51
 8004d08:	08004d51 	.word	0x08004d51
 8004d0c:	08004d41 	.word	0x08004d41
 8004d10:	08004d51 	.word	0x08004d51
 8004d14:	08004d51 	.word	0x08004d51
 8004d18:	08004d51 	.word	0x08004d51
 8004d1c:	08004d39 	.word	0x08004d39
 8004d20:	08004d51 	.word	0x08004d51
 8004d24:	08004d51 	.word	0x08004d51
 8004d28:	08004d51 	.word	0x08004d51
 8004d2c:	08004d49 	.word	0x08004d49
 8004d30:	2300      	movs	r3, #0
 8004d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d36:	e0d8      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d3e:	e0d4      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004d40:	2304      	movs	r3, #4
 8004d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d46:	e0d0      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004d48:	2308      	movs	r3, #8
 8004d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d4e:	e0cc      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004d50:	2310      	movs	r3, #16
 8004d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d56:	e0c8      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a5e      	ldr	r2, [pc, #376]	; (8004ed8 <UART_SetConfig+0x2d4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d125      	bne.n	8004dae <UART_SetConfig+0x1aa>
 8004d62:	4b5b      	ldr	r3, [pc, #364]	; (8004ed0 <UART_SetConfig+0x2cc>)
 8004d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d6c:	2b30      	cmp	r3, #48	; 0x30
 8004d6e:	d016      	beq.n	8004d9e <UART_SetConfig+0x19a>
 8004d70:	2b30      	cmp	r3, #48	; 0x30
 8004d72:	d818      	bhi.n	8004da6 <UART_SetConfig+0x1a2>
 8004d74:	2b20      	cmp	r3, #32
 8004d76:	d00a      	beq.n	8004d8e <UART_SetConfig+0x18a>
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	d814      	bhi.n	8004da6 <UART_SetConfig+0x1a2>
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <UART_SetConfig+0x182>
 8004d80:	2b10      	cmp	r3, #16
 8004d82:	d008      	beq.n	8004d96 <UART_SetConfig+0x192>
 8004d84:	e00f      	b.n	8004da6 <UART_SetConfig+0x1a2>
 8004d86:	2300      	movs	r3, #0
 8004d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8c:	e0ad      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d94:	e0a9      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004d96:	2304      	movs	r3, #4
 8004d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9c:	e0a5      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004d9e:	2308      	movs	r3, #8
 8004da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da4:	e0a1      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004da6:	2310      	movs	r3, #16
 8004da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dac:	e09d      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a4a      	ldr	r2, [pc, #296]	; (8004edc <UART_SetConfig+0x2d8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d125      	bne.n	8004e04 <UART_SetConfig+0x200>
 8004db8:	4b45      	ldr	r3, [pc, #276]	; (8004ed0 <UART_SetConfig+0x2cc>)
 8004dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dc2:	2bc0      	cmp	r3, #192	; 0xc0
 8004dc4:	d016      	beq.n	8004df4 <UART_SetConfig+0x1f0>
 8004dc6:	2bc0      	cmp	r3, #192	; 0xc0
 8004dc8:	d818      	bhi.n	8004dfc <UART_SetConfig+0x1f8>
 8004dca:	2b80      	cmp	r3, #128	; 0x80
 8004dcc:	d00a      	beq.n	8004de4 <UART_SetConfig+0x1e0>
 8004dce:	2b80      	cmp	r3, #128	; 0x80
 8004dd0:	d814      	bhi.n	8004dfc <UART_SetConfig+0x1f8>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <UART_SetConfig+0x1d8>
 8004dd6:	2b40      	cmp	r3, #64	; 0x40
 8004dd8:	d008      	beq.n	8004dec <UART_SetConfig+0x1e8>
 8004dda:	e00f      	b.n	8004dfc <UART_SetConfig+0x1f8>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de2:	e082      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004de4:	2302      	movs	r3, #2
 8004de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dea:	e07e      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004dec:	2304      	movs	r3, #4
 8004dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df2:	e07a      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004df4:	2308      	movs	r3, #8
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfa:	e076      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004dfc:	2310      	movs	r3, #16
 8004dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e02:	e072      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a35      	ldr	r2, [pc, #212]	; (8004ee0 <UART_SetConfig+0x2dc>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d12a      	bne.n	8004e64 <UART_SetConfig+0x260>
 8004e0e:	4b30      	ldr	r3, [pc, #192]	; (8004ed0 <UART_SetConfig+0x2cc>)
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e1c:	d01a      	beq.n	8004e54 <UART_SetConfig+0x250>
 8004e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e22:	d81b      	bhi.n	8004e5c <UART_SetConfig+0x258>
 8004e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e28:	d00c      	beq.n	8004e44 <UART_SetConfig+0x240>
 8004e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e2e:	d815      	bhi.n	8004e5c <UART_SetConfig+0x258>
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <UART_SetConfig+0x238>
 8004e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e38:	d008      	beq.n	8004e4c <UART_SetConfig+0x248>
 8004e3a:	e00f      	b.n	8004e5c <UART_SetConfig+0x258>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e42:	e052      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004e44:	2302      	movs	r3, #2
 8004e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4a:	e04e      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004e4c:	2304      	movs	r3, #4
 8004e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e52:	e04a      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004e54:	2308      	movs	r3, #8
 8004e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5a:	e046      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004e5c:	2310      	movs	r3, #16
 8004e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e62:	e042      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a17      	ldr	r2, [pc, #92]	; (8004ec8 <UART_SetConfig+0x2c4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d13a      	bne.n	8004ee4 <UART_SetConfig+0x2e0>
 8004e6e:	4b18      	ldr	r3, [pc, #96]	; (8004ed0 <UART_SetConfig+0x2cc>)
 8004e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e7c:	d01a      	beq.n	8004eb4 <UART_SetConfig+0x2b0>
 8004e7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e82:	d81b      	bhi.n	8004ebc <UART_SetConfig+0x2b8>
 8004e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e88:	d00c      	beq.n	8004ea4 <UART_SetConfig+0x2a0>
 8004e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e8e:	d815      	bhi.n	8004ebc <UART_SetConfig+0x2b8>
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <UART_SetConfig+0x298>
 8004e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e98:	d008      	beq.n	8004eac <UART_SetConfig+0x2a8>
 8004e9a:	e00f      	b.n	8004ebc <UART_SetConfig+0x2b8>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea2:	e022      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eaa:	e01e      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004eac:	2304      	movs	r3, #4
 8004eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb2:	e01a      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004eb4:	2308      	movs	r3, #8
 8004eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eba:	e016      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ec2:	e012      	b.n	8004eea <UART_SetConfig+0x2e6>
 8004ec4:	efff69f3 	.word	0xefff69f3
 8004ec8:	40008000 	.word	0x40008000
 8004ecc:	40013800 	.word	0x40013800
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	40004400 	.word	0x40004400
 8004ed8:	40004800 	.word	0x40004800
 8004edc:	40004c00 	.word	0x40004c00
 8004ee0:	40005000 	.word	0x40005000
 8004ee4:	2310      	movs	r3, #16
 8004ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a9f      	ldr	r2, [pc, #636]	; (800516c <UART_SetConfig+0x568>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d17a      	bne.n	8004fea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ef4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d824      	bhi.n	8004f46 <UART_SetConfig+0x342>
 8004efc:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <UART_SetConfig+0x300>)
 8004efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f02:	bf00      	nop
 8004f04:	08004f29 	.word	0x08004f29
 8004f08:	08004f47 	.word	0x08004f47
 8004f0c:	08004f31 	.word	0x08004f31
 8004f10:	08004f47 	.word	0x08004f47
 8004f14:	08004f37 	.word	0x08004f37
 8004f18:	08004f47 	.word	0x08004f47
 8004f1c:	08004f47 	.word	0x08004f47
 8004f20:	08004f47 	.word	0x08004f47
 8004f24:	08004f3f 	.word	0x08004f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f28:	f7ff f822 	bl	8003f70 <HAL_RCC_GetPCLK1Freq>
 8004f2c:	61f8      	str	r0, [r7, #28]
        break;
 8004f2e:	e010      	b.n	8004f52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f30:	4b8f      	ldr	r3, [pc, #572]	; (8005170 <UART_SetConfig+0x56c>)
 8004f32:	61fb      	str	r3, [r7, #28]
        break;
 8004f34:	e00d      	b.n	8004f52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f36:	f7fe ff83 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 8004f3a:	61f8      	str	r0, [r7, #28]
        break;
 8004f3c:	e009      	b.n	8004f52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f42:	61fb      	str	r3, [r7, #28]
        break;
 8004f44:	e005      	b.n	8004f52 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80fb 	beq.w	8005150 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	4413      	add	r3, r2
 8004f64:	69fa      	ldr	r2, [r7, #28]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d305      	bcc.n	8004f76 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f70:	69fa      	ldr	r2, [r7, #28]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d903      	bls.n	8004f7e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f7c:	e0e8      	b.n	8005150 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	2200      	movs	r2, #0
 8004f82:	461c      	mov	r4, r3
 8004f84:	4615      	mov	r5, r2
 8004f86:	f04f 0200 	mov.w	r2, #0
 8004f8a:	f04f 0300 	mov.w	r3, #0
 8004f8e:	022b      	lsls	r3, r5, #8
 8004f90:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f94:	0222      	lsls	r2, r4, #8
 8004f96:	68f9      	ldr	r1, [r7, #12]
 8004f98:	6849      	ldr	r1, [r1, #4]
 8004f9a:	0849      	lsrs	r1, r1, #1
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	4688      	mov	r8, r1
 8004fa0:	4681      	mov	r9, r0
 8004fa2:	eb12 0a08 	adds.w	sl, r2, r8
 8004fa6:	eb43 0b09 	adc.w	fp, r3, r9
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	603b      	str	r3, [r7, #0]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fb8:	4650      	mov	r0, sl
 8004fba:	4659      	mov	r1, fp
 8004fbc:	f7fb f904 	bl	80001c8 <__aeabi_uldivmod>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fce:	d308      	bcc.n	8004fe2 <UART_SetConfig+0x3de>
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fd6:	d204      	bcs.n	8004fe2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	60da      	str	r2, [r3, #12]
 8004fe0:	e0b6      	b.n	8005150 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fe8:	e0b2      	b.n	8005150 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff2:	d15e      	bne.n	80050b2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004ff4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d828      	bhi.n	800504e <UART_SetConfig+0x44a>
 8004ffc:	a201      	add	r2, pc, #4	; (adr r2, 8005004 <UART_SetConfig+0x400>)
 8004ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005002:	bf00      	nop
 8005004:	08005029 	.word	0x08005029
 8005008:	08005031 	.word	0x08005031
 800500c:	08005039 	.word	0x08005039
 8005010:	0800504f 	.word	0x0800504f
 8005014:	0800503f 	.word	0x0800503f
 8005018:	0800504f 	.word	0x0800504f
 800501c:	0800504f 	.word	0x0800504f
 8005020:	0800504f 	.word	0x0800504f
 8005024:	08005047 	.word	0x08005047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005028:	f7fe ffa2 	bl	8003f70 <HAL_RCC_GetPCLK1Freq>
 800502c:	61f8      	str	r0, [r7, #28]
        break;
 800502e:	e014      	b.n	800505a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005030:	f7fe ffb4 	bl	8003f9c <HAL_RCC_GetPCLK2Freq>
 8005034:	61f8      	str	r0, [r7, #28]
        break;
 8005036:	e010      	b.n	800505a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005038:	4b4d      	ldr	r3, [pc, #308]	; (8005170 <UART_SetConfig+0x56c>)
 800503a:	61fb      	str	r3, [r7, #28]
        break;
 800503c:	e00d      	b.n	800505a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800503e:	f7fe feff 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 8005042:	61f8      	str	r0, [r7, #28]
        break;
 8005044:	e009      	b.n	800505a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800504a:	61fb      	str	r3, [r7, #28]
        break;
 800504c:	e005      	b.n	800505a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005058:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d077      	beq.n	8005150 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	005a      	lsls	r2, r3, #1
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	085b      	lsrs	r3, r3, #1
 800506a:	441a      	add	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	fbb2 f3f3 	udiv	r3, r2, r3
 8005074:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b0f      	cmp	r3, #15
 800507a:	d916      	bls.n	80050aa <UART_SetConfig+0x4a6>
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005082:	d212      	bcs.n	80050aa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	b29b      	uxth	r3, r3
 8005088:	f023 030f 	bic.w	r3, r3, #15
 800508c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	085b      	lsrs	r3, r3, #1
 8005092:	b29b      	uxth	r3, r3
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	b29a      	uxth	r2, r3
 800509a:	8afb      	ldrh	r3, [r7, #22]
 800509c:	4313      	orrs	r3, r2
 800509e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	8afa      	ldrh	r2, [r7, #22]
 80050a6:	60da      	str	r2, [r3, #12]
 80050a8:	e052      	b.n	8005150 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050b0:	e04e      	b.n	8005150 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d827      	bhi.n	800510a <UART_SetConfig+0x506>
 80050ba:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <UART_SetConfig+0x4bc>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	080050e5 	.word	0x080050e5
 80050c4:	080050ed 	.word	0x080050ed
 80050c8:	080050f5 	.word	0x080050f5
 80050cc:	0800510b 	.word	0x0800510b
 80050d0:	080050fb 	.word	0x080050fb
 80050d4:	0800510b 	.word	0x0800510b
 80050d8:	0800510b 	.word	0x0800510b
 80050dc:	0800510b 	.word	0x0800510b
 80050e0:	08005103 	.word	0x08005103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e4:	f7fe ff44 	bl	8003f70 <HAL_RCC_GetPCLK1Freq>
 80050e8:	61f8      	str	r0, [r7, #28]
        break;
 80050ea:	e014      	b.n	8005116 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050ec:	f7fe ff56 	bl	8003f9c <HAL_RCC_GetPCLK2Freq>
 80050f0:	61f8      	str	r0, [r7, #28]
        break;
 80050f2:	e010      	b.n	8005116 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f4:	4b1e      	ldr	r3, [pc, #120]	; (8005170 <UART_SetConfig+0x56c>)
 80050f6:	61fb      	str	r3, [r7, #28]
        break;
 80050f8:	e00d      	b.n	8005116 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050fa:	f7fe fea1 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 80050fe:	61f8      	str	r0, [r7, #28]
        break;
 8005100:	e009      	b.n	8005116 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005106:	61fb      	str	r3, [r7, #28]
        break;
 8005108:	e005      	b.n	8005116 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005114:	bf00      	nop
    }

    if (pclk != 0U)
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d019      	beq.n	8005150 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	085a      	lsrs	r2, r3, #1
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	441a      	add	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	fbb2 f3f3 	udiv	r3, r2, r3
 800512e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	2b0f      	cmp	r3, #15
 8005134:	d909      	bls.n	800514a <UART_SetConfig+0x546>
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800513c:	d205      	bcs.n	800514a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60da      	str	r2, [r3, #12]
 8005148:	e002      	b.n	8005150 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800515c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005160:	4618      	mov	r0, r3
 8005162:	3728      	adds	r7, #40	; 0x28
 8005164:	46bd      	mov	sp, r7
 8005166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800516a:	bf00      	nop
 800516c:	40008000 	.word	0x40008000
 8005170:	00f42400 	.word	0x00f42400

08005174 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	f003 0310 	and.w	r3, r3, #16
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01a      	beq.n	800528a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005272:	d10a      	bne.n	800528a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	605a      	str	r2, [r3, #4]
  }
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b098      	sub	sp, #96	; 0x60
 80052bc:	af02      	add	r7, sp, #8
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052c8:	f7fc facc 	bl	8001864 <HAL_GetTick>
 80052cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d12e      	bne.n	800533a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e4:	2200      	movs	r2, #0
 80052e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f88c 	bl	8005408 <UART_WaitOnFlagUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d021      	beq.n	800533a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fe:	e853 3f00 	ldrex	r3, [r3]
 8005302:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800530a:	653b      	str	r3, [r7, #80]	; 0x50
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	461a      	mov	r2, r3
 8005312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005314:	647b      	str	r3, [r7, #68]	; 0x44
 8005316:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005318:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800531a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800531c:	e841 2300 	strex	r3, r2, [r1]
 8005320:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1e6      	bne.n	80052f6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2220      	movs	r2, #32
 800532c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e062      	b.n	8005400 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b04      	cmp	r3, #4
 8005346:	d149      	bne.n	80053dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005348:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005350:	2200      	movs	r2, #0
 8005352:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f856 	bl	8005408 <UART_WaitOnFlagUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d03c      	beq.n	80053dc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	e853 3f00 	ldrex	r3, [r3]
 800536e:	623b      	str	r3, [r7, #32]
   return(result);
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	461a      	mov	r2, r3
 800537e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005380:	633b      	str	r3, [r7, #48]	; 0x30
 8005382:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005384:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005388:	e841 2300 	strex	r3, r2, [r1]
 800538c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e6      	bne.n	8005362 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3308      	adds	r3, #8
 800539a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	e853 3f00 	ldrex	r3, [r3]
 80053a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0301 	bic.w	r3, r3, #1
 80053aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3308      	adds	r3, #8
 80053b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053b4:	61fa      	str	r2, [r7, #28]
 80053b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b8:	69b9      	ldr	r1, [r7, #24]
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	e841 2300 	strex	r3, r2, [r1]
 80053c0:	617b      	str	r3, [r7, #20]
   return(result);
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e5      	bne.n	8005394 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e011      	b.n	8005400 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2220      	movs	r2, #32
 80053e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3758      	adds	r7, #88	; 0x58
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	4613      	mov	r3, r2
 8005416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005418:	e049      	b.n	80054ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005420:	d045      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005422:	f7fc fa1f 	bl	8001864 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	429a      	cmp	r2, r3
 8005430:	d302      	bcc.n	8005438 <UART_WaitOnFlagUntilTimeout+0x30>
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e048      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	2b00      	cmp	r3, #0
 8005448:	d031      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f003 0308 	and.w	r3, r3, #8
 8005454:	2b08      	cmp	r3, #8
 8005456:	d110      	bne.n	800547a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2208      	movs	r2, #8
 800545e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 f838 	bl	80054d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2208      	movs	r2, #8
 800546a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e029      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005488:	d111      	bne.n	80054ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005492:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 f81e 	bl	80054d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2220      	movs	r2, #32
 800549e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e00f      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4013      	ands	r3, r2
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	bf0c      	ite	eq
 80054be:	2301      	moveq	r3, #1
 80054c0:	2300      	movne	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d0a6      	beq.n	800541a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b095      	sub	sp, #84	; 0x54
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054fc:	643b      	str	r3, [r7, #64]	; 0x40
 80054fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005502:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e6      	bne.n	80054de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3308      	adds	r3, #8
 8005516:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	e853 3f00 	ldrex	r3, [r3]
 800551e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f023 0301 	bic.w	r3, r3, #1
 8005526:	64bb      	str	r3, [r7, #72]	; 0x48
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3308      	adds	r3, #8
 800552e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005530:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005534:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005538:	e841 2300 	strex	r3, r2, [r1]
 800553c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1e5      	bne.n	8005510 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005548:	2b01      	cmp	r3, #1
 800554a:	d118      	bne.n	800557e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	e853 3f00 	ldrex	r3, [r3]
 8005558:	60bb      	str	r3, [r7, #8]
   return(result);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f023 0310 	bic.w	r3, r3, #16
 8005560:	647b      	str	r3, [r7, #68]	; 0x44
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800556a:	61bb      	str	r3, [r7, #24]
 800556c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556e:	6979      	ldr	r1, [r7, #20]
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	e841 2300 	strex	r3, r2, [r1]
 8005576:	613b      	str	r3, [r7, #16]
   return(result);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1e6      	bne.n	800554c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2220      	movs	r2, #32
 8005582:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005592:	bf00      	nop
 8005594:	3754      	adds	r7, #84	; 0x54
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800559e:	b084      	sub	sp, #16
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	f107 001c 	add.w	r0, r7, #28
 80055ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fa65 	bl	8005a8c <USB_CoreReset>
 80055c2:	4603      	mov	r3, r0
 80055c4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80055c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d106      	bne.n	80055da <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	639a      	str	r2, [r3, #56]	; 0x38
 80055d8:	e005      	b.n	80055e6 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055f2:	b004      	add	sp, #16
 80055f4:	4770      	bx	lr

080055f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f023 0201 	bic.w	r2, r3, #1
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	460b      	mov	r3, r1
 8005622:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005634:	78fb      	ldrb	r3, [r7, #3]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d115      	bne.n	8005666 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005646:	2001      	movs	r0, #1
 8005648:	f7fc f918 	bl	800187c <HAL_Delay>
      ms++;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	3301      	adds	r3, #1
 8005650:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fa0c 	bl	8005a70 <USB_GetMode>
 8005658:	4603      	mov	r3, r0
 800565a:	2b01      	cmp	r3, #1
 800565c:	d01e      	beq.n	800569c <USB_SetCurrentMode+0x84>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b31      	cmp	r3, #49	; 0x31
 8005662:	d9f0      	bls.n	8005646 <USB_SetCurrentMode+0x2e>
 8005664:	e01a      	b.n	800569c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005666:	78fb      	ldrb	r3, [r7, #3]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d115      	bne.n	8005698 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005678:	2001      	movs	r0, #1
 800567a:	f7fc f8ff 	bl	800187c <HAL_Delay>
      ms++;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	3301      	adds	r3, #1
 8005682:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f9f3 	bl	8005a70 <USB_GetMode>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d005      	beq.n	800569c <USB_SetCurrentMode+0x84>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2b31      	cmp	r3, #49	; 0x31
 8005694:	d9f0      	bls.n	8005678 <USB_SetCurrentMode+0x60>
 8005696:	e001      	b.n	800569c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e005      	b.n	80056a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b32      	cmp	r3, #50	; 0x32
 80056a0:	d101      	bne.n	80056a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056b0:	b084      	sub	sp, #16
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b086      	sub	sp, #24
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056ca:	2300      	movs	r3, #0
 80056cc:	613b      	str	r3, [r7, #16]
 80056ce:	e009      	b.n	80056e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	3340      	adds	r3, #64	; 0x40
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	2200      	movs	r2, #0
 80056dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	3301      	adds	r3, #1
 80056e2:	613b      	str	r3, [r7, #16]
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	2b0e      	cmp	r3, #14
 80056e8:	d9f2      	bls.n	80056d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d11c      	bne.n	800572a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056fe:	f043 0302 	orr.w	r3, r3, #2
 8005702:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	e005      	b.n	8005736 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800573c:	461a      	mov	r2, r3
 800573e:	2300      	movs	r3, #0
 8005740:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005742:	2103      	movs	r1, #3
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f959 	bl	80059fc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800574a:	2110      	movs	r1, #16
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f8f1 	bl	8005934 <USB_FlushTxFifo>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f91d 	bl	800599c <USB_FlushRxFifo>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005772:	461a      	mov	r2, r3
 8005774:	2300      	movs	r3, #0
 8005776:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577e:	461a      	mov	r2, r3
 8005780:	2300      	movs	r3, #0
 8005782:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578a:	461a      	mov	r2, r3
 800578c:	2300      	movs	r3, #0
 800578e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005790:	2300      	movs	r3, #0
 8005792:	613b      	str	r3, [r7, #16]
 8005794:	e043      	b.n	800581e <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057ac:	d118      	bne.n	80057e0 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10a      	bne.n	80057ca <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c0:	461a      	mov	r2, r3
 80057c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	e013      	b.n	80057f2 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d6:	461a      	mov	r2, r3
 80057d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	e008      	b.n	80057f2 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ec:	461a      	mov	r2, r3
 80057ee:	2300      	movs	r3, #0
 80057f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fe:	461a      	mov	r2, r3
 8005800:	2300      	movs	r3, #0
 8005802:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005810:	461a      	mov	r2, r3
 8005812:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005816:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	3301      	adds	r3, #1
 800581c:	613b      	str	r3, [r7, #16]
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	429a      	cmp	r2, r3
 8005824:	d3b7      	bcc.n	8005796 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005826:	2300      	movs	r3, #0
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	e043      	b.n	80058b4 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800583e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005842:	d118      	bne.n	8005876 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10a      	bne.n	8005860 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4413      	add	r3, r2
 8005852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005856:	461a      	mov	r2, r3
 8005858:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	e013      	b.n	8005888 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586c:	461a      	mov	r2, r3
 800586e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	e008      	b.n	8005888 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005882:	461a      	mov	r2, r3
 8005884:	2300      	movs	r3, #0
 8005886:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005894:	461a      	mov	r2, r3
 8005896:	2300      	movs	r3, #0
 8005898:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a6:	461a      	mov	r2, r3
 80058a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	3301      	adds	r3, #1
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d3b7      	bcc.n	800582c <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80058dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	f043 0210 	orr.w	r2, r3, #16
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699a      	ldr	r2, [r3, #24]
 80058ee:	4b10      	ldr	r3, [pc, #64]	; (8005930 <USB_DevInit+0x280>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80058f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	f043 0208 	orr.w	r2, r3, #8
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800590a:	2b01      	cmp	r3, #1
 800590c:	d107      	bne.n	800591e <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005916:	f043 0304 	orr.w	r3, r3, #4
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800591e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800592a:	b004      	add	sp, #16
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	803c3800 	.word	0x803c3800

08005934 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3301      	adds	r3, #1
 8005946:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4a13      	ldr	r2, [pc, #76]	; (8005998 <USB_FlushTxFifo+0x64>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d901      	bls.n	8005954 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e01b      	b.n	800598c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	2b00      	cmp	r3, #0
 800595a:	daf2      	bge.n	8005942 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	019b      	lsls	r3, r3, #6
 8005964:	f043 0220 	orr.w	r2, r3, #32
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	3301      	adds	r3, #1
 8005970:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4a08      	ldr	r2, [pc, #32]	; (8005998 <USB_FlushTxFifo+0x64>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d901      	bls.n	800597e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e006      	b.n	800598c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b20      	cmp	r3, #32
 8005988:	d0f0      	beq.n	800596c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	00030d40 	.word	0x00030d40

0800599c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3301      	adds	r3, #1
 80059ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4a11      	ldr	r2, [pc, #68]	; (80059f8 <USB_FlushRxFifo+0x5c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d901      	bls.n	80059ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e018      	b.n	80059ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	daf2      	bge.n	80059a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2210      	movs	r2, #16
 80059ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3301      	adds	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4a08      	ldr	r2, [pc, #32]	; (80059f8 <USB_FlushRxFifo+0x5c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d901      	bls.n	80059de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e006      	b.n	80059ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	f003 0310 	and.w	r3, r3, #16
 80059e6:	2b10      	cmp	r3, #16
 80059e8:	d0f0      	beq.n	80059cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	00030d40 	.word	0x00030d40

080059fc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	460b      	mov	r3, r1
 8005a06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	78fb      	ldrb	r3, [r7, #3]
 8005a16:	68f9      	ldr	r1, [r7, #12]
 8005a18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b085      	sub	sp, #20
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a48:	f023 0303 	bic.w	r3, r3, #3
 8005a4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a5c:	f043 0302 	orr.w	r3, r3, #2
 8005a60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4a13      	ldr	r2, [pc, #76]	; (8005af0 <USB_CoreReset+0x64>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d901      	bls.n	8005aaa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e01b      	b.n	8005ae2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	daf2      	bge.n	8005a98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f043 0201 	orr.w	r2, r3, #1
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4a09      	ldr	r2, [pc, #36]	; (8005af0 <USB_CoreReset+0x64>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d901      	bls.n	8005ad4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e006      	b.n	8005ae2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d0f0      	beq.n	8005ac2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	00030d40 	.word	0x00030d40

08005af4 <memset>:
 8005af4:	4402      	add	r2, r0
 8005af6:	4603      	mov	r3, r0
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d100      	bne.n	8005afe <memset+0xa>
 8005afc:	4770      	bx	lr
 8005afe:	f803 1b01 	strb.w	r1, [r3], #1
 8005b02:	e7f9      	b.n	8005af8 <memset+0x4>

08005b04 <__libc_init_array>:
 8005b04:	b570      	push	{r4, r5, r6, lr}
 8005b06:	4d0d      	ldr	r5, [pc, #52]	; (8005b3c <__libc_init_array+0x38>)
 8005b08:	4c0d      	ldr	r4, [pc, #52]	; (8005b40 <__libc_init_array+0x3c>)
 8005b0a:	1b64      	subs	r4, r4, r5
 8005b0c:	10a4      	asrs	r4, r4, #2
 8005b0e:	2600      	movs	r6, #0
 8005b10:	42a6      	cmp	r6, r4
 8005b12:	d109      	bne.n	8005b28 <__libc_init_array+0x24>
 8005b14:	4d0b      	ldr	r5, [pc, #44]	; (8005b44 <__libc_init_array+0x40>)
 8005b16:	4c0c      	ldr	r4, [pc, #48]	; (8005b48 <__libc_init_array+0x44>)
 8005b18:	f000 f818 	bl	8005b4c <_init>
 8005b1c:	1b64      	subs	r4, r4, r5
 8005b1e:	10a4      	asrs	r4, r4, #2
 8005b20:	2600      	movs	r6, #0
 8005b22:	42a6      	cmp	r6, r4
 8005b24:	d105      	bne.n	8005b32 <__libc_init_array+0x2e>
 8005b26:	bd70      	pop	{r4, r5, r6, pc}
 8005b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b2c:	4798      	blx	r3
 8005b2e:	3601      	adds	r6, #1
 8005b30:	e7ee      	b.n	8005b10 <__libc_init_array+0xc>
 8005b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b36:	4798      	blx	r3
 8005b38:	3601      	adds	r6, #1
 8005b3a:	e7f2      	b.n	8005b22 <__libc_init_array+0x1e>
 8005b3c:	08005bb4 	.word	0x08005bb4
 8005b40:	08005bb4 	.word	0x08005bb4
 8005b44:	08005bb4 	.word	0x08005bb4
 8005b48:	08005bb8 	.word	0x08005bb8

08005b4c <_init>:
 8005b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4e:	bf00      	nop
 8005b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b52:	bc08      	pop	{r3}
 8005b54:	469e      	mov	lr, r3
 8005b56:	4770      	bx	lr

08005b58 <_fini>:
 8005b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5a:	bf00      	nop
 8005b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5e:	bc08      	pop	{r3}
 8005b60:	469e      	mov	lr, r3
 8005b62:	4770      	bx	lr

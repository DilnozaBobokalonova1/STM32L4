
HelloADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e64  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005fec  08005fec  00015fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006034  08006034  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006034  08006034  00016034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800603c  0800603c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800603c  0800603c  0001603c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006040  08006040  00016040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  2000000c  08006050  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000808  08006050  00020808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b6c7  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003371  00000000  00000000  0003b746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001938  00000000  00000000  0003eab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013a3  00000000  00000000  000403f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002926d  00000000  00000000  00041793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c5f5  00000000  00000000  0006aa00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102ce5  00000000  00000000  00086ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006dc0  00000000  00000000  00189cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00190a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005fd4 	.word	0x08005fd4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005fd4 	.word	0x08005fd4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 ffa8 	bl	800141e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f829 	bl	8000524 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004d2:	f000 f889 	bl	80005e8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 fa95 	bl	8000a04 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004da:	f000 f929 	bl	8000730 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004de:	f000 f95f 	bl	80007a0 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004e2:	f000 f99d 	bl	8000820 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004e6:	f000 f9c1 	bl	800086c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004ea:	f000 f9fd 	bl	80008e8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004ee:	f000 fa2b 	bl	8000948 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004f2:	f000 fa59 	bl	80009a8 <MX_USB_OTG_FS_PCD_Init>

  //ADC1 is initialized, where we could access the ARD_A0 pin
  MX_ADC1_Init();
 80004f6:	f000 f8a5 	bl	8000644 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80004fa:	4809      	ldr	r0, [pc, #36]	; (8000520 <main+0x5c>)
 80004fc:	f001 fb5c 	bl	8001bb8 <HAL_ADC_Start>
	  halResult1 = HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000500:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000504:	4806      	ldr	r0, [pc, #24]	; (8000520 <main+0x5c>)
 8000506:	f001 fc11 	bl	8001d2c <HAL_ADC_PollForConversion>
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
	  adcResult1 = HAL_ADC_GetValue(&hadc1);
 800050e:	4804      	ldr	r0, [pc, #16]	; (8000520 <main+0x5c>)
 8000510:	f001 fce4 	bl	8001edc <HAL_ADC_GetValue>
 8000514:	6038      	str	r0, [r7, #0]
	  HAL_Delay(1000);
 8000516:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800051a:	f000 fff5 	bl	8001508 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 800051e:	e7ec      	b.n	80004fa <main+0x36>
 8000520:	20000028 	.word	0x20000028

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b096      	sub	sp, #88	; 0x58
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	2244      	movs	r2, #68	; 0x44
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f005 fd22 	bl	8005f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	463b      	mov	r3, r7
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000546:	f44f 7000 	mov.w	r0, #512	; 0x200
 800054a:	f003 f8bf 	bl	80036cc <HAL_PWREx_ControlVoltageScaling>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000554:	f000 fbde 	bl	8000d14 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000558:	f003 f89a 	bl	8003690 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800055c:	4b21      	ldr	r3, [pc, #132]	; (80005e4 <SystemClock_Config+0xc0>)
 800055e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000562:	4a20      	ldr	r2, [pc, #128]	; (80005e4 <SystemClock_Config+0xc0>)
 8000564:	f023 0318 	bic.w	r3, r3, #24
 8000568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800056c:	2314      	movs	r3, #20
 800056e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800057c:	2360      	movs	r3, #96	; 0x60
 800057e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000584:	2301      	movs	r3, #1
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000588:	2301      	movs	r3, #1
 800058a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800058c:	2328      	movs	r3, #40	; 0x28
 800058e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000590:	2307      	movs	r3, #7
 8000592:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4618      	mov	r0, r3
 80005a2:	f003 f9b5 	bl	8003910 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005ac:	f000 fbb2 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2303      	movs	r3, #3
 80005b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c4:	463b      	mov	r3, r7
 80005c6:	2104      	movs	r1, #4
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 fd7d 	bl	80040c8 <HAL_RCC_ClockConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005d4:	f000 fb9e 	bl	8000d14 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005d8:	f004 fa84 	bl	8004ae4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005dc:	bf00      	nop
 80005de:	3758      	adds	r7, #88	; 0x58
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021000 	.word	0x40021000

080005e8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b0a2      	sub	sp, #136	; 0x88
 80005ec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ee:	463b      	mov	r3, r7
 80005f0:	2288      	movs	r2, #136	; 0x88
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f005 fcc1 	bl	8005f7c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80005fa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80005fe:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000600:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000604:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000606:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800060a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800060c:	2301      	movs	r3, #1
 800060e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000614:	2318      	movs	r3, #24
 8000616:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000618:	2307      	movs	r3, #7
 800061a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000624:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000628:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800062a:	463b      	mov	r3, r7
 800062c:	4618      	mov	r0, r3
 800062e:	f003 ff6f 	bl	8004510 <HAL_RCCEx_PeriphCLKConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8000638:	f000 fb6c 	bl	8000d14 <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3788      	adds	r7, #136	; 0x88
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
 8000664:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000666:	4b2f      	ldr	r3, [pc, #188]	; (8000724 <MX_ADC1_Init+0xe0>)
 8000668:	4a2f      	ldr	r2, [pc, #188]	; (8000728 <MX_ADC1_Init+0xe4>)
 800066a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800066c:	4b2d      	ldr	r3, [pc, #180]	; (8000724 <MX_ADC1_Init+0xe0>)
 800066e:	2200      	movs	r2, #0
 8000670:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000672:	4b2c      	ldr	r3, [pc, #176]	; (8000724 <MX_ADC1_Init+0xe0>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000678:	4b2a      	ldr	r3, [pc, #168]	; (8000724 <MX_ADC1_Init+0xe0>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800067e:	4b29      	ldr	r3, [pc, #164]	; (8000724 <MX_ADC1_Init+0xe0>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000684:	4b27      	ldr	r3, [pc, #156]	; (8000724 <MX_ADC1_Init+0xe0>)
 8000686:	2204      	movs	r2, #4
 8000688:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800068a:	4b26      	ldr	r3, [pc, #152]	; (8000724 <MX_ADC1_Init+0xe0>)
 800068c:	2200      	movs	r2, #0
 800068e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000690:	4b24      	ldr	r3, [pc, #144]	; (8000724 <MX_ADC1_Init+0xe0>)
 8000692:	2200      	movs	r2, #0
 8000694:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000696:	4b23      	ldr	r3, [pc, #140]	; (8000724 <MX_ADC1_Init+0xe0>)
 8000698:	2201      	movs	r2, #1
 800069a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800069c:	4b21      	ldr	r3, [pc, #132]	; (8000724 <MX_ADC1_Init+0xe0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a4:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <MX_ADC1_Init+0xe0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006aa:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <MX_ADC1_Init+0xe0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b0:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <MX_ADC1_Init+0xe0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006b8:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <MX_ADC1_Init+0xe0>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006be:	4b19      	ldr	r3, [pc, #100]	; (8000724 <MX_ADC1_Init+0xe0>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c6:	4817      	ldr	r0, [pc, #92]	; (8000724 <MX_ADC1_Init+0xe0>)
 80006c8:	f001 f926 	bl	8001918 <HAL_ADC_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006d2:	f000 fb1f 	bl	8000d14 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	4619      	mov	r1, r3
 80006e0:	4810      	ldr	r0, [pc, #64]	; (8000724 <MX_ADC1_Init+0xe0>)
 80006e2:	f002 f8a7 	bl	8002834 <HAL_ADCEx_MultiModeConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006ec:	f000 fb12 	bl	8000d14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_ADC1_Init+0xe8>)
 80006f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006f4:	2306      	movs	r3, #6
 80006f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006fc:	237f      	movs	r3, #127	; 0x7f
 80006fe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000700:	2304      	movs	r3, #4
 8000702:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_ADC1_Init+0xe0>)
 800070e:	f001 fbf3 	bl	8001ef8 <HAL_ADC_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000718:	f000 fafc 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	3728      	adds	r7, #40	; 0x28
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000028 	.word	0x20000028
 8000728:	50040000 	.word	0x50040000
 800072c:	3ac04000 	.word	0x3ac04000

08000730 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_DFSDM1_Init+0x68>)
 8000736:	4a19      	ldr	r2, [pc, #100]	; (800079c <MX_DFSDM1_Init+0x6c>)
 8000738:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_DFSDM1_Init+0x68>)
 800073c:	2201      	movs	r2, #1
 800073e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_DFSDM1_Init+0x68>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_DFSDM1_Init+0x68>)
 8000748:	2202      	movs	r2, #2
 800074a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_DFSDM1_Init+0x68>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_DFSDM1_Init+0x68>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_DFSDM1_Init+0x68>)
 800075a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800075e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000760:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <MX_DFSDM1_Init+0x68>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_DFSDM1_Init+0x68>)
 8000768:	2204      	movs	r2, #4
 800076a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_DFSDM1_Init+0x68>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_DFSDM1_Init+0x68>)
 8000774:	2201      	movs	r2, #1
 8000776:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_DFSDM1_Init+0x68>)
 800077a:	2200      	movs	r2, #0
 800077c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_DFSDM1_Init+0x68>)
 8000780:	2200      	movs	r2, #0
 8000782:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_DFSDM1_Init+0x68>)
 8000786:	f002 fa17 	bl	8002bb8 <HAL_DFSDM_ChannelInit>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000790:	f000 fac0 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	2000008c 	.word	0x2000008c
 800079c:	40016020 	.word	0x40016020

080007a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_I2C2_Init+0x74>)
 80007a6:	4a1c      	ldr	r2, [pc, #112]	; (8000818 <MX_I2C2_Init+0x78>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_I2C2_Init+0x74>)
 80007ac:	4a1b      	ldr	r2, [pc, #108]	; (800081c <MX_I2C2_Init+0x7c>)
 80007ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_I2C2_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_I2C2_Init+0x74>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_I2C2_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_I2C2_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_I2C2_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_I2C2_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_I2C2_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007da:	480e      	ldr	r0, [pc, #56]	; (8000814 <MX_I2C2_Init+0x74>)
 80007dc:	f002 fcdd 	bl	800319a <HAL_I2C_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007e6:	f000 fa95 	bl	8000d14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ea:	2100      	movs	r1, #0
 80007ec:	4809      	ldr	r0, [pc, #36]	; (8000814 <MX_I2C2_Init+0x74>)
 80007ee:	f002 fd6f 	bl	80032d0 <HAL_I2CEx_ConfigAnalogFilter>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007f8:	f000 fa8c 	bl	8000d14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007fc:	2100      	movs	r1, #0
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_I2C2_Init+0x74>)
 8000800:	f002 fdb1 	bl	8003366 <HAL_I2CEx_ConfigDigitalFilter>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800080a:	f000 fa83 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000c4 	.word	0x200000c4
 8000818:	40005800 	.word	0x40005800
 800081c:	10909cec 	.word	0x10909cec

08000820 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_QUADSPI_Init+0x44>)
 8000826:	4a10      	ldr	r2, [pc, #64]	; (8000868 <MX_QUADSPI_Init+0x48>)
 8000828:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_QUADSPI_Init+0x44>)
 800082c:	2202      	movs	r2, #2
 800082e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_QUADSPI_Init+0x44>)
 8000832:	2204      	movs	r2, #4
 8000834:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_QUADSPI_Init+0x44>)
 8000838:	2210      	movs	r2, #16
 800083a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_QUADSPI_Init+0x44>)
 800083e:	2217      	movs	r2, #23
 8000840:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_QUADSPI_Init+0x44>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_QUADSPI_Init+0x44>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_QUADSPI_Init+0x44>)
 8000850:	f002 ffa2 	bl	8003798 <HAL_QSPI_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800085a:	f000 fa5b 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000118 	.word	0x20000118
 8000868:	a0001000 	.word	0xa0001000

0800086c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000870:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_SPI3_Init+0x74>)
 8000872:	4a1c      	ldr	r2, [pc, #112]	; (80008e4 <MX_SPI3_Init+0x78>)
 8000874:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_SPI3_Init+0x74>)
 8000878:	f44f 7282 	mov.w	r2, #260	; 0x104
 800087c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_SPI3_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_SPI3_Init+0x74>)
 8000886:	f44f 7240 	mov.w	r2, #768	; 0x300
 800088a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_SPI3_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_SPI3_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_SPI3_Init+0x74>)
 800089a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800089e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_SPI3_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_SPI3_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_SPI3_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_SPI3_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_SPI3_Init+0x74>)
 80008ba:	2207      	movs	r2, #7
 80008bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_SPI3_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_SPI3_Init+0x74>)
 80008c6:	2208      	movs	r2, #8
 80008c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_SPI3_Init+0x74>)
 80008cc:	f004 faec 	bl	8004ea8 <HAL_SPI_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008d6:	f000 fa1d 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000015c 	.word	0x2000015c
 80008e4:	40003c00 	.word	0x40003c00

080008e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_USART1_UART_Init+0x58>)
 80008ee:	4a15      	ldr	r2, [pc, #84]	; (8000944 <MX_USART1_UART_Init+0x5c>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_USART1_UART_Init+0x58>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_USART1_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_USART1_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_USART1_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_USART1_UART_Init+0x58>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_USART1_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_USART1_UART_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_USART1_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_USART1_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_USART1_UART_Init+0x58>)
 800092c:	f004 fb5f 	bl	8004fee <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000936:	f000 f9ed 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200001c0 	.word	0x200001c0
 8000944:	40013800 	.word	0x40013800

08000948 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_USART3_UART_Init+0x58>)
 800094e:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <MX_USART3_UART_Init+0x5c>)
 8000950:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_USART3_UART_Init+0x58>)
 8000954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000958:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_USART3_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_USART3_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_USART3_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_USART3_UART_Init+0x58>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_USART3_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_USART3_UART_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_USART3_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_USART3_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_USART3_UART_Init+0x58>)
 800098c:	f004 fb2f 	bl	8004fee <HAL_UART_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000996:	f000 f9bd 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000248 	.word	0x20000248
 80009a4:	40004800 	.word	0x40004800

080009a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b6:	2206      	movs	r2, #6
 80009b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009bc:	2202      	movs	r2, #2
 80009be:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c2:	2202      	movs	r2, #2
 80009c4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ec:	f002 fd07 	bl	80033fe <HAL_PCD_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009f6:	f000 f98d 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200002d0 	.word	0x200002d0

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a1a:	4bb9      	ldr	r3, [pc, #740]	; (8000d00 <MX_GPIO_Init+0x2fc>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	4ab8      	ldr	r2, [pc, #736]	; (8000d00 <MX_GPIO_Init+0x2fc>)
 8000a20:	f043 0310 	orr.w	r3, r3, #16
 8000a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a26:	4bb6      	ldr	r3, [pc, #728]	; (8000d00 <MX_GPIO_Init+0x2fc>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	f003 0310 	and.w	r3, r3, #16
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	4bb3      	ldr	r3, [pc, #716]	; (8000d00 <MX_GPIO_Init+0x2fc>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4ab2      	ldr	r2, [pc, #712]	; (8000d00 <MX_GPIO_Init+0x2fc>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3e:	4bb0      	ldr	r3, [pc, #704]	; (8000d00 <MX_GPIO_Init+0x2fc>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4bad      	ldr	r3, [pc, #692]	; (8000d00 <MX_GPIO_Init+0x2fc>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4aac      	ldr	r2, [pc, #688]	; (8000d00 <MX_GPIO_Init+0x2fc>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4baa      	ldr	r3, [pc, #680]	; (8000d00 <MX_GPIO_Init+0x2fc>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	4ba7      	ldr	r3, [pc, #668]	; (8000d00 <MX_GPIO_Init+0x2fc>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4aa6      	ldr	r2, [pc, #664]	; (8000d00 <MX_GPIO_Init+0x2fc>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4ba4      	ldr	r3, [pc, #656]	; (8000d00 <MX_GPIO_Init+0x2fc>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7a:	4ba1      	ldr	r3, [pc, #644]	; (8000d00 <MX_GPIO_Init+0x2fc>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4aa0      	ldr	r2, [pc, #640]	; (8000d00 <MX_GPIO_Init+0x2fc>)
 8000a80:	f043 0308 	orr.w	r3, r3, #8
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b9e      	ldr	r3, [pc, #632]	; (8000d00 <MX_GPIO_Init+0x2fc>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0308 	and.w	r3, r3, #8
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000a98:	489a      	ldr	r0, [pc, #616]	; (8000d04 <MX_GPIO_Init+0x300>)
 8000a9a:	f002 fb43 	bl	8003124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f248 1104 	movw	r1, #33028	; 0x8104
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa8:	f002 fb3c 	bl	8003124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000aac:	2200      	movs	r2, #0
 8000aae:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000ab2:	4895      	ldr	r0, [pc, #596]	; (8000d08 <MX_GPIO_Init+0x304>)
 8000ab4:	f002 fb36 	bl	8003124 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f241 0181 	movw	r1, #4225	; 0x1081
 8000abe:	4893      	ldr	r0, [pc, #588]	; (8000d0c <MX_GPIO_Init+0x308>)
 8000ac0:	f002 fb30 	bl	8003124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aca:	4890      	ldr	r0, [pc, #576]	; (8000d0c <MX_GPIO_Init+0x308>)
 8000acc:	f002 fb2a 	bl	8003124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000ad6:	488e      	ldr	r0, [pc, #568]	; (8000d10 <MX_GPIO_Init+0x30c>)
 8000ad8:	f002 fb24 	bl	8003124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	2120      	movs	r1, #32
 8000ae0:	4889      	ldr	r0, [pc, #548]	; (8000d08 <MX_GPIO_Init+0x304>)
 8000ae2:	f002 fb1f 	bl	8003124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	2101      	movs	r1, #1
 8000aea:	4886      	ldr	r0, [pc, #536]	; (8000d04 <MX_GPIO_Init+0x300>)
 8000aec:	f002 fb1a 	bl	8003124 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000af0:	f240 1315 	movw	r3, #277	; 0x115
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	487e      	ldr	r0, [pc, #504]	; (8000d04 <MX_GPIO_Init+0x300>)
 8000b0a:	f002 f961 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000b0e:	236a      	movs	r3, #106	; 0x6a
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	4878      	ldr	r0, [pc, #480]	; (8000d04 <MX_GPIO_Init+0x300>)
 8000b24:	f002 f954 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b2e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4874      	ldr	r0, [pc, #464]	; (8000d10 <MX_GPIO_Init+0x30c>)
 8000b40:	f002 f946 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000b44:	2303      	movs	r3, #3
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b54:	2308      	movs	r3, #8
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b62:	f002 f935 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b66:	f248 1304 	movw	r3, #33028	; 0x8104
 8000b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b82:	f002 f925 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b86:	2308      	movs	r3, #8
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b96:	2301      	movs	r3, #1
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba4:	f002 f914 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000ba8:	23e0      	movs	r3, #224	; 0xe0
 8000baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bb8:	2305      	movs	r3, #5
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc6:	f002 f903 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4619      	mov	r1, r3
 8000bde:	484a      	ldr	r0, [pc, #296]	; (8000d08 <MX_GPIO_Init+0x304>)
 8000be0:	f002 f8f6 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000be4:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000be8:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4842      	ldr	r0, [pc, #264]	; (8000d08 <MX_GPIO_Init+0x304>)
 8000bfe:	f002 f8e7 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000c02:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000c06:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	483c      	ldr	r0, [pc, #240]	; (8000d0c <MX_GPIO_Init+0x308>)
 8000c1a:	f002 f8d9 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000c1e:	f243 0381 	movw	r3, #12417	; 0x3081
 8000c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	4835      	ldr	r0, [pc, #212]	; (8000d0c <MX_GPIO_Init+0x308>)
 8000c38:	f002 f8ca 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c3c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	482e      	ldr	r0, [pc, #184]	; (8000d10 <MX_GPIO_Init+0x30c>)
 8000c56:	f002 f8bb 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c5a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4827      	ldr	r0, [pc, #156]	; (8000d10 <MX_GPIO_Init+0x30c>)
 8000c72:	f002 f8ad 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c76:	2302      	movs	r3, #2
 8000c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c86:	2305      	movs	r3, #5
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	481e      	ldr	r0, [pc, #120]	; (8000d0c <MX_GPIO_Init+0x308>)
 8000c92:	f002 f89d 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c96:	2378      	movs	r3, #120	; 0x78
 8000c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4816      	ldr	r0, [pc, #88]	; (8000d0c <MX_GPIO_Init+0x308>)
 8000cb2:	f002 f88d 	bl	8002dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000cb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cbc:	2312      	movs	r3, #18
 8000cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cc8:	2304      	movs	r3, #4
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480d      	ldr	r0, [pc, #52]	; (8000d08 <MX_GPIO_Init+0x304>)
 8000cd4:	f002 f87c 	bl	8002dd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2017      	movs	r0, #23
 8000cde:	f001 ff34 	bl	8002b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ce2:	2017      	movs	r0, #23
 8000ce4:	f001 ff4d 	bl	8002b82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	2028      	movs	r0, #40	; 0x28
 8000cee:	f001 ff2c 	bl	8002b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cf2:	2028      	movs	r0, #40	; 0x28
 8000cf4:	f001 ff45 	bl	8002b82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cf8:	bf00      	nop
 8000cfa:	3728      	adds	r7, #40	; 0x28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40021000 	.word	0x40021000
 8000d04:	48001000 	.word	0x48001000
 8000d08:	48000400 	.word	0x48000400
 8000d0c:	48000c00 	.word	0x48000c00
 8000d10:	48000800 	.word	0x48000800

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <Error_Handler+0x8>
	...

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <HAL_MspInit+0x44>)
 8000d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2a:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <HAL_MspInit+0x44>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6613      	str	r3, [r2, #96]	; 0x60
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <HAL_MspInit+0x44>)
 8000d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HAL_MspInit+0x44>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <HAL_MspInit+0x44>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d48:	6593      	str	r3, [r2, #88]	; 0x58
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_MspInit+0x44>)
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000

08000d68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	; 0x30
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a2d      	ldr	r2, [pc, #180]	; (8000e3c <HAL_ADC_MspInit+0xd4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d154      	bne.n	8000e34 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d8a:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <HAL_ADC_MspInit+0xd8>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	4a2c      	ldr	r2, [pc, #176]	; (8000e40 <HAL_ADC_MspInit+0xd8>)
 8000d90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d96:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <HAL_ADC_MspInit+0xd8>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d9e:	61bb      	str	r3, [r7, #24]
 8000da0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <HAL_ADC_MspInit+0xd8>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	4a26      	ldr	r2, [pc, #152]	; (8000e40 <HAL_ADC_MspInit+0xd8>)
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dae:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <HAL_ADC_MspInit+0xd8>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <HAL_ADC_MspInit+0xd8>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	4a20      	ldr	r2, [pc, #128]	; (8000e40 <HAL_ADC_MspInit+0xd8>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc6:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <HAL_ADC_MspInit+0xd8>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <HAL_ADC_MspInit+0xd8>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	4a1a      	ldr	r2, [pc, #104]	; (8000e40 <HAL_ADC_MspInit+0xd8>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <HAL_ADC_MspInit+0xd8>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|GPIO_PIN_3
 8000dea:	233f      	movs	r3, #63	; 0x3f
 8000dec:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dee:	230b      	movs	r3, #11
 8000df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4811      	ldr	r0, [pc, #68]	; (8000e44 <HAL_ADC_MspInit+0xdc>)
 8000dfe:	f001 ffe7 	bl	8002dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000e02:	2310      	movs	r3, #16
 8000e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e06:	230b      	movs	r3, #11
 8000e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e18:	f001 ffda 	bl	8002dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e20:	230b      	movs	r3, #11
 8000e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4806      	ldr	r0, [pc, #24]	; (8000e48 <HAL_ADC_MspInit+0xe0>)
 8000e30:	f001 ffce 	bl	8002dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e34:	bf00      	nop
 8000e36:	3730      	adds	r7, #48	; 0x30
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	50040000 	.word	0x50040000
 8000e40:	40021000 	.word	0x40021000
 8000e44:	48000800 	.word	0x48000800
 8000e48:	48000400 	.word	0x48000400

08000e4c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b0ac      	sub	sp, #176	; 0xb0
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2288      	movs	r2, #136	; 0x88
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f005 f885 	bl	8005f7c <memset>
  if(DFSDM1_Init == 0)
 8000e72:	4b25      	ldr	r3, [pc, #148]	; (8000f08 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d142      	bne.n	8000f00 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000e7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e7e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 fb40 	bl	8004510 <HAL_RCCEx_PeriphCLKConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000e96:	f7ff ff3d 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9e:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ea0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ea4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ea6:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	4a15      	ldr	r2, [pc, #84]	; (8000f0c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000eb8:	f043 0310 	orr.w	r3, r3, #16
 8000ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	f003 0310 	and.w	r3, r3, #16
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000eca:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000ece:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000ee4:	2306      	movs	r3, #6
 8000ee6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4807      	ldr	r0, [pc, #28]	; (8000f10 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000ef2:	f001 ff6d 	bl	8002dd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000ef6:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	3301      	adds	r3, #1
 8000efc:	4a02      	ldr	r2, [pc, #8]	; (8000f08 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000efe:	6013      	str	r3, [r2, #0]
  }

}
 8000f00:	bf00      	nop
 8000f02:	37b0      	adds	r7, #176	; 0xb0
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	200007dc 	.word	0x200007dc
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	48001000 	.word	0x48001000

08000f14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0ac      	sub	sp, #176	; 0xb0
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2288      	movs	r2, #136	; 0x88
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f005 f821 	bl	8005f7c <memset>
  if(hi2c->Instance==I2C2)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a21      	ldr	r2, [pc, #132]	; (8000fc4 <HAL_I2C_MspInit+0xb0>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d13b      	bne.n	8000fbc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4618      	mov	r0, r3
 8000f52:	f003 fadd 	bl	8004510 <HAL_RCCEx_PeriphCLKConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f5c:	f7ff feda 	bl	8000d14 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <HAL_I2C_MspInit+0xb4>)
 8000f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f64:	4a18      	ldr	r2, [pc, #96]	; (8000fc8 <HAL_I2C_MspInit+0xb4>)
 8000f66:	f043 0302 	orr.w	r3, r3, #2
 8000f6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <HAL_I2C_MspInit+0xb4>)
 8000f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000f78:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f80:	2312      	movs	r3, #18
 8000f82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f92:	2304      	movs	r3, #4
 8000f94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480b      	ldr	r0, [pc, #44]	; (8000fcc <HAL_I2C_MspInit+0xb8>)
 8000fa0:	f001 ff16 	bl	8002dd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_I2C_MspInit+0xb4>)
 8000fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_I2C_MspInit+0xb4>)
 8000faa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fae:	6593      	str	r3, [r2, #88]	; 0x58
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <HAL_I2C_MspInit+0xb4>)
 8000fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	37b0      	adds	r7, #176	; 0xb0
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40005800 	.word	0x40005800
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	48000400 	.word	0x48000400

08000fd0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a17      	ldr	r2, [pc, #92]	; (800104c <HAL_QSPI_MspInit+0x7c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d128      	bne.n	8001044 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_QSPI_MspInit+0x80>)
 8000ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ff6:	4a16      	ldr	r2, [pc, #88]	; (8001050 <HAL_QSPI_MspInit+0x80>)
 8000ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffc:	6513      	str	r3, [r2, #80]	; 0x50
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_QSPI_MspInit+0x80>)
 8001000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_QSPI_MspInit+0x80>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <HAL_QSPI_MspInit+0x80>)
 8001010:	f043 0310 	orr.w	r3, r3, #16
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_QSPI_MspInit+0x80>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001022:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001026:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001034:	230a      	movs	r3, #10
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <HAL_QSPI_MspInit+0x84>)
 8001040:	f001 fec6 	bl	8002dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	; 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	a0001000 	.word	0xa0001000
 8001050:	40021000 	.word	0x40021000
 8001054:	48001000 	.word	0x48001000

08001058 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <HAL_SPI_MspInit+0x7c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d128      	bne.n	80010cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_SPI_MspInit+0x80>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107e:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <HAL_SPI_MspInit+0x80>)
 8001080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001084:	6593      	str	r3, [r2, #88]	; 0x58
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_SPI_MspInit+0x80>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_SPI_MspInit+0x80>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <HAL_SPI_MspInit+0x80>)
 8001098:	f043 0304 	orr.w	r3, r3, #4
 800109c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_SPI_MspInit+0x80>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80010aa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010bc:	2306      	movs	r3, #6
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <HAL_SPI_MspInit+0x84>)
 80010c8:	f001 fe82 	bl	8002dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010cc:	bf00      	nop
 80010ce:	3728      	adds	r7, #40	; 0x28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40003c00 	.word	0x40003c00
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48000800 	.word	0x48000800

080010e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b0ae      	sub	sp, #184	; 0xb8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	2288      	movs	r2, #136	; 0x88
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f004 ff3b 	bl	8005f7c <memset>
  if(huart->Instance==USART1)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a42      	ldr	r2, [pc, #264]	; (8001214 <HAL_UART_MspInit+0x134>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d13b      	bne.n	8001188 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001110:	2301      	movs	r3, #1
 8001112:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001114:	2300      	movs	r3, #0
 8001116:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4618      	mov	r0, r3
 800111e:	f003 f9f7 	bl	8004510 <HAL_RCCEx_PeriphCLKConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001128:	f7ff fdf4 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800112c:	4b3a      	ldr	r3, [pc, #232]	; (8001218 <HAL_UART_MspInit+0x138>)
 800112e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001130:	4a39      	ldr	r2, [pc, #228]	; (8001218 <HAL_UART_MspInit+0x138>)
 8001132:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001136:	6613      	str	r3, [r2, #96]	; 0x60
 8001138:	4b37      	ldr	r3, [pc, #220]	; (8001218 <HAL_UART_MspInit+0x138>)
 800113a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800113c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001140:	61bb      	str	r3, [r7, #24]
 8001142:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001144:	4b34      	ldr	r3, [pc, #208]	; (8001218 <HAL_UART_MspInit+0x138>)
 8001146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001148:	4a33      	ldr	r2, [pc, #204]	; (8001218 <HAL_UART_MspInit+0x138>)
 800114a:	f043 0302 	orr.w	r3, r3, #2
 800114e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001150:	4b31      	ldr	r3, [pc, #196]	; (8001218 <HAL_UART_MspInit+0x138>)
 8001152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800115c:	23c0      	movs	r3, #192	; 0xc0
 800115e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116e:	2303      	movs	r3, #3
 8001170:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001174:	2307      	movs	r3, #7
 8001176:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800117e:	4619      	mov	r1, r3
 8001180:	4826      	ldr	r0, [pc, #152]	; (800121c <HAL_UART_MspInit+0x13c>)
 8001182:	f001 fe25 	bl	8002dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001186:	e040      	b.n	800120a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a24      	ldr	r2, [pc, #144]	; (8001220 <HAL_UART_MspInit+0x140>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d13b      	bne.n	800120a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001192:	2304      	movs	r3, #4
 8001194:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001196:	2300      	movs	r3, #0
 8001198:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 f9b6 	bl	8004510 <HAL_RCCEx_PeriphCLKConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_UART_MspInit+0xce>
      Error_Handler();
 80011aa:	f7ff fdb3 	bl	8000d14 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <HAL_UART_MspInit+0x138>)
 80011b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b2:	4a19      	ldr	r2, [pc, #100]	; (8001218 <HAL_UART_MspInit+0x138>)
 80011b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b8:	6593      	str	r3, [r2, #88]	; 0x58
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <HAL_UART_MspInit+0x138>)
 80011bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <HAL_UART_MspInit+0x138>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	4a13      	ldr	r2, [pc, #76]	; (8001218 <HAL_UART_MspInit+0x138>)
 80011cc:	f043 0308 	orr.w	r3, r3, #8
 80011d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <HAL_UART_MspInit+0x138>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80011de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011f8:	2307      	movs	r3, #7
 80011fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001202:	4619      	mov	r1, r3
 8001204:	4807      	ldr	r0, [pc, #28]	; (8001224 <HAL_UART_MspInit+0x144>)
 8001206:	f001 fde3 	bl	8002dd0 <HAL_GPIO_Init>
}
 800120a:	bf00      	nop
 800120c:	37b8      	adds	r7, #184	; 0xb8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40013800 	.word	0x40013800
 8001218:	40021000 	.word	0x40021000
 800121c:	48000400 	.word	0x48000400
 8001220:	40004800 	.word	0x40004800
 8001224:	48000c00 	.word	0x48000c00

08001228 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001248:	d154      	bne.n	80012f4 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	4a2b      	ldr	r2, [pc, #172]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001256:	4b29      	ldr	r3, [pc, #164]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001262:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127a:	f001 fda9 	bl	8002dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800127e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001290:	230a      	movs	r3, #10
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129e:	f001 fd97 	bl	8002dd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	4a15      	ldr	r2, [pc, #84]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 80012a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d114      	bne.n	80012f0 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 80012c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ca:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d0:	6593      	str	r3, [r2, #88]	; 0x58
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80012de:	f002 fa4b 	bl	8003778 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <HAL_PCD_MspInit+0xd4>)
 80012e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ec:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012ee:	e001      	b.n	80012f4 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80012f0:	f002 fa42 	bl	8003778 <HAL_PWREx_EnableVddUSB>
}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40021000 	.word	0x40021000

08001300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <NMI_Handler+0x4>

08001306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800130a:	e7fe      	b.n	800130a <HardFault_Handler+0x4>

0800130c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <MemManage_Handler+0x4>

08001312 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <BusFault_Handler+0x4>

08001318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <UsageFault_Handler+0x4>

0800131e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134c:	f000 f8bc 	bl	80014c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}

08001354 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001358:	2020      	movs	r0, #32
 800135a:	f001 fefb 	bl	8003154 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800135e:	2040      	movs	r0, #64	; 0x40
 8001360:	f001 fef8 	bl	8003154 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001364:	2080      	movs	r0, #128	; 0x80
 8001366:	f001 fef5 	bl	8003154 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800136a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800136e:	f001 fef1 	bl	8003154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}

08001376 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800137a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800137e:	f001 fee9 	bl	8003154 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001382:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001386:	f001 fee5 	bl	8003154 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800138a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800138e:	f001 fee1 	bl	8003154 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001392:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001396:	f001 fedd 	bl	8003154 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800139a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800139e:	f001 fed9 	bl	8003154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <SystemInit+0x20>)
 80013ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <SystemInit+0x20>)
 80013b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001404 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013d0:	f7ff ffea 	bl	80013a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <LoopForever+0x6>)
  ldr r1, =_edata
 80013d6:	490d      	ldr	r1, [pc, #52]	; (800140c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <LoopForever+0xe>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013ec:	4c0a      	ldr	r4, [pc, #40]	; (8001418 <LoopForever+0x16>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fa:	f004 fdc7 	bl	8005f8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013fe:	f7ff f861 	bl	80004c4 <main>

08001402 <LoopForever>:

LoopForever:
    b LoopForever
 8001402:	e7fe      	b.n	8001402 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001404:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001410:	08006044 	.word	0x08006044
  ldr r2, =_sbss
 8001414:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001418:	20000808 	.word	0x20000808

0800141c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC1_2_IRQHandler>

0800141e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001428:	2003      	movs	r0, #3
 800142a:	f001 fb83 	bl	8002b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800142e:	2000      	movs	r0, #0
 8001430:	f000 f80e 	bl	8001450 <HAL_InitTick>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d002      	beq.n	8001440 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	71fb      	strb	r3, [r7, #7]
 800143e:	e001      	b.n	8001444 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001440:	f7ff fc6e 	bl	8000d20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001444:	79fb      	ldrb	r3, [r7, #7]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <HAL_InitTick+0x6c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d023      	beq.n	80014ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <HAL_InitTick+0x70>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <HAL_InitTick+0x6c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001472:	fbb3 f3f1 	udiv	r3, r3, r1
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f001 fb8f 	bl	8002b9e <HAL_SYSTICK_Config>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10f      	bne.n	80014a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b0f      	cmp	r3, #15
 800148a:	d809      	bhi.n	80014a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800148c:	2200      	movs	r2, #0
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001494:	f001 fb59 	bl	8002b4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001498:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <HAL_InitTick+0x74>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	e007      	b.n	80014b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	e004      	b.n	80014b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	73fb      	strb	r3, [r7, #15]
 80014aa:	e001      	b.n	80014b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000004 	.word	0x20000004

080014c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_IncTick+0x20>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_IncTick+0x24>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	4a04      	ldr	r2, [pc, #16]	; (80014ec <HAL_IncTick+0x24>)
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000008 	.word	0x20000008
 80014ec:	200007e0 	.word	0x200007e0

080014f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return uwTick;
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <HAL_GetTick+0x14>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	200007e0 	.word	0x200007e0

08001508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001510:	f7ff ffee 	bl	80014f0 <HAL_GetTick>
 8001514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001520:	d005      	beq.n	800152e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_Delay+0x44>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4413      	add	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800152e:	bf00      	nop
 8001530:	f7ff ffde 	bl	80014f0 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	429a      	cmp	r2, r3
 800153e:	d8f7      	bhi.n	8001530 <HAL_Delay+0x28>
  {
  }
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000008 	.word	0x20000008

08001550 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	609a      	str	r2, [r3, #8]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	609a      	str	r2, [r3, #8]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	3360      	adds	r3, #96	; 0x60
 80015ca:	461a      	mov	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <LL_ADC_SetOffset+0x44>)
 80015da:	4013      	ands	r3, r2
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	4313      	orrs	r3, r2
 80015e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015f0:	bf00      	nop
 80015f2:	371c      	adds	r7, #28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	03fff000 	.word	0x03fff000

08001600 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3360      	adds	r3, #96	; 0x60
 800160e:	461a      	mov	r2, r3
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3360      	adds	r3, #96	; 0x60
 800163c:	461a      	mov	r2, r3
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	431a      	orrs	r2, r3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001656:	bf00      	nop
 8001658:	371c      	adds	r7, #28
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001688:	b480      	push	{r7}
 800168a:	b087      	sub	sp, #28
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3330      	adds	r3, #48	; 0x30
 8001698:	461a      	mov	r2, r3
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	f003 030c 	and.w	r3, r3, #12
 80016a4:	4413      	add	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	211f      	movs	r1, #31
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	401a      	ands	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	0e9b      	lsrs	r3, r3, #26
 80016c0:	f003 011f 	and.w	r1, r3, #31
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f003 031f 	and.w	r3, r3, #31
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	431a      	orrs	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016d4:	bf00      	nop
 80016d6:	371c      	adds	r7, #28
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	3314      	adds	r3, #20
 80016f0:	461a      	mov	r2, r3
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	0e5b      	lsrs	r3, r3, #25
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	4413      	add	r3, r2
 80016fe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	0d1b      	lsrs	r3, r3, #20
 8001708:	f003 031f 	and.w	r3, r3, #31
 800170c:	2107      	movs	r1, #7
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	401a      	ands	r2, r3
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	0d1b      	lsrs	r3, r3, #20
 800171a:	f003 031f 	and.w	r3, r3, #31
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	fa01 f303 	lsl.w	r3, r1, r3
 8001724:	431a      	orrs	r2, r3
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800172a:	bf00      	nop
 800172c:	371c      	adds	r7, #28
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001750:	43db      	mvns	r3, r3
 8001752:	401a      	ands	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f003 0318 	and.w	r3, r3, #24
 800175a:	4908      	ldr	r1, [pc, #32]	; (800177c <LL_ADC_SetChannelSingleDiff+0x44>)
 800175c:	40d9      	lsrs	r1, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	400b      	ands	r3, r1
 8001762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001766:	431a      	orrs	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800176e:	bf00      	nop
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	0007ffff 	.word	0x0007ffff

08001780 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 031f 	and.w	r3, r3, #31
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80017c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6093      	str	r3, [r2, #8]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017f0:	d101      	bne.n	80017f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001814:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001818:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001840:	d101      	bne.n	8001846 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001864:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001868:	f043 0201 	orr.w	r2, r3, #1
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <LL_ADC_IsEnabled+0x18>
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <LL_ADC_IsEnabled+0x1a>
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018b6:	f043 0204 	orr.w	r2, r3, #4
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d101      	bne.n	80018e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b08      	cmp	r3, #8
 8001902:	d101      	bne.n	8001908 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e130      	b.n	8001b94 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193c:	2b00      	cmp	r3, #0
 800193e:	d109      	bne.n	8001954 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff fa11 	bl	8000d68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff3f 	bl	80017dc <LL_ADC_IsDeepPowerDownEnabled>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d004      	beq.n	800196e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff25 	bl	80017b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ff5a 	bl	800182c <LL_ADC_IsInternalRegulatorEnabled>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d115      	bne.n	80019aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ff3e 	bl	8001804 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001988:	4b84      	ldr	r3, [pc, #528]	; (8001b9c <HAL_ADC_Init+0x284>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	099b      	lsrs	r3, r3, #6
 800198e:	4a84      	ldr	r2, [pc, #528]	; (8001ba0 <HAL_ADC_Init+0x288>)
 8001990:	fba2 2303 	umull	r2, r3, r2, r3
 8001994:	099b      	lsrs	r3, r3, #6
 8001996:	3301      	adds	r3, #1
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800199c:	e002      	b.n	80019a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f9      	bne.n	800199e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff ff3c 	bl	800182c <LL_ADC_IsInternalRegulatorEnabled>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10d      	bne.n	80019d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019be:	f043 0210 	orr.w	r2, r3, #16
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ca:	f043 0201 	orr.w	r2, r3, #1
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ff75 	bl	80018ca <LL_ADC_REG_IsConversionOngoing>
 80019e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e6:	f003 0310 	and.w	r3, r3, #16
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f040 80c9 	bne.w	8001b82 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f040 80c5 	bne.w	8001b82 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a00:	f043 0202 	orr.w	r2, r3, #2
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff35 	bl	800187c <LL_ADC_IsEnabled>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d115      	bne.n	8001a44 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a18:	4862      	ldr	r0, [pc, #392]	; (8001ba4 <HAL_ADC_Init+0x28c>)
 8001a1a:	f7ff ff2f 	bl	800187c <LL_ADC_IsEnabled>
 8001a1e:	4604      	mov	r4, r0
 8001a20:	4861      	ldr	r0, [pc, #388]	; (8001ba8 <HAL_ADC_Init+0x290>)
 8001a22:	f7ff ff2b 	bl	800187c <LL_ADC_IsEnabled>
 8001a26:	4603      	mov	r3, r0
 8001a28:	431c      	orrs	r4, r3
 8001a2a:	4860      	ldr	r0, [pc, #384]	; (8001bac <HAL_ADC_Init+0x294>)
 8001a2c:	f7ff ff26 	bl	800187c <LL_ADC_IsEnabled>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4323      	orrs	r3, r4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d105      	bne.n	8001a44 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	485c      	ldr	r0, [pc, #368]	; (8001bb0 <HAL_ADC_Init+0x298>)
 8001a40:	f7ff fd86 	bl	8001550 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7e5b      	ldrb	r3, [r3, #25]
 8001a48:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a4e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001a54:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001a5a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a62:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d106      	bne.n	8001a80 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	3b01      	subs	r3, #1
 8001a78:	045b      	lsls	r3, r3, #17
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d009      	beq.n	8001a9c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	4b44      	ldr	r3, [pc, #272]	; (8001bb4 <HAL_ADC_Init+0x29c>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	69b9      	ldr	r1, [r7, #24]
 8001aac:	430b      	orrs	r3, r1
 8001aae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff1b 	bl	80018f0 <LL_ADC_INJ_IsConversionOngoing>
 8001aba:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d13d      	bne.n	8001b3e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d13a      	bne.n	8001b3e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001acc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ad4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ae4:	f023 0302 	bic.w	r3, r3, #2
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	69b9      	ldr	r1, [r7, #24]
 8001aee:	430b      	orrs	r3, r1
 8001af0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d118      	bne.n	8001b2e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001b06:	f023 0304 	bic.w	r3, r3, #4
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b12:	4311      	orrs	r1, r2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b18:	4311      	orrs	r1, r2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0201 	orr.w	r2, r2, #1
 8001b2a:	611a      	str	r2, [r3, #16]
 8001b2c:	e007      	b.n	8001b3e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0201 	bic.w	r2, r2, #1
 8001b3c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d10c      	bne.n	8001b60 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	f023 010f 	bic.w	r1, r3, #15
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	1e5a      	subs	r2, r3, #1
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b5e:	e007      	b.n	8001b70 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 020f 	bic.w	r2, r2, #15
 8001b6e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b74:	f023 0303 	bic.w	r3, r3, #3
 8001b78:	f043 0201 	orr.w	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	655a      	str	r2, [r3, #84]	; 0x54
 8001b80:	e007      	b.n	8001b92 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b86:	f043 0210 	orr.w	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b92:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3724      	adds	r7, #36	; 0x24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd90      	pop	{r4, r7, pc}
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	053e2d63 	.word	0x053e2d63
 8001ba4:	50040000 	.word	0x50040000
 8001ba8:	50040100 	.word	0x50040100
 8001bac:	50040200 	.word	0x50040200
 8001bb0:	50040300 	.word	0x50040300
 8001bb4:	fff0c007 	.word	0xfff0c007

08001bb8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bc0:	4857      	ldr	r0, [pc, #348]	; (8001d20 <HAL_ADC_Start+0x168>)
 8001bc2:	f7ff fddd 	bl	8001780 <LL_ADC_GetMultimode>
 8001bc6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fe7c 	bl	80018ca <LL_ADC_REG_IsConversionOngoing>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f040 809c 	bne.w	8001d12 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_ADC_Start+0x30>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e097      	b.n	8001d18 <HAL_ADC_Start+0x160>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 fd73 	bl	80026dc <ADC_Enable>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f040 8083 	bne.w	8001d08 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c06:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c0a:	f023 0301 	bic.w	r3, r3, #1
 8001c0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a42      	ldr	r2, [pc, #264]	; (8001d24 <HAL_ADC_Start+0x16c>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d002      	beq.n	8001c26 <HAL_ADC_Start+0x6e>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	e000      	b.n	8001c28 <HAL_ADC_Start+0x70>
 8001c26:	4b40      	ldr	r3, [pc, #256]	; (8001d28 <HAL_ADC_Start+0x170>)
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d002      	beq.n	8001c36 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d105      	bne.n	8001c42 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c4e:	d106      	bne.n	8001c5e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c54:	f023 0206 	bic.w	r2, r3, #6
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	659a      	str	r2, [r3, #88]	; 0x58
 8001c5c:	e002      	b.n	8001c64 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	221c      	movs	r2, #28
 8001c6a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a2a      	ldr	r2, [pc, #168]	; (8001d24 <HAL_ADC_Start+0x16c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d002      	beq.n	8001c84 <HAL_ADC_Start+0xcc>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	e000      	b.n	8001c86 <HAL_ADC_Start+0xce>
 8001c84:	4b28      	ldr	r3, [pc, #160]	; (8001d28 <HAL_ADC_Start+0x170>)
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d008      	beq.n	8001ca0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	2b05      	cmp	r3, #5
 8001c98:	d002      	beq.n	8001ca0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b09      	cmp	r3, #9
 8001c9e:	d114      	bne.n	8001cca <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d007      	beq.n	8001cbe <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cb6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fded 	bl	80018a2 <LL_ADC_REG_StartConversion>
 8001cc8:	e025      	b.n	8001d16 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <HAL_ADC_Start+0x16c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d002      	beq.n	8001ce6 <HAL_ADC_Start+0x12e>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	e000      	b.n	8001ce8 <HAL_ADC_Start+0x130>
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <HAL_ADC_Start+0x170>)
 8001ce8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00f      	beq.n	8001d16 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cfe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	655a      	str	r2, [r3, #84]	; 0x54
 8001d06:	e006      	b.n	8001d16 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001d10:	e001      	b.n	8001d16 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d12:	2302      	movs	r3, #2
 8001d14:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	50040300 	.word	0x50040300
 8001d24:	50040100 	.word	0x50040100
 8001d28:	50040000 	.word	0x50040000

08001d2c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d36:	4866      	ldr	r0, [pc, #408]	; (8001ed0 <HAL_ADC_PollForConversion+0x1a4>)
 8001d38:	f7ff fd22 	bl	8001780 <LL_ADC_GetMultimode>
 8001d3c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d102      	bne.n	8001d4c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001d46:	2308      	movs	r3, #8
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	e02a      	b.n	8001da2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d005      	beq.n	8001d5e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2b05      	cmp	r3, #5
 8001d56:	d002      	beq.n	8001d5e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2b09      	cmp	r3, #9
 8001d5c:	d111      	bne.n	8001d82 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d007      	beq.n	8001d7c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d70:	f043 0220 	orr.w	r2, r3, #32
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0a4      	b.n	8001ec6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001d80:	e00f      	b.n	8001da2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001d82:	4853      	ldr	r0, [pc, #332]	; (8001ed0 <HAL_ADC_PollForConversion+0x1a4>)
 8001d84:	f7ff fd0a 	bl	800179c <LL_ADC_GetMultiDMATransfer>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d007      	beq.n	8001d9e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d92:	f043 0220 	orr.w	r2, r3, #32
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e093      	b.n	8001ec6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001d9e:	2304      	movs	r3, #4
 8001da0:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001da2:	f7ff fba5 	bl	80014f0 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001da8:	e021      	b.n	8001dee <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001db0:	d01d      	beq.n	8001dee <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001db2:	f7ff fb9d 	bl	80014f0 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d302      	bcc.n	8001dc8 <HAL_ADC_PollForConversion+0x9c>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d112      	bne.n	8001dee <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10b      	bne.n	8001dee <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dda:	f043 0204 	orr.w	r2, r3, #4
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e06b      	b.n	8001ec6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0d6      	beq.n	8001daa <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fc28 	bl	8001662 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d01c      	beq.n	8001e52 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7e5b      	ldrb	r3, [r3, #25]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d118      	bne.n	8001e52 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d111      	bne.n	8001e52 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d105      	bne.n	8001e52 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4a:	f043 0201 	orr.w	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a1f      	ldr	r2, [pc, #124]	; (8001ed4 <HAL_ADC_PollForConversion+0x1a8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d002      	beq.n	8001e62 <HAL_ADC_PollForConversion+0x136>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	e000      	b.n	8001e64 <HAL_ADC_PollForConversion+0x138>
 8001e62:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_ADC_PollForConversion+0x1ac>)
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d008      	beq.n	8001e7e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d005      	beq.n	8001e7e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b05      	cmp	r3, #5
 8001e76:	d002      	beq.n	8001e7e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2b09      	cmp	r3, #9
 8001e7c:	d104      	bne.n	8001e88 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	e00c      	b.n	8001ea2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a11      	ldr	r2, [pc, #68]	; (8001ed4 <HAL_ADC_PollForConversion+0x1a8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d002      	beq.n	8001e98 <HAL_ADC_PollForConversion+0x16c>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	e000      	b.n	8001e9a <HAL_ADC_PollForConversion+0x16e>
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <HAL_ADC_PollForConversion+0x1ac>)
 8001e9a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d104      	bne.n	8001eb2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2208      	movs	r2, #8
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	e008      	b.n	8001ec4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d103      	bne.n	8001ec4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	220c      	movs	r2, #12
 8001ec2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3720      	adds	r7, #32
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	50040300 	.word	0x50040300
 8001ed4:	50040100 	.word	0x50040100
 8001ed8:	50040000 	.word	0x50040000

08001edc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b0b6      	sub	sp, #216	; 0xd8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x22>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e3c9      	b.n	80026ae <HAL_ADC_ConfigChannel+0x7b6>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fccf 	bl	80018ca <LL_ADC_REG_IsConversionOngoing>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f040 83aa 	bne.w	8002688 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b05      	cmp	r3, #5
 8001f42:	d824      	bhi.n	8001f8e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	3b02      	subs	r3, #2
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d81b      	bhi.n	8001f86 <HAL_ADC_ConfigChannel+0x8e>
 8001f4e:	a201      	add	r2, pc, #4	; (adr r2, 8001f54 <HAL_ADC_ConfigChannel+0x5c>)
 8001f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f54:	08001f65 	.word	0x08001f65
 8001f58:	08001f6d 	.word	0x08001f6d
 8001f5c:	08001f75 	.word	0x08001f75
 8001f60:	08001f7d 	.word	0x08001f7d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001f64:	230c      	movs	r3, #12
 8001f66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001f6a:	e010      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001f6c:	2312      	movs	r3, #18
 8001f6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001f72:	e00c      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001f74:	2318      	movs	r3, #24
 8001f76:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001f7a:	e008      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001f7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001f84:	e003      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001f86:	2306      	movs	r3, #6
 8001f88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001f8c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001f9c:	f7ff fb74 	bl	8001688 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff fc90 	bl	80018ca <LL_ADC_REG_IsConversionOngoing>
 8001faa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fc9c 	bl	80018f0 <LL_ADC_INJ_IsConversionOngoing>
 8001fb8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f040 81a4 	bne.w	800230e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f040 819f 	bne.w	800230e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	6819      	ldr	r1, [r3, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	f7ff fb7f 	bl	80016e0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	08db      	lsrs	r3, r3, #3
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	2b04      	cmp	r3, #4
 8002002:	d00a      	beq.n	800201a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6818      	ldr	r0, [r3, #0]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	6919      	ldr	r1, [r3, #16]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002014:	f7ff fad0 	bl	80015b8 <LL_ADC_SetOffset>
 8002018:	e179      	b.n	800230e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff faed 	bl	8001600 <LL_ADC_GetOffsetChannel>
 8002026:	4603      	mov	r3, r0
 8002028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10a      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x14e>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fae2 	bl	8001600 <LL_ADC_GetOffsetChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	0e9b      	lsrs	r3, r3, #26
 8002040:	f003 021f 	and.w	r2, r3, #31
 8002044:	e01e      	b.n	8002084 <HAL_ADC_ConfigChannel+0x18c>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fad7 	bl	8001600 <LL_ADC_GetOffsetChannel>
 8002052:	4603      	mov	r3, r0
 8002054:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800205c:	fa93 f3a3 	rbit	r3, r3
 8002060:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002064:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002068:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800206c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002074:	2320      	movs	r3, #32
 8002076:	e004      	b.n	8002082 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002078:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800207c:	fab3 f383 	clz	r3, r3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208c:	2b00      	cmp	r3, #0
 800208e:	d105      	bne.n	800209c <HAL_ADC_ConfigChannel+0x1a4>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	0e9b      	lsrs	r3, r3, #26
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	e018      	b.n	80020ce <HAL_ADC_ConfigChannel+0x1d6>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80020b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80020b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80020c0:	2320      	movs	r3, #32
 80020c2:	e004      	b.n	80020ce <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80020c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d106      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2200      	movs	r2, #0
 80020d8:	2100      	movs	r1, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff faa6 	bl	800162c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2101      	movs	r1, #1
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fa8a 	bl	8001600 <LL_ADC_GetOffsetChannel>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10a      	bne.n	800210c <HAL_ADC_ConfigChannel+0x214>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2101      	movs	r1, #1
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fa7f 	bl	8001600 <LL_ADC_GetOffsetChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	0e9b      	lsrs	r3, r3, #26
 8002106:	f003 021f 	and.w	r2, r3, #31
 800210a:	e01e      	b.n	800214a <HAL_ADC_ConfigChannel+0x252>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2101      	movs	r1, #1
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fa74 	bl	8001600 <LL_ADC_GetOffsetChannel>
 8002118:	4603      	mov	r3, r0
 800211a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800212a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800212e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002132:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800213a:	2320      	movs	r3, #32
 800213c:	e004      	b.n	8002148 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800213e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002142:	fab3 f383 	clz	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x26a>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	0e9b      	lsrs	r3, r3, #26
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	e018      	b.n	8002194 <HAL_ADC_ConfigChannel+0x29c>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002176:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800217a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800217e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002186:	2320      	movs	r3, #32
 8002188:	e004      	b.n	8002194 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800218a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002194:	429a      	cmp	r2, r3
 8002196:	d106      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2200      	movs	r2, #0
 800219e:	2101      	movs	r1, #1
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fa43 	bl	800162c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2102      	movs	r1, #2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fa27 	bl	8001600 <LL_ADC_GetOffsetChannel>
 80021b2:	4603      	mov	r3, r0
 80021b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10a      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x2da>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2102      	movs	r1, #2
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fa1c 	bl	8001600 <LL_ADC_GetOffsetChannel>
 80021c8:	4603      	mov	r3, r0
 80021ca:	0e9b      	lsrs	r3, r3, #26
 80021cc:	f003 021f 	and.w	r2, r3, #31
 80021d0:	e01e      	b.n	8002210 <HAL_ADC_ConfigChannel+0x318>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2102      	movs	r1, #2
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fa11 	bl	8001600 <LL_ADC_GetOffsetChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80021f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80021f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002200:	2320      	movs	r3, #32
 8002202:	e004      	b.n	800220e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002204:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002218:	2b00      	cmp	r3, #0
 800221a:	d105      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x330>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	0e9b      	lsrs	r3, r3, #26
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	e014      	b.n	8002252 <HAL_ADC_ConfigChannel+0x35a>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002230:	fa93 f3a3 	rbit	r3, r3
 8002234:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002236:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002238:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800223c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002244:	2320      	movs	r3, #32
 8002246:	e004      	b.n	8002252 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002248:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800224c:	fab3 f383 	clz	r3, r3
 8002250:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002252:	429a      	cmp	r2, r3
 8002254:	d106      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2200      	movs	r2, #0
 800225c:	2102      	movs	r1, #2
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff f9e4 	bl	800162c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2103      	movs	r1, #3
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff f9c8 	bl	8001600 <LL_ADC_GetOffsetChannel>
 8002270:	4603      	mov	r3, r0
 8002272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10a      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x398>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2103      	movs	r1, #3
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff f9bd 	bl	8001600 <LL_ADC_GetOffsetChannel>
 8002286:	4603      	mov	r3, r0
 8002288:	0e9b      	lsrs	r3, r3, #26
 800228a:	f003 021f 	and.w	r2, r3, #31
 800228e:	e017      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x3c8>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2103      	movs	r1, #3
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff f9b2 	bl	8001600 <LL_ADC_GetOffsetChannel>
 800229c:	4603      	mov	r3, r0
 800229e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80022a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022aa:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80022ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80022b2:	2320      	movs	r3, #32
 80022b4:	e003      	b.n	80022be <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80022b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d105      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x3e0>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	0e9b      	lsrs	r3, r3, #26
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	e011      	b.n	80022fc <HAL_ADC_ConfigChannel+0x404>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80022e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022e8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80022ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80022f0:	2320      	movs	r3, #32
 80022f2:	e003      	b.n	80022fc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80022f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d106      	bne.n	800230e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2200      	movs	r2, #0
 8002306:	2103      	movs	r1, #3
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff f98f 	bl	800162c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fab2 	bl	800187c <LL_ADC_IsEnabled>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	f040 8140 	bne.w	80025a0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	6819      	ldr	r1, [r3, #0]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	461a      	mov	r2, r3
 800232e:	f7ff fa03 	bl	8001738 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	4a8f      	ldr	r2, [pc, #572]	; (8002574 <HAL_ADC_ConfigChannel+0x67c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	f040 8131 	bne.w	80025a0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10b      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x46e>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	0e9b      	lsrs	r3, r3, #26
 8002354:	3301      	adds	r3, #1
 8002356:	f003 031f 	and.w	r3, r3, #31
 800235a:	2b09      	cmp	r3, #9
 800235c:	bf94      	ite	ls
 800235e:	2301      	movls	r3, #1
 8002360:	2300      	movhi	r3, #0
 8002362:	b2db      	uxtb	r3, r3
 8002364:	e019      	b.n	800239a <HAL_ADC_ConfigChannel+0x4a2>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002376:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800237e:	2320      	movs	r3, #32
 8002380:	e003      	b.n	800238a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002384:	fab3 f383 	clz	r3, r3
 8002388:	b2db      	uxtb	r3, r3
 800238a:	3301      	adds	r3, #1
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	2b09      	cmp	r3, #9
 8002392:	bf94      	ite	ls
 8002394:	2301      	movls	r3, #1
 8002396:	2300      	movhi	r3, #0
 8002398:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800239a:	2b00      	cmp	r3, #0
 800239c:	d079      	beq.n	8002492 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d107      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x4c2>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	0e9b      	lsrs	r3, r3, #26
 80023b0:	3301      	adds	r3, #1
 80023b2:	069b      	lsls	r3, r3, #26
 80023b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023b8:	e015      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x4ee>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80023c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ca:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80023cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80023d2:	2320      	movs	r3, #32
 80023d4:	e003      	b.n	80023de <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80023d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	3301      	adds	r3, #1
 80023e0:	069b      	lsls	r3, r3, #26
 80023e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d109      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x50e>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	0e9b      	lsrs	r3, r3, #26
 80023f8:	3301      	adds	r3, #1
 80023fa:	f003 031f 	and.w	r3, r3, #31
 80023fe:	2101      	movs	r1, #1
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	e017      	b.n	8002436 <HAL_ADC_ConfigChannel+0x53e>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002416:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800241e:	2320      	movs	r3, #32
 8002420:	e003      	b.n	800242a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002424:	fab3 f383 	clz	r3, r3
 8002428:	b2db      	uxtb	r3, r3
 800242a:	3301      	adds	r3, #1
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	2101      	movs	r1, #1
 8002432:	fa01 f303 	lsl.w	r3, r1, r3
 8002436:	ea42 0103 	orr.w	r1, r2, r3
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10a      	bne.n	800245c <HAL_ADC_ConfigChannel+0x564>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	0e9b      	lsrs	r3, r3, #26
 800244c:	3301      	adds	r3, #1
 800244e:	f003 021f 	and.w	r2, r3, #31
 8002452:	4613      	mov	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	4413      	add	r3, r2
 8002458:	051b      	lsls	r3, r3, #20
 800245a:	e018      	b.n	800248e <HAL_ADC_ConfigChannel+0x596>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002464:	fa93 f3a3 	rbit	r3, r3
 8002468:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800246a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800246e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002474:	2320      	movs	r3, #32
 8002476:	e003      	b.n	8002480 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	3301      	adds	r3, #1
 8002482:	f003 021f 	and.w	r2, r3, #31
 8002486:	4613      	mov	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4413      	add	r3, r2
 800248c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800248e:	430b      	orrs	r3, r1
 8002490:	e081      	b.n	8002596 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249a:	2b00      	cmp	r3, #0
 800249c:	d107      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x5b6>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	0e9b      	lsrs	r3, r3, #26
 80024a4:	3301      	adds	r3, #1
 80024a6:	069b      	lsls	r3, r3, #26
 80024a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ac:	e015      	b.n	80024da <HAL_ADC_ConfigChannel+0x5e2>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b6:	fa93 f3a3 	rbit	r3, r3
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80024c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80024c6:	2320      	movs	r3, #32
 80024c8:	e003      	b.n	80024d2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80024ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024cc:	fab3 f383 	clz	r3, r3
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	3301      	adds	r3, #1
 80024d4:	069b      	lsls	r3, r3, #26
 80024d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x602>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	0e9b      	lsrs	r3, r3, #26
 80024ec:	3301      	adds	r3, #1
 80024ee:	f003 031f 	and.w	r3, r3, #31
 80024f2:	2101      	movs	r1, #1
 80024f4:	fa01 f303 	lsl.w	r3, r1, r3
 80024f8:	e017      	b.n	800252a <HAL_ADC_ConfigChannel+0x632>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	61bb      	str	r3, [r7, #24]
  return result;
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002512:	2320      	movs	r3, #32
 8002514:	e003      	b.n	800251e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	3301      	adds	r3, #1
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	2101      	movs	r1, #1
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	ea42 0103 	orr.w	r1, r2, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10d      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x65e>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	0e9b      	lsrs	r3, r3, #26
 8002540:	3301      	adds	r3, #1
 8002542:	f003 021f 	and.w	r2, r3, #31
 8002546:	4613      	mov	r3, r2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	4413      	add	r3, r2
 800254c:	3b1e      	subs	r3, #30
 800254e:	051b      	lsls	r3, r3, #20
 8002550:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002554:	e01e      	b.n	8002594 <HAL_ADC_ConfigChannel+0x69c>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	60fb      	str	r3, [r7, #12]
  return result;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d104      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800256e:	2320      	movs	r3, #32
 8002570:	e006      	b.n	8002580 <HAL_ADC_ConfigChannel+0x688>
 8002572:	bf00      	nop
 8002574:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	3301      	adds	r3, #1
 8002582:	f003 021f 	and.w	r2, r3, #31
 8002586:	4613      	mov	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	3b1e      	subs	r3, #30
 800258e:	051b      	lsls	r3, r3, #20
 8002590:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002594:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800259a:	4619      	mov	r1, r3
 800259c:	f7ff f8a0 	bl	80016e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b44      	ldr	r3, [pc, #272]	; (80026b8 <HAL_ADC_ConfigChannel+0x7c0>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d07a      	beq.n	80026a2 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025ac:	4843      	ldr	r0, [pc, #268]	; (80026bc <HAL_ADC_ConfigChannel+0x7c4>)
 80025ae:	f7fe fff5 	bl	800159c <LL_ADC_GetCommonPathInternalCh>
 80025b2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a41      	ldr	r2, [pc, #260]	; (80026c0 <HAL_ADC_ConfigChannel+0x7c8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d12c      	bne.n	800261a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d126      	bne.n	800261a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a3c      	ldr	r2, [pc, #240]	; (80026c4 <HAL_ADC_ConfigChannel+0x7cc>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d004      	beq.n	80025e0 <HAL_ADC_ConfigChannel+0x6e8>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a3b      	ldr	r2, [pc, #236]	; (80026c8 <HAL_ADC_ConfigChannel+0x7d0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d15d      	bne.n	800269c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025e8:	4619      	mov	r1, r3
 80025ea:	4834      	ldr	r0, [pc, #208]	; (80026bc <HAL_ADC_ConfigChannel+0x7c4>)
 80025ec:	f7fe ffc3 	bl	8001576 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025f0:	4b36      	ldr	r3, [pc, #216]	; (80026cc <HAL_ADC_ConfigChannel+0x7d4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	099b      	lsrs	r3, r3, #6
 80025f6:	4a36      	ldr	r2, [pc, #216]	; (80026d0 <HAL_ADC_ConfigChannel+0x7d8>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	099b      	lsrs	r3, r3, #6
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	4613      	mov	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800260a:	e002      	b.n	8002612 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	3b01      	subs	r3, #1
 8002610:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f9      	bne.n	800260c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002618:	e040      	b.n	800269c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a2d      	ldr	r2, [pc, #180]	; (80026d4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d118      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002624:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d112      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a23      	ldr	r2, [pc, #140]	; (80026c4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d004      	beq.n	8002644 <HAL_ADC_ConfigChannel+0x74c>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a22      	ldr	r2, [pc, #136]	; (80026c8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d12d      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002644:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002648:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800264c:	4619      	mov	r1, r3
 800264e:	481b      	ldr	r0, [pc, #108]	; (80026bc <HAL_ADC_ConfigChannel+0x7c4>)
 8002650:	f7fe ff91 	bl	8001576 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002654:	e024      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a1f      	ldr	r2, [pc, #124]	; (80026d8 <HAL_ADC_ConfigChannel+0x7e0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d120      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002660:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d11a      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a14      	ldr	r2, [pc, #80]	; (80026c4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d115      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002676:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800267a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800267e:	4619      	mov	r1, r3
 8002680:	480e      	ldr	r0, [pc, #56]	; (80026bc <HAL_ADC_ConfigChannel+0x7c4>)
 8002682:	f7fe ff78 	bl	8001576 <LL_ADC_SetCommonPathInternalCh>
 8002686:	e00c      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268c:	f043 0220 	orr.w	r2, r3, #32
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800269a:	e002      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800269c:	bf00      	nop
 800269e:	e000      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80026aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	37d8      	adds	r7, #216	; 0xd8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	80080000 	.word	0x80080000
 80026bc:	50040300 	.word	0x50040300
 80026c0:	c7520000 	.word	0xc7520000
 80026c4:	50040000 	.word	0x50040000
 80026c8:	50040200 	.word	0x50040200
 80026cc:	20000000 	.word	0x20000000
 80026d0:	053e2d63 	.word	0x053e2d63
 80026d4:	cb840000 	.word	0xcb840000
 80026d8:	80000001 	.word	0x80000001

080026dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff f8c5 	bl	800187c <LL_ADC_IsEnabled>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d169      	bne.n	80027cc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	4b36      	ldr	r3, [pc, #216]	; (80027d8 <ADC_Enable+0xfc>)
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00d      	beq.n	8002722 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270a:	f043 0210 	orr.w	r2, r3, #16
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	f043 0201 	orr.w	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e055      	b.n	80027ce <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff f894 	bl	8001854 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800272c:	482b      	ldr	r0, [pc, #172]	; (80027dc <ADC_Enable+0x100>)
 800272e:	f7fe ff35 	bl	800159c <LL_ADC_GetCommonPathInternalCh>
 8002732:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002738:	2b00      	cmp	r3, #0
 800273a:	d013      	beq.n	8002764 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800273c:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <ADC_Enable+0x104>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	099b      	lsrs	r3, r3, #6
 8002742:	4a28      	ldr	r2, [pc, #160]	; (80027e4 <ADC_Enable+0x108>)
 8002744:	fba2 2303 	umull	r2, r3, r2, r3
 8002748:	099b      	lsrs	r3, r3, #6
 800274a:	1c5a      	adds	r2, r3, #1
 800274c:	4613      	mov	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002756:	e002      	b.n	800275e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	3b01      	subs	r3, #1
 800275c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1f9      	bne.n	8002758 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002764:	f7fe fec4 	bl	80014f0 <HAL_GetTick>
 8002768:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800276a:	e028      	b.n	80027be <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff f883 	bl	800187c <LL_ADC_IsEnabled>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d104      	bne.n	8002786 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff f867 	bl	8001854 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002786:	f7fe feb3 	bl	80014f0 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d914      	bls.n	80027be <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d00d      	beq.n	80027be <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a6:	f043 0210 	orr.w	r2, r3, #16
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b2:	f043 0201 	orr.w	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e007      	b.n	80027ce <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d1cf      	bne.n	800276c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	8000003f 	.word	0x8000003f
 80027dc:	50040300 	.word	0x50040300
 80027e0:	20000000 	.word	0x20000000
 80027e4:	053e2d63 	.word	0x053e2d63

080027e8 <LL_ADC_IsEnabled>:
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <LL_ADC_IsEnabled+0x18>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <LL_ADC_IsEnabled+0x1a>
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <LL_ADC_REG_IsConversionOngoing>:
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b04      	cmp	r3, #4
 8002820:	d101      	bne.n	8002826 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b09f      	sub	sp, #124	; 0x7c
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800284e:	2302      	movs	r3, #2
 8002850:	e093      	b.n	800297a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800285a:	2300      	movs	r3, #0
 800285c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800285e:	2300      	movs	r3, #0
 8002860:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a47      	ldr	r2, [pc, #284]	; (8002984 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d102      	bne.n	8002872 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800286c:	4b46      	ldr	r3, [pc, #280]	; (8002988 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	e001      	b.n	8002876 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10b      	bne.n	8002894 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002880:	f043 0220 	orr.w	r2, r3, #32
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e072      	b.n	800297a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff ffb9 	bl	800280e <LL_ADC_REG_IsConversionOngoing>
 800289c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff ffb3 	bl	800280e <LL_ADC_REG_IsConversionOngoing>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d154      	bne.n	8002958 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80028ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d151      	bne.n	8002958 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028b4:	4b35      	ldr	r3, [pc, #212]	; (800298c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80028b6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d02c      	beq.n	800291a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80028c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	6859      	ldr	r1, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028d2:	035b      	lsls	r3, r3, #13
 80028d4:	430b      	orrs	r3, r1
 80028d6:	431a      	orrs	r2, r3
 80028d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028dc:	4829      	ldr	r0, [pc, #164]	; (8002984 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028de:	f7ff ff83 	bl	80027e8 <LL_ADC_IsEnabled>
 80028e2:	4604      	mov	r4, r0
 80028e4:	4828      	ldr	r0, [pc, #160]	; (8002988 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028e6:	f7ff ff7f 	bl	80027e8 <LL_ADC_IsEnabled>
 80028ea:	4603      	mov	r3, r0
 80028ec:	431c      	orrs	r4, r3
 80028ee:	4828      	ldr	r0, [pc, #160]	; (8002990 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80028f0:	f7ff ff7a 	bl	80027e8 <LL_ADC_IsEnabled>
 80028f4:	4603      	mov	r3, r0
 80028f6:	4323      	orrs	r3, r4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d137      	bne.n	800296c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80028fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002904:	f023 030f 	bic.w	r3, r3, #15
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	6811      	ldr	r1, [r2, #0]
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	6892      	ldr	r2, [r2, #8]
 8002910:	430a      	orrs	r2, r1
 8002912:	431a      	orrs	r2, r3
 8002914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002916:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002918:	e028      	b.n	800296c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800291a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002924:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002926:	4817      	ldr	r0, [pc, #92]	; (8002984 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002928:	f7ff ff5e 	bl	80027e8 <LL_ADC_IsEnabled>
 800292c:	4604      	mov	r4, r0
 800292e:	4816      	ldr	r0, [pc, #88]	; (8002988 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002930:	f7ff ff5a 	bl	80027e8 <LL_ADC_IsEnabled>
 8002934:	4603      	mov	r3, r0
 8002936:	431c      	orrs	r4, r3
 8002938:	4815      	ldr	r0, [pc, #84]	; (8002990 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800293a:	f7ff ff55 	bl	80027e8 <LL_ADC_IsEnabled>
 800293e:	4603      	mov	r3, r0
 8002940:	4323      	orrs	r3, r4
 8002942:	2b00      	cmp	r3, #0
 8002944:	d112      	bne.n	800296c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800294e:	f023 030f 	bic.w	r3, r3, #15
 8002952:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002954:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002956:	e009      	b.n	800296c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295c:	f043 0220 	orr.w	r2, r3, #32
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800296a:	e000      	b.n	800296e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800296c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002976:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800297a:	4618      	mov	r0, r3
 800297c:	377c      	adds	r7, #124	; 0x7c
 800297e:	46bd      	mov	sp, r7
 8002980:	bd90      	pop	{r4, r7, pc}
 8002982:	bf00      	nop
 8002984:	50040000 	.word	0x50040000
 8002988:	50040100 	.word	0x50040100
 800298c:	50040300 	.word	0x50040300
 8002990:	50040200 	.word	0x50040200

08002994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <__NVIC_SetPriorityGrouping+0x44>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029b0:	4013      	ands	r3, r2
 80029b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029c6:	4a04      	ldr	r2, [pc, #16]	; (80029d8 <__NVIC_SetPriorityGrouping+0x44>)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	60d3      	str	r3, [r2, #12]
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e0:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <__NVIC_GetPriorityGrouping+0x18>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	0a1b      	lsrs	r3, r3, #8
 80029e6:	f003 0307 	and.w	r3, r3, #7
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	db0b      	blt.n	8002a22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	f003 021f 	and.w	r2, r3, #31
 8002a10:	4907      	ldr	r1, [pc, #28]	; (8002a30 <__NVIC_EnableIRQ+0x38>)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	2001      	movs	r0, #1
 8002a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	e000e100 	.word	0xe000e100

08002a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	6039      	str	r1, [r7, #0]
 8002a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	db0a      	blt.n	8002a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	490c      	ldr	r1, [pc, #48]	; (8002a80 <__NVIC_SetPriority+0x4c>)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	0112      	lsls	r2, r2, #4
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	440b      	add	r3, r1
 8002a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a5c:	e00a      	b.n	8002a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	4908      	ldr	r1, [pc, #32]	; (8002a84 <__NVIC_SetPriority+0x50>)
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	3b04      	subs	r3, #4
 8002a6c:	0112      	lsls	r2, r2, #4
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	440b      	add	r3, r1
 8002a72:	761a      	strb	r2, [r3, #24]
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000e100 	.word	0xe000e100
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b089      	sub	sp, #36	; 0x24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f1c3 0307 	rsb	r3, r3, #7
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	bf28      	it	cs
 8002aa6:	2304      	movcs	r3, #4
 8002aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3304      	adds	r3, #4
 8002aae:	2b06      	cmp	r3, #6
 8002ab0:	d902      	bls.n	8002ab8 <NVIC_EncodePriority+0x30>
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3b03      	subs	r3, #3
 8002ab6:	e000      	b.n	8002aba <NVIC_EncodePriority+0x32>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002abc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43da      	mvns	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	401a      	ands	r2, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ada:	43d9      	mvns	r1, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae0:	4313      	orrs	r3, r2
         );
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3724      	adds	r7, #36	; 0x24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b00:	d301      	bcc.n	8002b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b02:	2301      	movs	r3, #1
 8002b04:	e00f      	b.n	8002b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b06:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <SysTick_Config+0x40>)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b0e:	210f      	movs	r1, #15
 8002b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b14:	f7ff ff8e 	bl	8002a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b18:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <SysTick_Config+0x40>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b1e:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <SysTick_Config+0x40>)
 8002b20:	2207      	movs	r2, #7
 8002b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	e000e010 	.word	0xe000e010

08002b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7ff ff29 	bl	8002994 <__NVIC_SetPriorityGrouping>
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b086      	sub	sp, #24
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	4603      	mov	r3, r0
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b5c:	f7ff ff3e 	bl	80029dc <__NVIC_GetPriorityGrouping>
 8002b60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68b9      	ldr	r1, [r7, #8]
 8002b66:	6978      	ldr	r0, [r7, #20]
 8002b68:	f7ff ff8e 	bl	8002a88 <NVIC_EncodePriority>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b72:	4611      	mov	r1, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff5d 	bl	8002a34 <__NVIC_SetPriority>
}
 8002b7a:	bf00      	nop
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	4603      	mov	r3, r0
 8002b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff ff31 	bl	80029f8 <__NVIC_EnableIRQ>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff ffa2 	bl	8002af0 <SysTick_Config>
 8002bac:	4603      	mov	r3, r0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e0ac      	b.n	8002d24 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 f8b2 	bl	8002d38 <DFSDM_GetChannelFromInstance>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4a55      	ldr	r2, [pc, #340]	; (8002d2c <HAL_DFSDM_ChannelInit+0x174>)
 8002bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e09f      	b.n	8002d24 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7fe f931 	bl	8000e4c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002bea:	4b51      	ldr	r3, [pc, #324]	; (8002d30 <HAL_DFSDM_ChannelInit+0x178>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	4a4f      	ldr	r2, [pc, #316]	; (8002d30 <HAL_DFSDM_ChannelInit+0x178>)
 8002bf2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002bf4:	4b4e      	ldr	r3, [pc, #312]	; (8002d30 <HAL_DFSDM_ChannelInit+0x178>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d125      	bne.n	8002c48 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002bfc:	4b4d      	ldr	r3, [pc, #308]	; (8002d34 <HAL_DFSDM_ChannelInit+0x17c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a4c      	ldr	r2, [pc, #304]	; (8002d34 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c06:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002c08:	4b4a      	ldr	r3, [pc, #296]	; (8002d34 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	4948      	ldr	r1, [pc, #288]	; (8002d34 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002c16:	4b47      	ldr	r3, [pc, #284]	; (8002d34 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a46      	ldr	r2, [pc, #280]	; (8002d34 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c1c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002c20:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	791b      	ldrb	r3, [r3, #4]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d108      	bne.n	8002c3c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002c2a:	4b42      	ldr	r3, [pc, #264]	; (8002d34 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	041b      	lsls	r3, r3, #16
 8002c36:	493f      	ldr	r1, [pc, #252]	; (8002d34 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002c3c:	4b3d      	ldr	r3, [pc, #244]	; (8002d34 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a3c      	ldr	r2, [pc, #240]	; (8002d34 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c46:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002c56:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6819      	ldr	r1, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002c66:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002c6c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 020f 	bic.w	r2, r2, #15
 8002c84:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6819      	ldr	r1, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002cac:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6899      	ldr	r1, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f002 0207 	and.w	r2, r2, #7
 8002cd8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6859      	ldr	r1, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d04:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 f810 	bl	8002d38 <DFSDM_GetChannelFromInstance>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4904      	ldr	r1, [pc, #16]	; (8002d2c <HAL_DFSDM_ChannelInit+0x174>)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	200007e8 	.word	0x200007e8
 8002d30:	200007e4 	.word	0x200007e4
 8002d34:	40016000 	.word	0x40016000

08002d38 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a1c      	ldr	r2, [pc, #112]	; (8002db4 <DFSDM_GetChannelFromInstance+0x7c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d102      	bne.n	8002d4e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	e02b      	b.n	8002da6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a19      	ldr	r2, [pc, #100]	; (8002db8 <DFSDM_GetChannelFromInstance+0x80>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d102      	bne.n	8002d5c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002d56:	2301      	movs	r3, #1
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	e024      	b.n	8002da6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a17      	ldr	r2, [pc, #92]	; (8002dbc <DFSDM_GetChannelFromInstance+0x84>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d102      	bne.n	8002d6a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002d64:	2302      	movs	r3, #2
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	e01d      	b.n	8002da6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a14      	ldr	r2, [pc, #80]	; (8002dc0 <DFSDM_GetChannelFromInstance+0x88>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d102      	bne.n	8002d78 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002d72:	2304      	movs	r3, #4
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	e016      	b.n	8002da6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a12      	ldr	r2, [pc, #72]	; (8002dc4 <DFSDM_GetChannelFromInstance+0x8c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d102      	bne.n	8002d86 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002d80:	2305      	movs	r3, #5
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	e00f      	b.n	8002da6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a0f      	ldr	r2, [pc, #60]	; (8002dc8 <DFSDM_GetChannelFromInstance+0x90>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d102      	bne.n	8002d94 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002d8e:	2306      	movs	r3, #6
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	e008      	b.n	8002da6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a0d      	ldr	r2, [pc, #52]	; (8002dcc <DFSDM_GetChannelFromInstance+0x94>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d102      	bne.n	8002da2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002d9c:	2307      	movs	r3, #7
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	e001      	b.n	8002da6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002da2:	2303      	movs	r3, #3
 8002da4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002da6:	68fb      	ldr	r3, [r7, #12]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	40016000 	.word	0x40016000
 8002db8:	40016020 	.word	0x40016020
 8002dbc:	40016040 	.word	0x40016040
 8002dc0:	40016080 	.word	0x40016080
 8002dc4:	400160a0 	.word	0x400160a0
 8002dc8:	400160c0 	.word	0x400160c0
 8002dcc:	400160e0 	.word	0x400160e0

08002dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dde:	e17f      	b.n	80030e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	2101      	movs	r1, #1
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dec:	4013      	ands	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 8171 	beq.w	80030da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d005      	beq.n	8002e10 <HAL_GPIO_Init+0x40>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d130      	bne.n	8002e72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e46:	2201      	movs	r2, #1
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4013      	ands	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	091b      	lsrs	r3, r3, #4
 8002e5c:	f003 0201 	and.w	r2, r3, #1
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d118      	bne.n	8002eb0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002e84:	2201      	movs	r2, #1
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	08db      	lsrs	r3, r3, #3
 8002e9a:	f003 0201 	and.w	r2, r3, #1
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d017      	beq.n	8002eec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d123      	bne.n	8002f40 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	08da      	lsrs	r2, r3, #3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3208      	adds	r2, #8
 8002f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f04:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	220f      	movs	r2, #15
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	691a      	ldr	r2, [r3, #16]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	08da      	lsrs	r2, r3, #3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3208      	adds	r2, #8
 8002f3a:	6939      	ldr	r1, [r7, #16]
 8002f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4013      	ands	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0203 	and.w	r2, r3, #3
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80ac 	beq.w	80030da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f82:	4b5f      	ldr	r3, [pc, #380]	; (8003100 <HAL_GPIO_Init+0x330>)
 8002f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f86:	4a5e      	ldr	r2, [pc, #376]	; (8003100 <HAL_GPIO_Init+0x330>)
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	6613      	str	r3, [r2, #96]	; 0x60
 8002f8e:	4b5c      	ldr	r3, [pc, #368]	; (8003100 <HAL_GPIO_Init+0x330>)
 8002f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f9a:	4a5a      	ldr	r2, [pc, #360]	; (8003104 <HAL_GPIO_Init+0x334>)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	089b      	lsrs	r3, r3, #2
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	220f      	movs	r2, #15
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fc4:	d025      	beq.n	8003012 <HAL_GPIO_Init+0x242>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a4f      	ldr	r2, [pc, #316]	; (8003108 <HAL_GPIO_Init+0x338>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d01f      	beq.n	800300e <HAL_GPIO_Init+0x23e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a4e      	ldr	r2, [pc, #312]	; (800310c <HAL_GPIO_Init+0x33c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d019      	beq.n	800300a <HAL_GPIO_Init+0x23a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a4d      	ldr	r2, [pc, #308]	; (8003110 <HAL_GPIO_Init+0x340>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d013      	beq.n	8003006 <HAL_GPIO_Init+0x236>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a4c      	ldr	r2, [pc, #304]	; (8003114 <HAL_GPIO_Init+0x344>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d00d      	beq.n	8003002 <HAL_GPIO_Init+0x232>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a4b      	ldr	r2, [pc, #300]	; (8003118 <HAL_GPIO_Init+0x348>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d007      	beq.n	8002ffe <HAL_GPIO_Init+0x22e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a4a      	ldr	r2, [pc, #296]	; (800311c <HAL_GPIO_Init+0x34c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d101      	bne.n	8002ffa <HAL_GPIO_Init+0x22a>
 8002ff6:	2306      	movs	r3, #6
 8002ff8:	e00c      	b.n	8003014 <HAL_GPIO_Init+0x244>
 8002ffa:	2307      	movs	r3, #7
 8002ffc:	e00a      	b.n	8003014 <HAL_GPIO_Init+0x244>
 8002ffe:	2305      	movs	r3, #5
 8003000:	e008      	b.n	8003014 <HAL_GPIO_Init+0x244>
 8003002:	2304      	movs	r3, #4
 8003004:	e006      	b.n	8003014 <HAL_GPIO_Init+0x244>
 8003006:	2303      	movs	r3, #3
 8003008:	e004      	b.n	8003014 <HAL_GPIO_Init+0x244>
 800300a:	2302      	movs	r3, #2
 800300c:	e002      	b.n	8003014 <HAL_GPIO_Init+0x244>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <HAL_GPIO_Init+0x244>
 8003012:	2300      	movs	r3, #0
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	f002 0203 	and.w	r2, r2, #3
 800301a:	0092      	lsls	r2, r2, #2
 800301c:	4093      	lsls	r3, r2
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003024:	4937      	ldr	r1, [pc, #220]	; (8003104 <HAL_GPIO_Init+0x334>)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	089b      	lsrs	r3, r3, #2
 800302a:	3302      	adds	r3, #2
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003032:	4b3b      	ldr	r3, [pc, #236]	; (8003120 <HAL_GPIO_Init+0x350>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	43db      	mvns	r3, r3
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4013      	ands	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4313      	orrs	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003056:	4a32      	ldr	r2, [pc, #200]	; (8003120 <HAL_GPIO_Init+0x350>)
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800305c:	4b30      	ldr	r3, [pc, #192]	; (8003120 <HAL_GPIO_Init+0x350>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	43db      	mvns	r3, r3
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003080:	4a27      	ldr	r2, [pc, #156]	; (8003120 <HAL_GPIO_Init+0x350>)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003086:	4b26      	ldr	r3, [pc, #152]	; (8003120 <HAL_GPIO_Init+0x350>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	43db      	mvns	r3, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030aa:	4a1d      	ldr	r2, [pc, #116]	; (8003120 <HAL_GPIO_Init+0x350>)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80030b0:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <HAL_GPIO_Init+0x350>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4013      	ands	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030d4:	4a12      	ldr	r2, [pc, #72]	; (8003120 <HAL_GPIO_Init+0x350>)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	3301      	adds	r3, #1
 80030de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f47f ae78 	bne.w	8002de0 <HAL_GPIO_Init+0x10>
  }
}
 80030f0:	bf00      	nop
 80030f2:	bf00      	nop
 80030f4:	371c      	adds	r7, #28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40021000 	.word	0x40021000
 8003104:	40010000 	.word	0x40010000
 8003108:	48000400 	.word	0x48000400
 800310c:	48000800 	.word	0x48000800
 8003110:	48000c00 	.word	0x48000c00
 8003114:	48001000 	.word	0x48001000
 8003118:	48001400 	.word	0x48001400
 800311c:	48001800 	.word	0x48001800
 8003120:	40010400 	.word	0x40010400

08003124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	807b      	strh	r3, [r7, #2]
 8003130:	4613      	mov	r3, r2
 8003132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003134:	787b      	ldrb	r3, [r7, #1]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003140:	e002      	b.n	8003148 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003142:	887a      	ldrh	r2, [r7, #2]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800315e:	4b08      	ldr	r3, [pc, #32]	; (8003180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	4013      	ands	r3, r2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d006      	beq.n	8003178 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800316a:	4a05      	ldr	r2, [pc, #20]	; (8003180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003170:	88fb      	ldrh	r3, [r7, #6]
 8003172:	4618      	mov	r0, r3
 8003174:	f000 f806 	bl	8003184 <HAL_GPIO_EXTI_Callback>
  }
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40010400 	.word	0x40010400

08003184 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b082      	sub	sp, #8
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e08d      	b.n	80032c8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d106      	bne.n	80031c6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7fd fea7 	bl	8000f14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2224      	movs	r2, #36	; 0x24
 80031ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0201 	bic.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d107      	bne.n	8003214 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003210:	609a      	str	r2, [r3, #8]
 8003212:	e006      	b.n	8003222 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003220:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d108      	bne.n	800323c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	e007      	b.n	800324c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800324a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800325a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800325e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800326e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69d9      	ldr	r1, [r3, #28]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1a      	ldr	r2, [r3, #32]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0201 	orr.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b20      	cmp	r3, #32
 80032e4:	d138      	bne.n	8003358 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e032      	b.n	800335a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2224      	movs	r2, #36	; 0x24
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0201 	bic.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003322:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6819      	ldr	r1, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	e000      	b.n	800335a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003358:	2302      	movs	r3, #2
  }
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003366:	b480      	push	{r7}
 8003368:	b085      	sub	sp, #20
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b20      	cmp	r3, #32
 800337a:	d139      	bne.n	80033f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003386:	2302      	movs	r3, #2
 8003388:	e033      	b.n	80033f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2224      	movs	r2, #36	; 0x24
 8003396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0201 	bic.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	021b      	lsls	r3, r3, #8
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	e000      	b.n	80033f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033f0:	2302      	movs	r3, #2
  }
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003400:	b08f      	sub	sp, #60	; 0x3c
 8003402:	af0a      	add	r7, sp, #40	; 0x28
 8003404:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e116      	b.n	800363e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fd fefc 	bl	8001228 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2203      	movs	r2, #3
 8003434:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003440:	2b00      	cmp	r3, #0
 8003442:	d102      	bne.n	800344a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f002 fb15 	bl	8005a7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	603b      	str	r3, [r7, #0]
 800345a:	687e      	ldr	r6, [r7, #4]
 800345c:	466d      	mov	r5, sp
 800345e:	f106 0410 	add.w	r4, r6, #16
 8003462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800346a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800346e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003472:	1d33      	adds	r3, r6, #4
 8003474:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003476:	6838      	ldr	r0, [r7, #0]
 8003478:	f002 fad5 	bl	8005a26 <USB_CoreInit>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2202      	movs	r2, #2
 8003486:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e0d7      	b.n	800363e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2100      	movs	r1, #0
 8003494:	4618      	mov	r0, r3
 8003496:	f002 fb03 	bl	8005aa0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800349a:	2300      	movs	r3, #0
 800349c:	73fb      	strb	r3, [r7, #15]
 800349e:	e04a      	b.n	8003536 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034a0:	7bfa      	ldrb	r2, [r7, #15]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	333d      	adds	r3, #61	; 0x3d
 80034b0:	2201      	movs	r2, #1
 80034b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034b4:	7bfa      	ldrb	r2, [r7, #15]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	333c      	adds	r3, #60	; 0x3c
 80034c4:	7bfa      	ldrb	r2, [r7, #15]
 80034c6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034c8:	7bfa      	ldrb	r2, [r7, #15]
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	b298      	uxth	r0, r3
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	3356      	adds	r3, #86	; 0x56
 80034dc:	4602      	mov	r2, r0
 80034de:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034e0:	7bfa      	ldrb	r2, [r7, #15]
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	4413      	add	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	3340      	adds	r3, #64	; 0x40
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034f4:	7bfa      	ldrb	r2, [r7, #15]
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	4413      	add	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	3344      	adds	r3, #68	; 0x44
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003508:	7bfa      	ldrb	r2, [r7, #15]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	3348      	adds	r3, #72	; 0x48
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800351c:	7bfa      	ldrb	r2, [r7, #15]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	334c      	adds	r3, #76	; 0x4c
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003530:	7bfb      	ldrb	r3, [r7, #15]
 8003532:	3301      	adds	r3, #1
 8003534:	73fb      	strb	r3, [r7, #15]
 8003536:	7bfa      	ldrb	r2, [r7, #15]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	429a      	cmp	r2, r3
 800353e:	d3af      	bcc.n	80034a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003540:	2300      	movs	r3, #0
 8003542:	73fb      	strb	r3, [r7, #15]
 8003544:	e044      	b.n	80035d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003546:	7bfa      	ldrb	r2, [r7, #15]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800356e:	7bfa      	ldrb	r2, [r7, #15]
 8003570:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003572:	7bfa      	ldrb	r2, [r7, #15]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003584:	2200      	movs	r2, #0
 8003586:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800359e:	7bfa      	ldrb	r2, [r7, #15]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035b4:	7bfa      	ldrb	r2, [r7, #15]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	4413      	add	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	3301      	adds	r3, #1
 80035ce:	73fb      	strb	r3, [r7, #15]
 80035d0:	7bfa      	ldrb	r2, [r7, #15]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d3b5      	bcc.n	8003546 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	603b      	str	r3, [r7, #0]
 80035e0:	687e      	ldr	r6, [r7, #4]
 80035e2:	466d      	mov	r5, sp
 80035e4:	f106 0410 	add.w	r4, r6, #16
 80035e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80035f8:	1d33      	adds	r3, r6, #4
 80035fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035fc:	6838      	ldr	r0, [r7, #0]
 80035fe:	f002 fa9b 	bl	8005b38 <USB_DevInit>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e014      	b.n	800363e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	2b01      	cmp	r3, #1
 800362a:	d102      	bne.n	8003632 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f80a 	bl	8003646 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f002 fc3d 	bl	8005eb6 <USB_DevDisconnect>

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003646 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003646:	b480      	push	{r7}
 8003648:	b085      	sub	sp, #20
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003678:	f043 0303 	orr.w	r3, r3, #3
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
	...

08003690 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a04      	ldr	r2, [pc, #16]	; (80036ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800369a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800369e:	6013      	str	r3, [r2, #0]
}
 80036a0:	bf00      	nop
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40007000 	.word	0x40007000

080036b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036b4:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40007000 	.word	0x40007000

080036cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036da:	d130      	bne.n	800373e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036dc:	4b23      	ldr	r3, [pc, #140]	; (800376c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e8:	d038      	beq.n	800375c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036ea:	4b20      	ldr	r3, [pc, #128]	; (800376c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036f2:	4a1e      	ldr	r2, [pc, #120]	; (800376c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036fa:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2232      	movs	r2, #50	; 0x32
 8003700:	fb02 f303 	mul.w	r3, r2, r3
 8003704:	4a1b      	ldr	r2, [pc, #108]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	0c9b      	lsrs	r3, r3, #18
 800370c:	3301      	adds	r3, #1
 800370e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003710:	e002      	b.n	8003718 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	3b01      	subs	r3, #1
 8003716:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003718:	4b14      	ldr	r3, [pc, #80]	; (800376c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003724:	d102      	bne.n	800372c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f2      	bne.n	8003712 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800372c:	4b0f      	ldr	r3, [pc, #60]	; (800376c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003738:	d110      	bne.n	800375c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e00f      	b.n	800375e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374a:	d007      	beq.n	800375c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800374c:	4b07      	ldr	r3, [pc, #28]	; (800376c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003754:	4a05      	ldr	r2, [pc, #20]	; (800376c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800375a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40007000 	.word	0x40007000
 8003770:	20000000 	.word	0x20000000
 8003774:	431bde83 	.word	0x431bde83

08003778 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_PWREx_EnableVddUSB+0x1c>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4a04      	ldr	r2, [pc, #16]	; (8003794 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003782:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003786:	6053      	str	r3, [r2, #4]
}
 8003788:	bf00      	nop
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40007000 	.word	0x40007000

08003798 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af02      	add	r7, sp, #8
 800379e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80037a0:	f7fd fea6 	bl	80014f0 <HAL_GetTick>
 80037a4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e063      	b.n	8003878 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10b      	bne.n	80037d4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7fd fc03 	bl	8000fd0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80037ca:	f241 3188 	movw	r1, #5000	; 0x1388
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f858 	bl	8003884 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	021a      	lsls	r2, r3, #8
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	2120      	movs	r1, #32
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f850 	bl	80038a0 <QSPI_WaitFlagStateUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003804:	7afb      	ldrb	r3, [r7, #11]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d131      	bne.n	800386e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003814:	f023 0310 	bic.w	r3, r3, #16
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6852      	ldr	r2, [r2, #4]
 800381c:	0611      	lsls	r1, r2, #24
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	68d2      	ldr	r2, [r2, #12]
 8003822:	4311      	orrs	r1, r2
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	430b      	orrs	r3, r1
 800382a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	4b13      	ldr	r3, [pc, #76]	; (8003880 <HAL_QSPI_Init+0xe8>)
 8003834:	4013      	ands	r3, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6912      	ldr	r2, [r2, #16]
 800383a:	0411      	lsls	r1, r2, #16
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6952      	ldr	r2, [r2, #20]
 8003840:	4311      	orrs	r1, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6992      	ldr	r2, [r2, #24]
 8003846:	4311      	orrs	r1, r2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	430b      	orrs	r3, r1
 800384e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003876:	7afb      	ldrb	r3, [r7, #11]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	ffe0f8fe 	.word	0xffe0f8fe

08003884 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	4613      	mov	r3, r2
 80038ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80038b0:	e01a      	b.n	80038e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038b8:	d016      	beq.n	80038e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ba:	f7fd fe19 	bl	80014f0 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d302      	bcc.n	80038d0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10b      	bne.n	80038e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2204      	movs	r2, #4
 80038d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038dc:	f043 0201 	orr.w	r2, r3, #1
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e00e      	b.n	8003906 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	bf14      	ite	ne
 80038f6:	2301      	movne	r3, #1
 80038f8:	2300      	moveq	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	461a      	mov	r2, r3
 80038fe:	79fb      	ldrb	r3, [r7, #7]
 8003900:	429a      	cmp	r2, r3
 8003902:	d1d6      	bne.n	80038b2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b088      	sub	sp, #32
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e3ca      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003922:	4b97      	ldr	r3, [pc, #604]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800392c:	4b94      	ldr	r3, [pc, #592]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0310 	and.w	r3, r3, #16
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 80e4 	beq.w	8003b0c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d007      	beq.n	800395a <HAL_RCC_OscConfig+0x4a>
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	2b0c      	cmp	r3, #12
 800394e:	f040 808b 	bne.w	8003a68 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b01      	cmp	r3, #1
 8003956:	f040 8087 	bne.w	8003a68 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800395a:	4b89      	ldr	r3, [pc, #548]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_RCC_OscConfig+0x62>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e3a2      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1a      	ldr	r2, [r3, #32]
 8003976:	4b82      	ldr	r3, [pc, #520]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d004      	beq.n	800398c <HAL_RCC_OscConfig+0x7c>
 8003982:	4b7f      	ldr	r3, [pc, #508]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800398a:	e005      	b.n	8003998 <HAL_RCC_OscConfig+0x88>
 800398c:	4b7c      	ldr	r3, [pc, #496]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 800398e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003992:	091b      	lsrs	r3, r3, #4
 8003994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003998:	4293      	cmp	r3, r2
 800399a:	d223      	bcs.n	80039e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fd55 	bl	8004450 <RCC_SetFlashLatencyFromMSIRange>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e383      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039b0:	4b73      	ldr	r3, [pc, #460]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a72      	ldr	r2, [pc, #456]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039b6:	f043 0308 	orr.w	r3, r3, #8
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	4b70      	ldr	r3, [pc, #448]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	496d      	ldr	r1, [pc, #436]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ce:	4b6c      	ldr	r3, [pc, #432]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	021b      	lsls	r3, r3, #8
 80039dc:	4968      	ldr	r1, [pc, #416]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
 80039e2:	e025      	b.n	8003a30 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039e4:	4b66      	ldr	r3, [pc, #408]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a65      	ldr	r2, [pc, #404]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039ea:	f043 0308 	orr.w	r3, r3, #8
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	4b63      	ldr	r3, [pc, #396]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	4960      	ldr	r1, [pc, #384]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a02:	4b5f      	ldr	r3, [pc, #380]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	495b      	ldr	r1, [pc, #364]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d109      	bne.n	8003a30 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 fd15 	bl	8004450 <RCC_SetFlashLatencyFromMSIRange>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e343      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a30:	f000 fc4a 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8003a34:	4602      	mov	r2, r0
 8003a36:	4b52      	ldr	r3, [pc, #328]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	091b      	lsrs	r3, r3, #4
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	4950      	ldr	r1, [pc, #320]	; (8003b84 <HAL_RCC_OscConfig+0x274>)
 8003a42:	5ccb      	ldrb	r3, [r1, r3]
 8003a44:	f003 031f 	and.w	r3, r3, #31
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4c:	4a4e      	ldr	r2, [pc, #312]	; (8003b88 <HAL_RCC_OscConfig+0x278>)
 8003a4e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a50:	4b4e      	ldr	r3, [pc, #312]	; (8003b8c <HAL_RCC_OscConfig+0x27c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fd fcfb 	bl	8001450 <HAL_InitTick>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d052      	beq.n	8003b0a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	e327      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d032      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a70:	4b43      	ldr	r3, [pc, #268]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a42      	ldr	r2, [pc, #264]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003a76:	f043 0301 	orr.w	r3, r3, #1
 8003a7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a7c:	f7fd fd38 	bl	80014f0 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a84:	f7fd fd34 	bl	80014f0 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e310      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a96:	4b3a      	ldr	r3, [pc, #232]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f0      	beq.n	8003a84 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aa2:	4b37      	ldr	r3, [pc, #220]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a36      	ldr	r2, [pc, #216]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003aa8:	f043 0308 	orr.w	r3, r3, #8
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	4b34      	ldr	r3, [pc, #208]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	4931      	ldr	r1, [pc, #196]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ac0:	4b2f      	ldr	r3, [pc, #188]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	492c      	ldr	r1, [pc, #176]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]
 8003ad4:	e01a      	b.n	8003b0c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ad6:	4b2a      	ldr	r3, [pc, #168]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a29      	ldr	r2, [pc, #164]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ae2:	f7fd fd05 	bl	80014f0 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003aea:	f7fd fd01 	bl	80014f0 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e2dd      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003afc:	4b20      	ldr	r3, [pc, #128]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1f0      	bne.n	8003aea <HAL_RCC_OscConfig+0x1da>
 8003b08:	e000      	b.n	8003b0c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d074      	beq.n	8003c02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d005      	beq.n	8003b2a <HAL_RCC_OscConfig+0x21a>
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	2b0c      	cmp	r3, #12
 8003b22:	d10e      	bne.n	8003b42 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d10b      	bne.n	8003b42 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2a:	4b15      	ldr	r3, [pc, #84]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d064      	beq.n	8003c00 <HAL_RCC_OscConfig+0x2f0>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d160      	bne.n	8003c00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e2ba      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b4a:	d106      	bne.n	8003b5a <HAL_RCC_OscConfig+0x24a>
 8003b4c:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0b      	ldr	r2, [pc, #44]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	e026      	b.n	8003ba8 <HAL_RCC_OscConfig+0x298>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b62:	d115      	bne.n	8003b90 <HAL_RCC_OscConfig+0x280>
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a05      	ldr	r2, [pc, #20]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003b6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a02      	ldr	r2, [pc, #8]	; (8003b80 <HAL_RCC_OscConfig+0x270>)
 8003b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	e014      	b.n	8003ba8 <HAL_RCC_OscConfig+0x298>
 8003b7e:	bf00      	nop
 8003b80:	40021000 	.word	0x40021000
 8003b84:	08005fec 	.word	0x08005fec
 8003b88:	20000000 	.word	0x20000000
 8003b8c:	20000004 	.word	0x20000004
 8003b90:	4ba0      	ldr	r3, [pc, #640]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a9f      	ldr	r2, [pc, #636]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	4b9d      	ldr	r3, [pc, #628]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a9c      	ldr	r2, [pc, #624]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d013      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fd fc9e 	bl	80014f0 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb8:	f7fd fc9a 	bl	80014f0 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	; 0x64
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e276      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bca:	4b92      	ldr	r3, [pc, #584]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x2a8>
 8003bd6:	e014      	b.n	8003c02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd8:	f7fd fc8a 	bl	80014f0 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be0:	f7fd fc86 	bl	80014f0 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b64      	cmp	r3, #100	; 0x64
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e262      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bf2:	4b88      	ldr	r3, [pc, #544]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x2d0>
 8003bfe:	e000      	b.n	8003c02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d060      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d005      	beq.n	8003c20 <HAL_RCC_OscConfig+0x310>
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	d119      	bne.n	8003c4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d116      	bne.n	8003c4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c20:	4b7c      	ldr	r3, [pc, #496]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_RCC_OscConfig+0x328>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e23f      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c38:	4b76      	ldr	r3, [pc, #472]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	061b      	lsls	r3, r3, #24
 8003c46:	4973      	ldr	r1, [pc, #460]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c4c:	e040      	b.n	8003cd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d023      	beq.n	8003c9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c56:	4b6f      	ldr	r3, [pc, #444]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a6e      	ldr	r2, [pc, #440]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c62:	f7fd fc45 	bl	80014f0 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c6a:	f7fd fc41 	bl	80014f0 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e21d      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c7c:	4b65      	ldr	r3, [pc, #404]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c88:	4b62      	ldr	r3, [pc, #392]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	061b      	lsls	r3, r3, #24
 8003c96:	495f      	ldr	r1, [pc, #380]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	604b      	str	r3, [r1, #4]
 8003c9c:	e018      	b.n	8003cd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c9e:	4b5d      	ldr	r3, [pc, #372]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a5c      	ldr	r2, [pc, #368]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003caa:	f7fd fc21 	bl	80014f0 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb2:	f7fd fc1d 	bl	80014f0 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e1f9      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cc4:	4b53      	ldr	r3, [pc, #332]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1f0      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d03c      	beq.n	8003d56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01c      	beq.n	8003d1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ce4:	4b4b      	ldr	r3, [pc, #300]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cea:	4a4a      	ldr	r2, [pc, #296]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf4:	f7fd fbfc 	bl	80014f0 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfc:	f7fd fbf8 	bl	80014f0 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e1d4      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d0e:	4b41      	ldr	r3, [pc, #260]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ef      	beq.n	8003cfc <HAL_RCC_OscConfig+0x3ec>
 8003d1c:	e01b      	b.n	8003d56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d1e:	4b3d      	ldr	r3, [pc, #244]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d24:	4a3b      	ldr	r2, [pc, #236]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2e:	f7fd fbdf 	bl	80014f0 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d36:	f7fd fbdb 	bl	80014f0 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e1b7      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d48:	4b32      	ldr	r3, [pc, #200]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1ef      	bne.n	8003d36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0304 	and.w	r3, r3, #4
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 80a6 	beq.w	8003eb0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d64:	2300      	movs	r3, #0
 8003d66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d68:	4b2a      	ldr	r3, [pc, #168]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10d      	bne.n	8003d90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d74:	4b27      	ldr	r3, [pc, #156]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d78:	4a26      	ldr	r2, [pc, #152]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d80:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d90:	4b21      	ldr	r3, [pc, #132]	; (8003e18 <HAL_RCC_OscConfig+0x508>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d118      	bne.n	8003dce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d9c:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <HAL_RCC_OscConfig+0x508>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a1d      	ldr	r2, [pc, #116]	; (8003e18 <HAL_RCC_OscConfig+0x508>)
 8003da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da8:	f7fd fba2 	bl	80014f0 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db0:	f7fd fb9e 	bl	80014f0 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e17a      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc2:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <HAL_RCC_OscConfig+0x508>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d108      	bne.n	8003de8 <HAL_RCC_OscConfig+0x4d8>
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	4a0d      	ldr	r2, [pc, #52]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003de6:	e029      	b.n	8003e3c <HAL_RCC_OscConfig+0x52c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b05      	cmp	r3, #5
 8003dee:	d115      	bne.n	8003e1c <HAL_RCC_OscConfig+0x50c>
 8003df0:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	4a07      	ldr	r2, [pc, #28]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003df8:	f043 0304 	orr.w	r3, r3, #4
 8003dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e00:	4b04      	ldr	r3, [pc, #16]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e06:	4a03      	ldr	r2, [pc, #12]	; (8003e14 <HAL_RCC_OscConfig+0x504>)
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e10:	e014      	b.n	8003e3c <HAL_RCC_OscConfig+0x52c>
 8003e12:	bf00      	nop
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40007000 	.word	0x40007000
 8003e1c:	4b9c      	ldr	r3, [pc, #624]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e22:	4a9b      	ldr	r2, [pc, #620]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e2c:	4b98      	ldr	r3, [pc, #608]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e32:	4a97      	ldr	r2, [pc, #604]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8003e34:	f023 0304 	bic.w	r3, r3, #4
 8003e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d016      	beq.n	8003e72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e44:	f7fd fb54 	bl	80014f0 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4c:	f7fd fb50 	bl	80014f0 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e12a      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e62:	4b8b      	ldr	r3, [pc, #556]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8003e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0ed      	beq.n	8003e4c <HAL_RCC_OscConfig+0x53c>
 8003e70:	e015      	b.n	8003e9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e72:	f7fd fb3d 	bl	80014f0 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e78:	e00a      	b.n	8003e90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fd fb39 	bl	80014f0 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e113      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e90:	4b7f      	ldr	r3, [pc, #508]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1ed      	bne.n	8003e7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d105      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea4:	4b7a      	ldr	r3, [pc, #488]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea8:	4a79      	ldr	r2, [pc, #484]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8003eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 80fe 	beq.w	80040b6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	f040 80d0 	bne.w	8004064 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ec4:	4b72      	ldr	r3, [pc, #456]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f003 0203 	and.w	r2, r3, #3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d130      	bne.n	8003f3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d127      	bne.n	8003f3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d11f      	bne.n	8003f3a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f04:	2a07      	cmp	r2, #7
 8003f06:	bf14      	ite	ne
 8003f08:	2201      	movne	r2, #1
 8003f0a:	2200      	moveq	r2, #0
 8003f0c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d113      	bne.n	8003f3a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1c:	085b      	lsrs	r3, r3, #1
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d109      	bne.n	8003f3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	085b      	lsrs	r3, r3, #1
 8003f32:	3b01      	subs	r3, #1
 8003f34:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d06e      	beq.n	8004018 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	2b0c      	cmp	r3, #12
 8003f3e:	d069      	beq.n	8004014 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f40:	4b53      	ldr	r3, [pc, #332]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d105      	bne.n	8003f58 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f4c:	4b50      	ldr	r3, [pc, #320]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0ad      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f5c:	4b4c      	ldr	r3, [pc, #304]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a4b      	ldr	r2, [pc, #300]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8003f62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f66:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f68:	f7fd fac2 	bl	80014f0 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f70:	f7fd fabe 	bl	80014f0 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e09a      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f82:	4b43      	ldr	r3, [pc, #268]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f8e:	4b40      	ldr	r3, [pc, #256]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	4b40      	ldr	r3, [pc, #256]	; (8004094 <HAL_RCC_OscConfig+0x784>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f9e:	3a01      	subs	r2, #1
 8003fa0:	0112      	lsls	r2, r2, #4
 8003fa2:	4311      	orrs	r1, r2
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fa8:	0212      	lsls	r2, r2, #8
 8003faa:	4311      	orrs	r1, r2
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fb0:	0852      	lsrs	r2, r2, #1
 8003fb2:	3a01      	subs	r2, #1
 8003fb4:	0552      	lsls	r2, r2, #21
 8003fb6:	4311      	orrs	r1, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fbc:	0852      	lsrs	r2, r2, #1
 8003fbe:	3a01      	subs	r2, #1
 8003fc0:	0652      	lsls	r2, r2, #25
 8003fc2:	4311      	orrs	r1, r2
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fc8:	0912      	lsrs	r2, r2, #4
 8003fca:	0452      	lsls	r2, r2, #17
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	4930      	ldr	r1, [pc, #192]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fd4:	4b2e      	ldr	r3, [pc, #184]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a2d      	ldr	r2, [pc, #180]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8003fda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fde:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fe0:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4a2a      	ldr	r2, [pc, #168]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8003fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fec:	f7fd fa80 	bl	80014f0 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff4:	f7fd fa7c 	bl	80014f0 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e058      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004006:	4b22      	ldr	r3, [pc, #136]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004012:	e050      	b.n	80040b6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e04f      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004018:	4b1d      	ldr	r3, [pc, #116]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d148      	bne.n	80040b6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004024:	4b1a      	ldr	r3, [pc, #104]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a19      	ldr	r2, [pc, #100]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 800402a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800402e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004030:	4b17      	ldr	r3, [pc, #92]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4a16      	ldr	r2, [pc, #88]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8004036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800403a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800403c:	f7fd fa58 	bl	80014f0 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004044:	f7fd fa54 	bl	80014f0 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e030      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004056:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0x734>
 8004062:	e028      	b.n	80040b6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2b0c      	cmp	r3, #12
 8004068:	d023      	beq.n	80040b2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800406a:	4b09      	ldr	r3, [pc, #36]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a08      	ldr	r2, [pc, #32]	; (8004090 <HAL_RCC_OscConfig+0x780>)
 8004070:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004076:	f7fd fa3b 	bl	80014f0 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800407c:	e00c      	b.n	8004098 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800407e:	f7fd fa37 	bl	80014f0 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d905      	bls.n	8004098 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e013      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
 8004090:	40021000 	.word	0x40021000
 8004094:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004098:	4b09      	ldr	r3, [pc, #36]	; (80040c0 <HAL_RCC_OscConfig+0x7b0>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1ec      	bne.n	800407e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040a4:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <HAL_RCC_OscConfig+0x7b0>)
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	4905      	ldr	r1, [pc, #20]	; (80040c0 <HAL_RCC_OscConfig+0x7b0>)
 80040aa:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <HAL_RCC_OscConfig+0x7b4>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	60cb      	str	r3, [r1, #12]
 80040b0:	e001      	b.n	80040b6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3720      	adds	r7, #32
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40021000 	.word	0x40021000
 80040c4:	feeefffc 	.word	0xfeeefffc

080040c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0e7      	b.n	80042ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040dc:	4b75      	ldr	r3, [pc, #468]	; (80042b4 <HAL_RCC_ClockConfig+0x1ec>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d910      	bls.n	800410c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ea:	4b72      	ldr	r3, [pc, #456]	; (80042b4 <HAL_RCC_ClockConfig+0x1ec>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f023 0207 	bic.w	r2, r3, #7
 80040f2:	4970      	ldr	r1, [pc, #448]	; (80042b4 <HAL_RCC_ClockConfig+0x1ec>)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fa:	4b6e      	ldr	r3, [pc, #440]	; (80042b4 <HAL_RCC_ClockConfig+0x1ec>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d001      	beq.n	800410c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0cf      	b.n	80042ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d010      	beq.n	800413a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	4b66      	ldr	r3, [pc, #408]	; (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004124:	429a      	cmp	r2, r3
 8004126:	d908      	bls.n	800413a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004128:	4b63      	ldr	r3, [pc, #396]	; (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4960      	ldr	r1, [pc, #384]	; (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d04c      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b03      	cmp	r3, #3
 800414c:	d107      	bne.n	800415e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800414e:	4b5a      	ldr	r3, [pc, #360]	; (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d121      	bne.n	800419e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e0a6      	b.n	80042ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d107      	bne.n	8004176 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004166:	4b54      	ldr	r3, [pc, #336]	; (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d115      	bne.n	800419e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e09a      	b.n	80042ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d107      	bne.n	800418e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800417e:	4b4e      	ldr	r3, [pc, #312]	; (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e08e      	b.n	80042ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800418e:	4b4a      	ldr	r3, [pc, #296]	; (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e086      	b.n	80042ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800419e:	4b46      	ldr	r3, [pc, #280]	; (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f023 0203 	bic.w	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4943      	ldr	r1, [pc, #268]	; (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b0:	f7fd f99e 	bl	80014f0 <HAL_GetTick>
 80041b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b6:	e00a      	b.n	80041ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b8:	f7fd f99a 	bl	80014f0 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e06e      	b.n	80042ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	4b3a      	ldr	r3, [pc, #232]	; (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 020c 	and.w	r2, r3, #12
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	429a      	cmp	r2, r3
 80041de:	d1eb      	bne.n	80041b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d010      	beq.n	800420e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	4b31      	ldr	r3, [pc, #196]	; (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d208      	bcs.n	800420e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041fc:	4b2e      	ldr	r3, [pc, #184]	; (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	492b      	ldr	r1, [pc, #172]	; (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 800420a:	4313      	orrs	r3, r2
 800420c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800420e:	4b29      	ldr	r3, [pc, #164]	; (80042b4 <HAL_RCC_ClockConfig+0x1ec>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d210      	bcs.n	800423e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421c:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <HAL_RCC_ClockConfig+0x1ec>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f023 0207 	bic.w	r2, r3, #7
 8004224:	4923      	ldr	r1, [pc, #140]	; (80042b4 <HAL_RCC_ClockConfig+0x1ec>)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	4313      	orrs	r3, r2
 800422a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800422c:	4b21      	ldr	r3, [pc, #132]	; (80042b4 <HAL_RCC_ClockConfig+0x1ec>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d001      	beq.n	800423e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e036      	b.n	80042ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b00      	cmp	r3, #0
 8004248:	d008      	beq.n	800425c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800424a:	4b1b      	ldr	r3, [pc, #108]	; (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	4918      	ldr	r1, [pc, #96]	; (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004258:	4313      	orrs	r3, r2
 800425a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d009      	beq.n	800427c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004268:	4b13      	ldr	r3, [pc, #76]	; (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	4910      	ldr	r1, [pc, #64]	; (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004278:	4313      	orrs	r3, r2
 800427a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800427c:	f000 f824 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8004280:	4602      	mov	r2, r0
 8004282:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	091b      	lsrs	r3, r3, #4
 8004288:	f003 030f 	and.w	r3, r3, #15
 800428c:	490b      	ldr	r1, [pc, #44]	; (80042bc <HAL_RCC_ClockConfig+0x1f4>)
 800428e:	5ccb      	ldrb	r3, [r1, r3]
 8004290:	f003 031f 	and.w	r3, r3, #31
 8004294:	fa22 f303 	lsr.w	r3, r2, r3
 8004298:	4a09      	ldr	r2, [pc, #36]	; (80042c0 <HAL_RCC_ClockConfig+0x1f8>)
 800429a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800429c:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <HAL_RCC_ClockConfig+0x1fc>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fd f8d5 	bl	8001450 <HAL_InitTick>
 80042a6:	4603      	mov	r3, r0
 80042a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80042aa:	7afb      	ldrb	r3, [r7, #11]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40022000 	.word	0x40022000
 80042b8:	40021000 	.word	0x40021000
 80042bc:	08005fec 	.word	0x08005fec
 80042c0:	20000000 	.word	0x20000000
 80042c4:	20000004 	.word	0x20000004

080042c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b089      	sub	sp, #36	; 0x24
 80042cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	2300      	movs	r3, #0
 80042d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042d6:	4b3e      	ldr	r3, [pc, #248]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042e0:	4b3b      	ldr	r3, [pc, #236]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_RCC_GetSysClockFreq+0x34>
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	2b0c      	cmp	r3, #12
 80042f4:	d121      	bne.n	800433a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d11e      	bne.n	800433a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042fc:	4b34      	ldr	r3, [pc, #208]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	d107      	bne.n	8004318 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004308:	4b31      	ldr	r3, [pc, #196]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800430a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800430e:	0a1b      	lsrs	r3, r3, #8
 8004310:	f003 030f 	and.w	r3, r3, #15
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	e005      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004318:	4b2d      	ldr	r3, [pc, #180]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	091b      	lsrs	r3, r3, #4
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004324:	4a2b      	ldr	r2, [pc, #172]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10d      	bne.n	8004350 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004338:	e00a      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2b04      	cmp	r3, #4
 800433e:	d102      	bne.n	8004346 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004340:	4b25      	ldr	r3, [pc, #148]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004342:	61bb      	str	r3, [r7, #24]
 8004344:	e004      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b08      	cmp	r3, #8
 800434a:	d101      	bne.n	8004350 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800434c:	4b23      	ldr	r3, [pc, #140]	; (80043dc <HAL_RCC_GetSysClockFreq+0x114>)
 800434e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	2b0c      	cmp	r3, #12
 8004354:	d134      	bne.n	80043c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004356:	4b1e      	ldr	r3, [pc, #120]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d003      	beq.n	800436e <HAL_RCC_GetSysClockFreq+0xa6>
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b03      	cmp	r3, #3
 800436a:	d003      	beq.n	8004374 <HAL_RCC_GetSysClockFreq+0xac>
 800436c:	e005      	b.n	800437a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800436e:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004370:	617b      	str	r3, [r7, #20]
      break;
 8004372:	e005      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004374:	4b19      	ldr	r3, [pc, #100]	; (80043dc <HAL_RCC_GetSysClockFreq+0x114>)
 8004376:	617b      	str	r3, [r7, #20]
      break;
 8004378:	e002      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	617b      	str	r3, [r7, #20]
      break;
 800437e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004380:	4b13      	ldr	r3, [pc, #76]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	091b      	lsrs	r3, r3, #4
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	3301      	adds	r3, #1
 800438c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800438e:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	0a1b      	lsrs	r3, r3, #8
 8004394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	fb03 f202 	mul.w	r2, r3, r2
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043a6:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	0e5b      	lsrs	r3, r3, #25
 80043ac:	f003 0303 	and.w	r3, r3, #3
 80043b0:	3301      	adds	r3, #1
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80043be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043c0:	69bb      	ldr	r3, [r7, #24]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3724      	adds	r7, #36	; 0x24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40021000 	.word	0x40021000
 80043d4:	08006004 	.word	0x08006004
 80043d8:	00f42400 	.word	0x00f42400
 80043dc:	007a1200 	.word	0x007a1200

080043e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043e6:	681b      	ldr	r3, [r3, #0]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20000000 	.word	0x20000000

080043f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043fc:	f7ff fff0 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 8004400:	4602      	mov	r2, r0
 8004402:	4b06      	ldr	r3, [pc, #24]	; (800441c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	0a1b      	lsrs	r3, r3, #8
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	4904      	ldr	r1, [pc, #16]	; (8004420 <HAL_RCC_GetPCLK1Freq+0x28>)
 800440e:	5ccb      	ldrb	r3, [r1, r3]
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004418:	4618      	mov	r0, r3
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40021000 	.word	0x40021000
 8004420:	08005ffc 	.word	0x08005ffc

08004424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004428:	f7ff ffda 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 800442c:	4602      	mov	r2, r0
 800442e:	4b06      	ldr	r3, [pc, #24]	; (8004448 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	0adb      	lsrs	r3, r3, #11
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	4904      	ldr	r1, [pc, #16]	; (800444c <HAL_RCC_GetPCLK2Freq+0x28>)
 800443a:	5ccb      	ldrb	r3, [r1, r3]
 800443c:	f003 031f 	and.w	r3, r3, #31
 8004440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004444:	4618      	mov	r0, r3
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40021000 	.word	0x40021000
 800444c:	08005ffc 	.word	0x08005ffc

08004450 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004458:	2300      	movs	r3, #0
 800445a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800445c:	4b2a      	ldr	r3, [pc, #168]	; (8004508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800445e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004468:	f7ff f922 	bl	80036b0 <HAL_PWREx_GetVoltageRange>
 800446c:	6178      	str	r0, [r7, #20]
 800446e:	e014      	b.n	800449a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004470:	4b25      	ldr	r3, [pc, #148]	; (8004508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004474:	4a24      	ldr	r2, [pc, #144]	; (8004508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800447a:	6593      	str	r3, [r2, #88]	; 0x58
 800447c:	4b22      	ldr	r3, [pc, #136]	; (8004508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800447e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004488:	f7ff f912 	bl	80036b0 <HAL_PWREx_GetVoltageRange>
 800448c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800448e:	4b1e      	ldr	r3, [pc, #120]	; (8004508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004492:	4a1d      	ldr	r2, [pc, #116]	; (8004508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004498:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044a0:	d10b      	bne.n	80044ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b80      	cmp	r3, #128	; 0x80
 80044a6:	d919      	bls.n	80044dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2ba0      	cmp	r3, #160	; 0xa0
 80044ac:	d902      	bls.n	80044b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044ae:	2302      	movs	r3, #2
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	e013      	b.n	80044dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044b4:	2301      	movs	r3, #1
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	e010      	b.n	80044dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b80      	cmp	r3, #128	; 0x80
 80044be:	d902      	bls.n	80044c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044c0:	2303      	movs	r3, #3
 80044c2:	613b      	str	r3, [r7, #16]
 80044c4:	e00a      	b.n	80044dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b80      	cmp	r3, #128	; 0x80
 80044ca:	d102      	bne.n	80044d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044cc:	2302      	movs	r3, #2
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	e004      	b.n	80044dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b70      	cmp	r3, #112	; 0x70
 80044d6:	d101      	bne.n	80044dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044d8:	2301      	movs	r3, #1
 80044da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044dc:	4b0b      	ldr	r3, [pc, #44]	; (800450c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f023 0207 	bic.w	r2, r3, #7
 80044e4:	4909      	ldr	r1, [pc, #36]	; (800450c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044ec:	4b07      	ldr	r3, [pc, #28]	; (800450c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d001      	beq.n	80044fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e000      	b.n	8004500 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40021000 	.word	0x40021000
 800450c:	40022000 	.word	0x40022000

08004510 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004518:	2300      	movs	r3, #0
 800451a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800451c:	2300      	movs	r3, #0
 800451e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004528:	2b00      	cmp	r3, #0
 800452a:	d041      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004530:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004534:	d02a      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004536:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800453a:	d824      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800453c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004540:	d008      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004542:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004546:	d81e      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800454c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004550:	d010      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004552:	e018      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004554:	4b86      	ldr	r3, [pc, #536]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4a85      	ldr	r2, [pc, #532]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800455a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004560:	e015      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3304      	adds	r3, #4
 8004566:	2100      	movs	r1, #0
 8004568:	4618      	mov	r0, r3
 800456a:	f000 facb 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 800456e:	4603      	mov	r3, r0
 8004570:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004572:	e00c      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3320      	adds	r3, #32
 8004578:	2100      	movs	r1, #0
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fbb6 	bl	8004cec <RCCEx_PLLSAI2_Config>
 8004580:	4603      	mov	r3, r0
 8004582:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004584:	e003      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	74fb      	strb	r3, [r7, #19]
      break;
 800458a:	e000      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800458c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800458e:	7cfb      	ldrb	r3, [r7, #19]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10b      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004594:	4b76      	ldr	r3, [pc, #472]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045a2:	4973      	ldr	r1, [pc, #460]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045aa:	e001      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	7cfb      	ldrb	r3, [r7, #19]
 80045ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d041      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045c4:	d02a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80045c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045ca:	d824      	bhi.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045d0:	d008      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045d6:	d81e      	bhi.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80045dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045e0:	d010      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045e2:	e018      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045e4:	4b62      	ldr	r3, [pc, #392]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4a61      	ldr	r2, [pc, #388]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045f0:	e015      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3304      	adds	r3, #4
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 fa83 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 80045fe:	4603      	mov	r3, r0
 8004600:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004602:	e00c      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3320      	adds	r3, #32
 8004608:	2100      	movs	r1, #0
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fb6e 	bl	8004cec <RCCEx_PLLSAI2_Config>
 8004610:	4603      	mov	r3, r0
 8004612:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004614:	e003      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	74fb      	strb	r3, [r7, #19]
      break;
 800461a:	e000      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800461c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800461e:	7cfb      	ldrb	r3, [r7, #19]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10b      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004624:	4b52      	ldr	r3, [pc, #328]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004632:	494f      	ldr	r1, [pc, #316]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800463a:	e001      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463c:	7cfb      	ldrb	r3, [r7, #19]
 800463e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80a0 	beq.w	800478e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800464e:	2300      	movs	r3, #0
 8004650:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004652:	4b47      	ldr	r3, [pc, #284]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800465e:	2301      	movs	r3, #1
 8004660:	e000      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004662:	2300      	movs	r3, #0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00d      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004668:	4b41      	ldr	r3, [pc, #260]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466c:	4a40      	ldr	r2, [pc, #256]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004672:	6593      	str	r3, [r2, #88]	; 0x58
 8004674:	4b3e      	ldr	r3, [pc, #248]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467c:	60bb      	str	r3, [r7, #8]
 800467e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004680:	2301      	movs	r3, #1
 8004682:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004684:	4b3b      	ldr	r3, [pc, #236]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a3a      	ldr	r2, [pc, #232]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800468a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800468e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004690:	f7fc ff2e 	bl	80014f0 <HAL_GetTick>
 8004694:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004696:	e009      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004698:	f7fc ff2a 	bl	80014f0 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d902      	bls.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	74fb      	strb	r3, [r7, #19]
        break;
 80046aa:	e005      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046ac:	4b31      	ldr	r3, [pc, #196]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0ef      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80046b8:	7cfb      	ldrb	r3, [r7, #19]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d15c      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046be:	4b2c      	ldr	r3, [pc, #176]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01f      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d019      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046dc:	4b24      	ldr	r3, [pc, #144]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046e8:	4b21      	ldr	r3, [pc, #132]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ee:	4a20      	ldr	r2, [pc, #128]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046f8:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fe:	4a1c      	ldr	r2, [pc, #112]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004708:	4a19      	ldr	r2, [pc, #100]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d016      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471a:	f7fc fee9 	bl	80014f0 <HAL_GetTick>
 800471e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004720:	e00b      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004722:	f7fc fee5 	bl	80014f0 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004730:	4293      	cmp	r3, r2
 8004732:	d902      	bls.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	74fb      	strb	r3, [r7, #19]
            break;
 8004738:	e006      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800473a:	4b0d      	ldr	r3, [pc, #52]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800473c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0ec      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004748:	7cfb      	ldrb	r3, [r7, #19]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10c      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800474e:	4b08      	ldr	r3, [pc, #32]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800475e:	4904      	ldr	r1, [pc, #16]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004766:	e009      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004768:	7cfb      	ldrb	r3, [r7, #19]
 800476a:	74bb      	strb	r3, [r7, #18]
 800476c:	e006      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800476e:	bf00      	nop
 8004770:	40021000 	.word	0x40021000
 8004774:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004778:	7cfb      	ldrb	r3, [r7, #19]
 800477a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800477c:	7c7b      	ldrb	r3, [r7, #17]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d105      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004782:	4b9e      	ldr	r3, [pc, #632]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004786:	4a9d      	ldr	r2, [pc, #628]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800478c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800479a:	4b98      	ldr	r3, [pc, #608]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a0:	f023 0203 	bic.w	r2, r3, #3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	4994      	ldr	r1, [pc, #592]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047bc:	4b8f      	ldr	r3, [pc, #572]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c2:	f023 020c 	bic.w	r2, r3, #12
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ca:	498c      	ldr	r1, [pc, #560]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047de:	4b87      	ldr	r3, [pc, #540]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	4983      	ldr	r1, [pc, #524]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004800:	4b7e      	ldr	r3, [pc, #504]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004806:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	497b      	ldr	r1, [pc, #492]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0310 	and.w	r3, r3, #16
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004822:	4b76      	ldr	r3, [pc, #472]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004828:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004830:	4972      	ldr	r1, [pc, #456]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0320 	and.w	r3, r3, #32
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004844:	4b6d      	ldr	r3, [pc, #436]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004852:	496a      	ldr	r1, [pc, #424]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004866:	4b65      	ldr	r3, [pc, #404]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004874:	4961      	ldr	r1, [pc, #388]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004888:	4b5c      	ldr	r3, [pc, #368]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004896:	4959      	ldr	r1, [pc, #356]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048aa:	4b54      	ldr	r3, [pc, #336]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b8:	4950      	ldr	r1, [pc, #320]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048cc:	4b4b      	ldr	r3, [pc, #300]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048da:	4948      	ldr	r1, [pc, #288]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048ee:	4b43      	ldr	r3, [pc, #268]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fc:	493f      	ldr	r1, [pc, #252]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d028      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004910:	4b3a      	ldr	r3, [pc, #232]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800491e:	4937      	ldr	r1, [pc, #220]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800492a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800492e:	d106      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004930:	4b32      	ldr	r3, [pc, #200]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	4a31      	ldr	r2, [pc, #196]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004936:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800493a:	60d3      	str	r3, [r2, #12]
 800493c:	e011      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004942:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004946:	d10c      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3304      	adds	r3, #4
 800494c:	2101      	movs	r1, #1
 800494e:	4618      	mov	r0, r3
 8004950:	f000 f8d8 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 8004954:	4603      	mov	r3, r0
 8004956:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004958:	7cfb      	ldrb	r3, [r7, #19]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800495e:	7cfb      	ldrb	r3, [r7, #19]
 8004960:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d028      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800496e:	4b23      	ldr	r3, [pc, #140]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004974:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497c:	491f      	ldr	r1, [pc, #124]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004988:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800498c:	d106      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800498e:	4b1b      	ldr	r3, [pc, #108]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	4a1a      	ldr	r2, [pc, #104]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004994:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004998:	60d3      	str	r3, [r2, #12]
 800499a:	e011      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049a4:	d10c      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3304      	adds	r3, #4
 80049aa:	2101      	movs	r1, #1
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 f8a9 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 80049b2:	4603      	mov	r3, r0
 80049b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049b6:	7cfb      	ldrb	r3, [r7, #19]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80049bc:	7cfb      	ldrb	r3, [r7, #19]
 80049be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d02b      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049cc:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049da:	4908      	ldr	r1, [pc, #32]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ea:	d109      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049ec:	4b03      	ldr	r3, [pc, #12]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	4a02      	ldr	r2, [pc, #8]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049f6:	60d3      	str	r3, [r2, #12]
 80049f8:	e014      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80049fa:	bf00      	nop
 80049fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a08:	d10c      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	2101      	movs	r1, #1
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 f877 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 8004a16:	4603      	mov	r3, r0
 8004a18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a1a:	7cfb      	ldrb	r3, [r7, #19]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a20:	7cfb      	ldrb	r3, [r7, #19]
 8004a22:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d02f      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a30:	4b2b      	ldr	r3, [pc, #172]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a3e:	4928      	ldr	r1, [pc, #160]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a4e:	d10d      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3304      	adds	r3, #4
 8004a54:	2102      	movs	r1, #2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 f854 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a60:	7cfb      	ldrb	r3, [r7, #19]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d014      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a66:	7cfb      	ldrb	r3, [r7, #19]
 8004a68:	74bb      	strb	r3, [r7, #18]
 8004a6a:	e011      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a74:	d10c      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3320      	adds	r3, #32
 8004a7a:	2102      	movs	r1, #2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 f935 	bl	8004cec <RCCEx_PLLSAI2_Config>
 8004a82:	4603      	mov	r3, r0
 8004a84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a86:	7cfb      	ldrb	r3, [r7, #19]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a8c:	7cfb      	ldrb	r3, [r7, #19]
 8004a8e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a9c:	4b10      	ldr	r3, [pc, #64]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aaa:	490d      	ldr	r1, [pc, #52]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00b      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004abe:	4b08      	ldr	r3, [pc, #32]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ace:	4904      	ldr	r1, [pc, #16]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ad6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40021000 	.word	0x40021000

08004ae4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004ae8:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a04      	ldr	r2, [pc, #16]	; (8004b00 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004aee:	f043 0304 	orr.w	r3, r3, #4
 8004af2:	6013      	str	r3, [r2, #0]
}
 8004af4:	bf00      	nop
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40021000 	.word	0x40021000

08004b04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b12:	4b75      	ldr	r3, [pc, #468]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d018      	beq.n	8004b50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b1e:	4b72      	ldr	r3, [pc, #456]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f003 0203 	and.w	r2, r3, #3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d10d      	bne.n	8004b4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
       ||
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b36:	4b6c      	ldr	r3, [pc, #432]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	091b      	lsrs	r3, r3, #4
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
       ||
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d047      	beq.n	8004bda <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	73fb      	strb	r3, [r7, #15]
 8004b4e:	e044      	b.n	8004bda <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d018      	beq.n	8004b8a <RCCEx_PLLSAI1_Config+0x86>
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d825      	bhi.n	8004ba8 <RCCEx_PLLSAI1_Config+0xa4>
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d002      	beq.n	8004b66 <RCCEx_PLLSAI1_Config+0x62>
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d009      	beq.n	8004b78 <RCCEx_PLLSAI1_Config+0x74>
 8004b64:	e020      	b.n	8004ba8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b66:	4b60      	ldr	r3, [pc, #384]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d11d      	bne.n	8004bae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b76:	e01a      	b.n	8004bae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b78:	4b5b      	ldr	r3, [pc, #364]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d116      	bne.n	8004bb2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b88:	e013      	b.n	8004bb2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b8a:	4b57      	ldr	r3, [pc, #348]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10f      	bne.n	8004bb6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b96:	4b54      	ldr	r3, [pc, #336]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d109      	bne.n	8004bb6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ba6:	e006      	b.n	8004bb6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	73fb      	strb	r3, [r7, #15]
      break;
 8004bac:	e004      	b.n	8004bb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bae:	bf00      	nop
 8004bb0:	e002      	b.n	8004bb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bb2:	bf00      	nop
 8004bb4:	e000      	b.n	8004bb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10d      	bne.n	8004bda <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bbe:	4b4a      	ldr	r3, [pc, #296]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6819      	ldr	r1, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	011b      	lsls	r3, r3, #4
 8004bd2:	430b      	orrs	r3, r1
 8004bd4:	4944      	ldr	r1, [pc, #272]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d17d      	bne.n	8004cdc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004be0:	4b41      	ldr	r3, [pc, #260]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a40      	ldr	r2, [pc, #256]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bec:	f7fc fc80 	bl	80014f0 <HAL_GetTick>
 8004bf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bf2:	e009      	b.n	8004c08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bf4:	f7fc fc7c 	bl	80014f0 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d902      	bls.n	8004c08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	73fb      	strb	r3, [r7, #15]
        break;
 8004c06:	e005      	b.n	8004c14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c08:	4b37      	ldr	r3, [pc, #220]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1ef      	bne.n	8004bf4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d160      	bne.n	8004cdc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d111      	bne.n	8004c44 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c20:	4b31      	ldr	r3, [pc, #196]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6892      	ldr	r2, [r2, #8]
 8004c30:	0211      	lsls	r1, r2, #8
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68d2      	ldr	r2, [r2, #12]
 8004c36:	0912      	lsrs	r2, r2, #4
 8004c38:	0452      	lsls	r2, r2, #17
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	492a      	ldr	r1, [pc, #168]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	610b      	str	r3, [r1, #16]
 8004c42:	e027      	b.n	8004c94 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d112      	bne.n	8004c70 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c4a:	4b27      	ldr	r3, [pc, #156]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004c52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6892      	ldr	r2, [r2, #8]
 8004c5a:	0211      	lsls	r1, r2, #8
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6912      	ldr	r2, [r2, #16]
 8004c60:	0852      	lsrs	r2, r2, #1
 8004c62:	3a01      	subs	r2, #1
 8004c64:	0552      	lsls	r2, r2, #21
 8004c66:	430a      	orrs	r2, r1
 8004c68:	491f      	ldr	r1, [pc, #124]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	610b      	str	r3, [r1, #16]
 8004c6e:	e011      	b.n	8004c94 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c70:	4b1d      	ldr	r3, [pc, #116]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6892      	ldr	r2, [r2, #8]
 8004c80:	0211      	lsls	r1, r2, #8
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6952      	ldr	r2, [r2, #20]
 8004c86:	0852      	lsrs	r2, r2, #1
 8004c88:	3a01      	subs	r2, #1
 8004c8a:	0652      	lsls	r2, r2, #25
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	4916      	ldr	r1, [pc, #88]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c94:	4b14      	ldr	r3, [pc, #80]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a13      	ldr	r2, [pc, #76]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca0:	f7fc fc26 	bl	80014f0 <HAL_GetTick>
 8004ca4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ca6:	e009      	b.n	8004cbc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ca8:	f7fc fc22 	bl	80014f0 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d902      	bls.n	8004cbc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	73fb      	strb	r3, [r7, #15]
          break;
 8004cba:	e005      	b.n	8004cc8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0ef      	beq.n	8004ca8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d106      	bne.n	8004cdc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004cce:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	4904      	ldr	r1, [pc, #16]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40021000 	.word	0x40021000

08004cec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cfa:	4b6a      	ldr	r3, [pc, #424]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d018      	beq.n	8004d38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d06:	4b67      	ldr	r3, [pc, #412]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f003 0203 	and.w	r2, r3, #3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d10d      	bne.n	8004d32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
       ||
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d1e:	4b61      	ldr	r3, [pc, #388]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	091b      	lsrs	r3, r3, #4
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
       ||
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d047      	beq.n	8004dc2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	73fb      	strb	r3, [r7, #15]
 8004d36:	e044      	b.n	8004dc2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d018      	beq.n	8004d72 <RCCEx_PLLSAI2_Config+0x86>
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	d825      	bhi.n	8004d90 <RCCEx_PLLSAI2_Config+0xa4>
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d002      	beq.n	8004d4e <RCCEx_PLLSAI2_Config+0x62>
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d009      	beq.n	8004d60 <RCCEx_PLLSAI2_Config+0x74>
 8004d4c:	e020      	b.n	8004d90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d4e:	4b55      	ldr	r3, [pc, #340]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d11d      	bne.n	8004d96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d5e:	e01a      	b.n	8004d96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d60:	4b50      	ldr	r3, [pc, #320]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d116      	bne.n	8004d9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d70:	e013      	b.n	8004d9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d72:	4b4c      	ldr	r3, [pc, #304]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10f      	bne.n	8004d9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d7e:	4b49      	ldr	r3, [pc, #292]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d109      	bne.n	8004d9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d8e:	e006      	b.n	8004d9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	73fb      	strb	r3, [r7, #15]
      break;
 8004d94:	e004      	b.n	8004da0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d96:	bf00      	nop
 8004d98:	e002      	b.n	8004da0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d9a:	bf00      	nop
 8004d9c:	e000      	b.n	8004da0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10d      	bne.n	8004dc2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004da6:	4b3f      	ldr	r3, [pc, #252]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6819      	ldr	r1, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	430b      	orrs	r3, r1
 8004dbc:	4939      	ldr	r1, [pc, #228]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d167      	bne.n	8004e98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004dc8:	4b36      	ldr	r3, [pc, #216]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a35      	ldr	r2, [pc, #212]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd4:	f7fc fb8c 	bl	80014f0 <HAL_GetTick>
 8004dd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dda:	e009      	b.n	8004df0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ddc:	f7fc fb88 	bl	80014f0 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d902      	bls.n	8004df0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	73fb      	strb	r3, [r7, #15]
        break;
 8004dee:	e005      	b.n	8004dfc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004df0:	4b2c      	ldr	r3, [pc, #176]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1ef      	bne.n	8004ddc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d14a      	bne.n	8004e98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d111      	bne.n	8004e2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e08:	4b26      	ldr	r3, [pc, #152]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6892      	ldr	r2, [r2, #8]
 8004e18:	0211      	lsls	r1, r2, #8
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	68d2      	ldr	r2, [r2, #12]
 8004e1e:	0912      	lsrs	r2, r2, #4
 8004e20:	0452      	lsls	r2, r2, #17
 8004e22:	430a      	orrs	r2, r1
 8004e24:	491f      	ldr	r1, [pc, #124]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	614b      	str	r3, [r1, #20]
 8004e2a:	e011      	b.n	8004e50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6892      	ldr	r2, [r2, #8]
 8004e3c:	0211      	lsls	r1, r2, #8
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6912      	ldr	r2, [r2, #16]
 8004e42:	0852      	lsrs	r2, r2, #1
 8004e44:	3a01      	subs	r2, #1
 8004e46:	0652      	lsls	r2, r2, #25
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	4916      	ldr	r1, [pc, #88]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e50:	4b14      	ldr	r3, [pc, #80]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a13      	ldr	r2, [pc, #76]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5c:	f7fc fb48 	bl	80014f0 <HAL_GetTick>
 8004e60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e62:	e009      	b.n	8004e78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e64:	f7fc fb44 	bl	80014f0 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d902      	bls.n	8004e78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	73fb      	strb	r3, [r7, #15]
          break;
 8004e76:	e005      	b.n	8004e84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e78:	4b0a      	ldr	r3, [pc, #40]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0ef      	beq.n	8004e64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e8a:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e8c:	695a      	ldr	r2, [r3, #20]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	4904      	ldr	r1, [pc, #16]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40021000 	.word	0x40021000

08004ea8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e095      	b.n	8004fe6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d108      	bne.n	8004ed4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eca:	d009      	beq.n	8004ee0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	61da      	str	r2, [r3, #28]
 8004ed2:	e005      	b.n	8004ee0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7fc f8ac 	bl	8001058 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f20:	d902      	bls.n	8004f28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	e002      	b.n	8004f2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f36:	d007      	beq.n	8004f48 <HAL_SPI_Init+0xa0>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f40:	d002      	beq.n	8004f48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	431a      	orrs	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f8a:	ea42 0103 	orr.w	r1, r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	0c1b      	lsrs	r3, r3, #16
 8004fa4:	f003 0204 	and.w	r2, r3, #4
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb6:	f003 0308 	and.w	r3, r3, #8
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004fc4:	ea42 0103 	orr.w	r1, r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b082      	sub	sp, #8
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e040      	b.n	8005082 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005004:	2b00      	cmp	r3, #0
 8005006:	d106      	bne.n	8005016 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7fc f865 	bl	80010e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2224      	movs	r2, #36	; 0x24
 800501a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0201 	bic.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fae1 	bl	80055fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f826 	bl	800508c <UART_SetConfig>
 8005040:	4603      	mov	r3, r0
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e01b      	b.n	8005082 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005058:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005068:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0201 	orr.w	r2, r2, #1
 8005078:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fb60 	bl	8005740 <UART_CheckIdleState>
 8005080:	4603      	mov	r3, r0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800508c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005090:	b08a      	sub	sp, #40	; 0x28
 8005092:	af00      	add	r7, sp, #0
 8005094:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	431a      	orrs	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	431a      	orrs	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4ba4      	ldr	r3, [pc, #656]	; (800534c <UART_SetConfig+0x2c0>)
 80050bc:	4013      	ands	r3, r2
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	6812      	ldr	r2, [r2, #0]
 80050c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050c4:	430b      	orrs	r3, r1
 80050c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a99      	ldr	r2, [pc, #612]	; (8005350 <UART_SetConfig+0x2c4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d004      	beq.n	80050f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f4:	4313      	orrs	r3, r2
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005108:	430a      	orrs	r2, r1
 800510a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a90      	ldr	r2, [pc, #576]	; (8005354 <UART_SetConfig+0x2c8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d126      	bne.n	8005164 <UART_SetConfig+0xd8>
 8005116:	4b90      	ldr	r3, [pc, #576]	; (8005358 <UART_SetConfig+0x2cc>)
 8005118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511c:	f003 0303 	and.w	r3, r3, #3
 8005120:	2b03      	cmp	r3, #3
 8005122:	d81b      	bhi.n	800515c <UART_SetConfig+0xd0>
 8005124:	a201      	add	r2, pc, #4	; (adr r2, 800512c <UART_SetConfig+0xa0>)
 8005126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512a:	bf00      	nop
 800512c:	0800513d 	.word	0x0800513d
 8005130:	0800514d 	.word	0x0800514d
 8005134:	08005145 	.word	0x08005145
 8005138:	08005155 	.word	0x08005155
 800513c:	2301      	movs	r3, #1
 800513e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005142:	e116      	b.n	8005372 <UART_SetConfig+0x2e6>
 8005144:	2302      	movs	r3, #2
 8005146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800514a:	e112      	b.n	8005372 <UART_SetConfig+0x2e6>
 800514c:	2304      	movs	r3, #4
 800514e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005152:	e10e      	b.n	8005372 <UART_SetConfig+0x2e6>
 8005154:	2308      	movs	r3, #8
 8005156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800515a:	e10a      	b.n	8005372 <UART_SetConfig+0x2e6>
 800515c:	2310      	movs	r3, #16
 800515e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005162:	e106      	b.n	8005372 <UART_SetConfig+0x2e6>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a7c      	ldr	r2, [pc, #496]	; (800535c <UART_SetConfig+0x2d0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d138      	bne.n	80051e0 <UART_SetConfig+0x154>
 800516e:	4b7a      	ldr	r3, [pc, #488]	; (8005358 <UART_SetConfig+0x2cc>)
 8005170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005174:	f003 030c 	and.w	r3, r3, #12
 8005178:	2b0c      	cmp	r3, #12
 800517a:	d82d      	bhi.n	80051d8 <UART_SetConfig+0x14c>
 800517c:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <UART_SetConfig+0xf8>)
 800517e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005182:	bf00      	nop
 8005184:	080051b9 	.word	0x080051b9
 8005188:	080051d9 	.word	0x080051d9
 800518c:	080051d9 	.word	0x080051d9
 8005190:	080051d9 	.word	0x080051d9
 8005194:	080051c9 	.word	0x080051c9
 8005198:	080051d9 	.word	0x080051d9
 800519c:	080051d9 	.word	0x080051d9
 80051a0:	080051d9 	.word	0x080051d9
 80051a4:	080051c1 	.word	0x080051c1
 80051a8:	080051d9 	.word	0x080051d9
 80051ac:	080051d9 	.word	0x080051d9
 80051b0:	080051d9 	.word	0x080051d9
 80051b4:	080051d1 	.word	0x080051d1
 80051b8:	2300      	movs	r3, #0
 80051ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051be:	e0d8      	b.n	8005372 <UART_SetConfig+0x2e6>
 80051c0:	2302      	movs	r3, #2
 80051c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c6:	e0d4      	b.n	8005372 <UART_SetConfig+0x2e6>
 80051c8:	2304      	movs	r3, #4
 80051ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ce:	e0d0      	b.n	8005372 <UART_SetConfig+0x2e6>
 80051d0:	2308      	movs	r3, #8
 80051d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d6:	e0cc      	b.n	8005372 <UART_SetConfig+0x2e6>
 80051d8:	2310      	movs	r3, #16
 80051da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051de:	e0c8      	b.n	8005372 <UART_SetConfig+0x2e6>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a5e      	ldr	r2, [pc, #376]	; (8005360 <UART_SetConfig+0x2d4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d125      	bne.n	8005236 <UART_SetConfig+0x1aa>
 80051ea:	4b5b      	ldr	r3, [pc, #364]	; (8005358 <UART_SetConfig+0x2cc>)
 80051ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051f4:	2b30      	cmp	r3, #48	; 0x30
 80051f6:	d016      	beq.n	8005226 <UART_SetConfig+0x19a>
 80051f8:	2b30      	cmp	r3, #48	; 0x30
 80051fa:	d818      	bhi.n	800522e <UART_SetConfig+0x1a2>
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	d00a      	beq.n	8005216 <UART_SetConfig+0x18a>
 8005200:	2b20      	cmp	r3, #32
 8005202:	d814      	bhi.n	800522e <UART_SetConfig+0x1a2>
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <UART_SetConfig+0x182>
 8005208:	2b10      	cmp	r3, #16
 800520a:	d008      	beq.n	800521e <UART_SetConfig+0x192>
 800520c:	e00f      	b.n	800522e <UART_SetConfig+0x1a2>
 800520e:	2300      	movs	r3, #0
 8005210:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005214:	e0ad      	b.n	8005372 <UART_SetConfig+0x2e6>
 8005216:	2302      	movs	r3, #2
 8005218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800521c:	e0a9      	b.n	8005372 <UART_SetConfig+0x2e6>
 800521e:	2304      	movs	r3, #4
 8005220:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005224:	e0a5      	b.n	8005372 <UART_SetConfig+0x2e6>
 8005226:	2308      	movs	r3, #8
 8005228:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800522c:	e0a1      	b.n	8005372 <UART_SetConfig+0x2e6>
 800522e:	2310      	movs	r3, #16
 8005230:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005234:	e09d      	b.n	8005372 <UART_SetConfig+0x2e6>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a4a      	ldr	r2, [pc, #296]	; (8005364 <UART_SetConfig+0x2d8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d125      	bne.n	800528c <UART_SetConfig+0x200>
 8005240:	4b45      	ldr	r3, [pc, #276]	; (8005358 <UART_SetConfig+0x2cc>)
 8005242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005246:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800524a:	2bc0      	cmp	r3, #192	; 0xc0
 800524c:	d016      	beq.n	800527c <UART_SetConfig+0x1f0>
 800524e:	2bc0      	cmp	r3, #192	; 0xc0
 8005250:	d818      	bhi.n	8005284 <UART_SetConfig+0x1f8>
 8005252:	2b80      	cmp	r3, #128	; 0x80
 8005254:	d00a      	beq.n	800526c <UART_SetConfig+0x1e0>
 8005256:	2b80      	cmp	r3, #128	; 0x80
 8005258:	d814      	bhi.n	8005284 <UART_SetConfig+0x1f8>
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <UART_SetConfig+0x1d8>
 800525e:	2b40      	cmp	r3, #64	; 0x40
 8005260:	d008      	beq.n	8005274 <UART_SetConfig+0x1e8>
 8005262:	e00f      	b.n	8005284 <UART_SetConfig+0x1f8>
 8005264:	2300      	movs	r3, #0
 8005266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800526a:	e082      	b.n	8005372 <UART_SetConfig+0x2e6>
 800526c:	2302      	movs	r3, #2
 800526e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005272:	e07e      	b.n	8005372 <UART_SetConfig+0x2e6>
 8005274:	2304      	movs	r3, #4
 8005276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527a:	e07a      	b.n	8005372 <UART_SetConfig+0x2e6>
 800527c:	2308      	movs	r3, #8
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005282:	e076      	b.n	8005372 <UART_SetConfig+0x2e6>
 8005284:	2310      	movs	r3, #16
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528a:	e072      	b.n	8005372 <UART_SetConfig+0x2e6>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a35      	ldr	r2, [pc, #212]	; (8005368 <UART_SetConfig+0x2dc>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d12a      	bne.n	80052ec <UART_SetConfig+0x260>
 8005296:	4b30      	ldr	r3, [pc, #192]	; (8005358 <UART_SetConfig+0x2cc>)
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052a4:	d01a      	beq.n	80052dc <UART_SetConfig+0x250>
 80052a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052aa:	d81b      	bhi.n	80052e4 <UART_SetConfig+0x258>
 80052ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b0:	d00c      	beq.n	80052cc <UART_SetConfig+0x240>
 80052b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b6:	d815      	bhi.n	80052e4 <UART_SetConfig+0x258>
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <UART_SetConfig+0x238>
 80052bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c0:	d008      	beq.n	80052d4 <UART_SetConfig+0x248>
 80052c2:	e00f      	b.n	80052e4 <UART_SetConfig+0x258>
 80052c4:	2300      	movs	r3, #0
 80052c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ca:	e052      	b.n	8005372 <UART_SetConfig+0x2e6>
 80052cc:	2302      	movs	r3, #2
 80052ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d2:	e04e      	b.n	8005372 <UART_SetConfig+0x2e6>
 80052d4:	2304      	movs	r3, #4
 80052d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052da:	e04a      	b.n	8005372 <UART_SetConfig+0x2e6>
 80052dc:	2308      	movs	r3, #8
 80052de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e2:	e046      	b.n	8005372 <UART_SetConfig+0x2e6>
 80052e4:	2310      	movs	r3, #16
 80052e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ea:	e042      	b.n	8005372 <UART_SetConfig+0x2e6>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a17      	ldr	r2, [pc, #92]	; (8005350 <UART_SetConfig+0x2c4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d13a      	bne.n	800536c <UART_SetConfig+0x2e0>
 80052f6:	4b18      	ldr	r3, [pc, #96]	; (8005358 <UART_SetConfig+0x2cc>)
 80052f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005300:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005304:	d01a      	beq.n	800533c <UART_SetConfig+0x2b0>
 8005306:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800530a:	d81b      	bhi.n	8005344 <UART_SetConfig+0x2b8>
 800530c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005310:	d00c      	beq.n	800532c <UART_SetConfig+0x2a0>
 8005312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005316:	d815      	bhi.n	8005344 <UART_SetConfig+0x2b8>
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <UART_SetConfig+0x298>
 800531c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005320:	d008      	beq.n	8005334 <UART_SetConfig+0x2a8>
 8005322:	e00f      	b.n	8005344 <UART_SetConfig+0x2b8>
 8005324:	2300      	movs	r3, #0
 8005326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800532a:	e022      	b.n	8005372 <UART_SetConfig+0x2e6>
 800532c:	2302      	movs	r3, #2
 800532e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005332:	e01e      	b.n	8005372 <UART_SetConfig+0x2e6>
 8005334:	2304      	movs	r3, #4
 8005336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800533a:	e01a      	b.n	8005372 <UART_SetConfig+0x2e6>
 800533c:	2308      	movs	r3, #8
 800533e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005342:	e016      	b.n	8005372 <UART_SetConfig+0x2e6>
 8005344:	2310      	movs	r3, #16
 8005346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800534a:	e012      	b.n	8005372 <UART_SetConfig+0x2e6>
 800534c:	efff69f3 	.word	0xefff69f3
 8005350:	40008000 	.word	0x40008000
 8005354:	40013800 	.word	0x40013800
 8005358:	40021000 	.word	0x40021000
 800535c:	40004400 	.word	0x40004400
 8005360:	40004800 	.word	0x40004800
 8005364:	40004c00 	.word	0x40004c00
 8005368:	40005000 	.word	0x40005000
 800536c:	2310      	movs	r3, #16
 800536e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a9f      	ldr	r2, [pc, #636]	; (80055f4 <UART_SetConfig+0x568>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d17a      	bne.n	8005472 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800537c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005380:	2b08      	cmp	r3, #8
 8005382:	d824      	bhi.n	80053ce <UART_SetConfig+0x342>
 8005384:	a201      	add	r2, pc, #4	; (adr r2, 800538c <UART_SetConfig+0x300>)
 8005386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538a:	bf00      	nop
 800538c:	080053b1 	.word	0x080053b1
 8005390:	080053cf 	.word	0x080053cf
 8005394:	080053b9 	.word	0x080053b9
 8005398:	080053cf 	.word	0x080053cf
 800539c:	080053bf 	.word	0x080053bf
 80053a0:	080053cf 	.word	0x080053cf
 80053a4:	080053cf 	.word	0x080053cf
 80053a8:	080053cf 	.word	0x080053cf
 80053ac:	080053c7 	.word	0x080053c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b0:	f7ff f822 	bl	80043f8 <HAL_RCC_GetPCLK1Freq>
 80053b4:	61f8      	str	r0, [r7, #28]
        break;
 80053b6:	e010      	b.n	80053da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053b8:	4b8f      	ldr	r3, [pc, #572]	; (80055f8 <UART_SetConfig+0x56c>)
 80053ba:	61fb      	str	r3, [r7, #28]
        break;
 80053bc:	e00d      	b.n	80053da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053be:	f7fe ff83 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 80053c2:	61f8      	str	r0, [r7, #28]
        break;
 80053c4:	e009      	b.n	80053da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ca:	61fb      	str	r3, [r7, #28]
        break;
 80053cc:	e005      	b.n	80053da <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 80fb 	beq.w	80055d8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	4613      	mov	r3, r2
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	4413      	add	r3, r2
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d305      	bcc.n	80053fe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053f8:	69fa      	ldr	r2, [r7, #28]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d903      	bls.n	8005406 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005404:	e0e8      	b.n	80055d8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	2200      	movs	r2, #0
 800540a:	461c      	mov	r4, r3
 800540c:	4615      	mov	r5, r2
 800540e:	f04f 0200 	mov.w	r2, #0
 8005412:	f04f 0300 	mov.w	r3, #0
 8005416:	022b      	lsls	r3, r5, #8
 8005418:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800541c:	0222      	lsls	r2, r4, #8
 800541e:	68f9      	ldr	r1, [r7, #12]
 8005420:	6849      	ldr	r1, [r1, #4]
 8005422:	0849      	lsrs	r1, r1, #1
 8005424:	2000      	movs	r0, #0
 8005426:	4688      	mov	r8, r1
 8005428:	4681      	mov	r9, r0
 800542a:	eb12 0a08 	adds.w	sl, r2, r8
 800542e:	eb43 0b09 	adc.w	fp, r3, r9
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	603b      	str	r3, [r7, #0]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005440:	4650      	mov	r0, sl
 8005442:	4659      	mov	r1, fp
 8005444:	f7fa fec0 	bl	80001c8 <__aeabi_uldivmod>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4613      	mov	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005456:	d308      	bcc.n	800546a <UART_SetConfig+0x3de>
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800545e:	d204      	bcs.n	800546a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	60da      	str	r2, [r3, #12]
 8005468:	e0b6      	b.n	80055d8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005470:	e0b2      	b.n	80055d8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800547a:	d15e      	bne.n	800553a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800547c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005480:	2b08      	cmp	r3, #8
 8005482:	d828      	bhi.n	80054d6 <UART_SetConfig+0x44a>
 8005484:	a201      	add	r2, pc, #4	; (adr r2, 800548c <UART_SetConfig+0x400>)
 8005486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548a:	bf00      	nop
 800548c:	080054b1 	.word	0x080054b1
 8005490:	080054b9 	.word	0x080054b9
 8005494:	080054c1 	.word	0x080054c1
 8005498:	080054d7 	.word	0x080054d7
 800549c:	080054c7 	.word	0x080054c7
 80054a0:	080054d7 	.word	0x080054d7
 80054a4:	080054d7 	.word	0x080054d7
 80054a8:	080054d7 	.word	0x080054d7
 80054ac:	080054cf 	.word	0x080054cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054b0:	f7fe ffa2 	bl	80043f8 <HAL_RCC_GetPCLK1Freq>
 80054b4:	61f8      	str	r0, [r7, #28]
        break;
 80054b6:	e014      	b.n	80054e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054b8:	f7fe ffb4 	bl	8004424 <HAL_RCC_GetPCLK2Freq>
 80054bc:	61f8      	str	r0, [r7, #28]
        break;
 80054be:	e010      	b.n	80054e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054c0:	4b4d      	ldr	r3, [pc, #308]	; (80055f8 <UART_SetConfig+0x56c>)
 80054c2:	61fb      	str	r3, [r7, #28]
        break;
 80054c4:	e00d      	b.n	80054e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054c6:	f7fe feff 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 80054ca:	61f8      	str	r0, [r7, #28]
        break;
 80054cc:	e009      	b.n	80054e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054d2:	61fb      	str	r3, [r7, #28]
        break;
 80054d4:	e005      	b.n	80054e2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80054e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d077      	beq.n	80055d8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	005a      	lsls	r2, r3, #1
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	085b      	lsrs	r3, r3, #1
 80054f2:	441a      	add	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2b0f      	cmp	r3, #15
 8005502:	d916      	bls.n	8005532 <UART_SetConfig+0x4a6>
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800550a:	d212      	bcs.n	8005532 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	b29b      	uxth	r3, r3
 8005510:	f023 030f 	bic.w	r3, r3, #15
 8005514:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	085b      	lsrs	r3, r3, #1
 800551a:	b29b      	uxth	r3, r3
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	b29a      	uxth	r2, r3
 8005522:	8afb      	ldrh	r3, [r7, #22]
 8005524:	4313      	orrs	r3, r2
 8005526:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	8afa      	ldrh	r2, [r7, #22]
 800552e:	60da      	str	r2, [r3, #12]
 8005530:	e052      	b.n	80055d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005538:	e04e      	b.n	80055d8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800553a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800553e:	2b08      	cmp	r3, #8
 8005540:	d827      	bhi.n	8005592 <UART_SetConfig+0x506>
 8005542:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <UART_SetConfig+0x4bc>)
 8005544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005548:	0800556d 	.word	0x0800556d
 800554c:	08005575 	.word	0x08005575
 8005550:	0800557d 	.word	0x0800557d
 8005554:	08005593 	.word	0x08005593
 8005558:	08005583 	.word	0x08005583
 800555c:	08005593 	.word	0x08005593
 8005560:	08005593 	.word	0x08005593
 8005564:	08005593 	.word	0x08005593
 8005568:	0800558b 	.word	0x0800558b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800556c:	f7fe ff44 	bl	80043f8 <HAL_RCC_GetPCLK1Freq>
 8005570:	61f8      	str	r0, [r7, #28]
        break;
 8005572:	e014      	b.n	800559e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005574:	f7fe ff56 	bl	8004424 <HAL_RCC_GetPCLK2Freq>
 8005578:	61f8      	str	r0, [r7, #28]
        break;
 800557a:	e010      	b.n	800559e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800557c:	4b1e      	ldr	r3, [pc, #120]	; (80055f8 <UART_SetConfig+0x56c>)
 800557e:	61fb      	str	r3, [r7, #28]
        break;
 8005580:	e00d      	b.n	800559e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005582:	f7fe fea1 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8005586:	61f8      	str	r0, [r7, #28]
        break;
 8005588:	e009      	b.n	800559e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800558a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800558e:	61fb      	str	r3, [r7, #28]
        break;
 8005590:	e005      	b.n	800559e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800559c:	bf00      	nop
    }

    if (pclk != 0U)
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d019      	beq.n	80055d8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	085a      	lsrs	r2, r3, #1
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	441a      	add	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2b0f      	cmp	r3, #15
 80055bc:	d909      	bls.n	80055d2 <UART_SetConfig+0x546>
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c4:	d205      	bcs.n	80055d2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60da      	str	r2, [r3, #12]
 80055d0:	e002      	b.n	80055d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80055e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3728      	adds	r7, #40	; 0x28
 80055ec:	46bd      	mov	sp, r7
 80055ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055f2:	bf00      	nop
 80055f4:	40008000 	.word	0x40008000
 80055f8:	00f42400 	.word	0x00f42400

080055fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00a      	beq.n	8005626 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00a      	beq.n	8005648 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00a      	beq.n	800566a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	f003 0304 	and.w	r3, r3, #4
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	f003 0310 	and.w	r3, r3, #16
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01a      	beq.n	8005712 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056fa:	d10a      	bne.n	8005712 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	605a      	str	r2, [r3, #4]
  }
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b098      	sub	sp, #96	; 0x60
 8005744:	af02      	add	r7, sp, #8
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005750:	f7fb fece 	bl	80014f0 <HAL_GetTick>
 8005754:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b08      	cmp	r3, #8
 8005762:	d12e      	bne.n	80057c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005764:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800576c:	2200      	movs	r2, #0
 800576e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f88c 	bl	8005890 <UART_WaitOnFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d021      	beq.n	80057c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005786:	e853 3f00 	ldrex	r3, [r3]
 800578a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800578c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005792:	653b      	str	r3, [r7, #80]	; 0x50
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	461a      	mov	r2, r3
 800579a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800579c:	647b      	str	r3, [r7, #68]	; 0x44
 800579e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057a4:	e841 2300 	strex	r3, r2, [r1]
 80057a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e6      	bne.n	800577e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2220      	movs	r2, #32
 80057b4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e062      	b.n	8005888 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	2b04      	cmp	r3, #4
 80057ce:	d149      	bne.n	8005864 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057d8:	2200      	movs	r2, #0
 80057da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f856 	bl	8005890 <UART_WaitOnFlagUntilTimeout>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d03c      	beq.n	8005864 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	e853 3f00 	ldrex	r3, [r3]
 80057f6:	623b      	str	r3, [r7, #32]
   return(result);
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	461a      	mov	r2, r3
 8005806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005808:	633b      	str	r3, [r7, #48]	; 0x30
 800580a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800580e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005810:	e841 2300 	strex	r3, r2, [r1]
 8005814:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e6      	bne.n	80057ea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3308      	adds	r3, #8
 8005822:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	60fb      	str	r3, [r7, #12]
   return(result);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0301 	bic.w	r3, r3, #1
 8005832:	64bb      	str	r3, [r7, #72]	; 0x48
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3308      	adds	r3, #8
 800583a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800583c:	61fa      	str	r2, [r7, #28]
 800583e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	69b9      	ldr	r1, [r7, #24]
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	e841 2300 	strex	r3, r2, [r1]
 8005848:	617b      	str	r3, [r7, #20]
   return(result);
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e5      	bne.n	800581c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e011      	b.n	8005888 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2220      	movs	r2, #32
 8005868:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2220      	movs	r2, #32
 800586e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3758      	adds	r7, #88	; 0x58
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	603b      	str	r3, [r7, #0]
 800589c:	4613      	mov	r3, r2
 800589e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058a0:	e049      	b.n	8005936 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058a8:	d045      	beq.n	8005936 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058aa:	f7fb fe21 	bl	80014f0 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d302      	bcc.n	80058c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e048      	b.n	8005956 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0304 	and.w	r3, r3, #4
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d031      	beq.n	8005936 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	69db      	ldr	r3, [r3, #28]
 80058d8:	f003 0308 	and.w	r3, r3, #8
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d110      	bne.n	8005902 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2208      	movs	r2, #8
 80058e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 f838 	bl	800595e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2208      	movs	r2, #8
 80058f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e029      	b.n	8005956 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800590c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005910:	d111      	bne.n	8005936 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800591a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 f81e 	bl	800595e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2220      	movs	r2, #32
 8005926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e00f      	b.n	8005956 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	69da      	ldr	r2, [r3, #28]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4013      	ands	r3, r2
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	429a      	cmp	r2, r3
 8005944:	bf0c      	ite	eq
 8005946:	2301      	moveq	r3, #1
 8005948:	2300      	movne	r3, #0
 800594a:	b2db      	uxtb	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	429a      	cmp	r2, r3
 8005952:	d0a6      	beq.n	80058a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800595e:	b480      	push	{r7}
 8005960:	b095      	sub	sp, #84	; 0x54
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596e:	e853 3f00 	ldrex	r3, [r3]
 8005972:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005976:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800597a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	461a      	mov	r2, r3
 8005982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005984:	643b      	str	r3, [r7, #64]	; 0x40
 8005986:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800598a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800598c:	e841 2300 	strex	r3, r2, [r1]
 8005990:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e6      	bne.n	8005966 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3308      	adds	r3, #8
 800599e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	e853 3f00 	ldrex	r3, [r3]
 80059a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	f023 0301 	bic.w	r3, r3, #1
 80059ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3308      	adds	r3, #8
 80059b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059c0:	e841 2300 	strex	r3, r2, [r1]
 80059c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e5      	bne.n	8005998 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d118      	bne.n	8005a06 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	e853 3f00 	ldrex	r3, [r3]
 80059e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f023 0310 	bic.w	r3, r3, #16
 80059e8:	647b      	str	r3, [r7, #68]	; 0x44
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059f2:	61bb      	str	r3, [r7, #24]
 80059f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	6979      	ldr	r1, [r7, #20]
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1e6      	bne.n	80059d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a1a:	bf00      	nop
 8005a1c:	3754      	adds	r7, #84	; 0x54
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a26:	b084      	sub	sp, #16
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	f107 001c 	add.w	r0, r7, #28
 8005a34:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 fa65 	bl	8005f14 <USB_CoreReset>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d106      	bne.n	8005a62 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	639a      	str	r2, [r3, #56]	; 0x38
 8005a60:	e005      	b.n	8005a6e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a7a:	b004      	add	sp, #16
 8005a7c:	4770      	bx	lr

08005a7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f023 0201 	bic.w	r2, r3, #1
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005abc:	78fb      	ldrb	r3, [r7, #3]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d115      	bne.n	8005aee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ace:	2001      	movs	r0, #1
 8005ad0:	f7fb fd1a 	bl	8001508 <HAL_Delay>
      ms++;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fa0c 	bl	8005ef8 <USB_GetMode>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d01e      	beq.n	8005b24 <USB_SetCurrentMode+0x84>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b31      	cmp	r3, #49	; 0x31
 8005aea:	d9f0      	bls.n	8005ace <USB_SetCurrentMode+0x2e>
 8005aec:	e01a      	b.n	8005b24 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005aee:	78fb      	ldrb	r3, [r7, #3]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d115      	bne.n	8005b20 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b00:	2001      	movs	r0, #1
 8005b02:	f7fb fd01 	bl	8001508 <HAL_Delay>
      ms++;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f9f3 	bl	8005ef8 <USB_GetMode>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <USB_SetCurrentMode+0x84>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b31      	cmp	r3, #49	; 0x31
 8005b1c:	d9f0      	bls.n	8005b00 <USB_SetCurrentMode+0x60>
 8005b1e:	e001      	b.n	8005b24 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e005      	b.n	8005b30 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b32      	cmp	r3, #50	; 0x32
 8005b28:	d101      	bne.n	8005b2e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e000      	b.n	8005b30 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b38:	b084      	sub	sp, #16
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b086      	sub	sp, #24
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b52:	2300      	movs	r3, #0
 8005b54:	613b      	str	r3, [r7, #16]
 8005b56:	e009      	b.n	8005b6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	3340      	adds	r3, #64	; 0x40
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	2200      	movs	r2, #0
 8005b64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	613b      	str	r3, [r7, #16]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2b0e      	cmp	r3, #14
 8005b70:	d9f2      	bls.n	8005b58 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d11c      	bne.n	8005bb2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b86:	f043 0302 	orr.w	r3, r3, #2
 8005b8a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b90:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	e005      	b.n	8005bbe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005bca:	2103      	movs	r1, #3
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f959 	bl	8005e84 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005bd2:	2110      	movs	r1, #16
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f8f1 	bl	8005dbc <USB_FlushTxFifo>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f91d 	bl	8005e24 <USB_FlushRxFifo>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c06:	461a      	mov	r2, r3
 8005c08:	2300      	movs	r3, #0
 8005c0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c12:	461a      	mov	r2, r3
 8005c14:	2300      	movs	r3, #0
 8005c16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c18:	2300      	movs	r3, #0
 8005c1a:	613b      	str	r3, [r7, #16]
 8005c1c:	e043      	b.n	8005ca6 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c34:	d118      	bne.n	8005c68 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10a      	bne.n	8005c52 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c48:	461a      	mov	r2, r3
 8005c4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c4e:	6013      	str	r3, [r2, #0]
 8005c50:	e013      	b.n	8005c7a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	e008      	b.n	8005c7a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c74:	461a      	mov	r2, r3
 8005c76:	2300      	movs	r3, #0
 8005c78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c86:	461a      	mov	r2, r3
 8005c88:	2300      	movs	r3, #0
 8005c8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c98:	461a      	mov	r2, r3
 8005c9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	613b      	str	r3, [r7, #16]
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d3b7      	bcc.n	8005c1e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cae:	2300      	movs	r3, #0
 8005cb0:	613b      	str	r3, [r7, #16]
 8005cb2:	e043      	b.n	8005d3c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cca:	d118      	bne.n	8005cfe <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cde:	461a      	mov	r2, r3
 8005ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	e013      	b.n	8005d10 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	e008      	b.n	8005d10 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	2300      	movs	r3, #0
 8005d20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	613b      	str	r3, [r7, #16]
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d3b7      	bcc.n	8005cb4 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d56:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d64:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	f043 0210 	orr.w	r2, r3, #16
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699a      	ldr	r2, [r3, #24]
 8005d76:	4b10      	ldr	r3, [pc, #64]	; (8005db8 <USB_DevInit+0x280>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d005      	beq.n	8005d90 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	f043 0208 	orr.w	r2, r3, #8
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d107      	bne.n	8005da6 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d9e:	f043 0304 	orr.w	r3, r3, #4
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005db2:	b004      	add	sp, #16
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	803c3800 	.word	0x803c3800

08005dbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4a13      	ldr	r2, [pc, #76]	; (8005e20 <USB_FlushTxFifo+0x64>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d901      	bls.n	8005ddc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e01b      	b.n	8005e14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	daf2      	bge.n	8005dca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	019b      	lsls	r3, r3, #6
 8005dec:	f043 0220 	orr.w	r2, r3, #32
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	3301      	adds	r3, #1
 8005df8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4a08      	ldr	r2, [pc, #32]	; (8005e20 <USB_FlushTxFifo+0x64>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d901      	bls.n	8005e06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e006      	b.n	8005e14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b20      	cmp	r3, #32
 8005e10:	d0f0      	beq.n	8005df4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	00030d40 	.word	0x00030d40

08005e24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	3301      	adds	r3, #1
 8005e34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4a11      	ldr	r2, [pc, #68]	; (8005e80 <USB_FlushRxFifo+0x5c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d901      	bls.n	8005e42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e018      	b.n	8005e74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	daf2      	bge.n	8005e30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2210      	movs	r2, #16
 8005e52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	3301      	adds	r3, #1
 8005e58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4a08      	ldr	r2, [pc, #32]	; (8005e80 <USB_FlushRxFifo+0x5c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d901      	bls.n	8005e66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e006      	b.n	8005e74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f003 0310 	and.w	r3, r3, #16
 8005e6e:	2b10      	cmp	r3, #16
 8005e70:	d0f0      	beq.n	8005e54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	00030d40 	.word	0x00030d40

08005e84 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	68f9      	ldr	r1, [r7, #12]
 8005ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ed0:	f023 0303 	bic.w	r3, r3, #3
 8005ed4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ee4:	f043 0302 	orr.w	r3, r3, #2
 8005ee8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	f003 0301 	and.w	r3, r3, #1
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	3301      	adds	r3, #1
 8005f24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4a13      	ldr	r2, [pc, #76]	; (8005f78 <USB_CoreReset+0x64>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d901      	bls.n	8005f32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e01b      	b.n	8005f6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	daf2      	bge.n	8005f20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	f043 0201 	orr.w	r2, r3, #1
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4a09      	ldr	r2, [pc, #36]	; (8005f78 <USB_CoreReset+0x64>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d901      	bls.n	8005f5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e006      	b.n	8005f6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d0f0      	beq.n	8005f4a <USB_CoreReset+0x36>

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	00030d40 	.word	0x00030d40

08005f7c <memset>:
 8005f7c:	4402      	add	r2, r0
 8005f7e:	4603      	mov	r3, r0
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d100      	bne.n	8005f86 <memset+0xa>
 8005f84:	4770      	bx	lr
 8005f86:	f803 1b01 	strb.w	r1, [r3], #1
 8005f8a:	e7f9      	b.n	8005f80 <memset+0x4>

08005f8c <__libc_init_array>:
 8005f8c:	b570      	push	{r4, r5, r6, lr}
 8005f8e:	4d0d      	ldr	r5, [pc, #52]	; (8005fc4 <__libc_init_array+0x38>)
 8005f90:	4c0d      	ldr	r4, [pc, #52]	; (8005fc8 <__libc_init_array+0x3c>)
 8005f92:	1b64      	subs	r4, r4, r5
 8005f94:	10a4      	asrs	r4, r4, #2
 8005f96:	2600      	movs	r6, #0
 8005f98:	42a6      	cmp	r6, r4
 8005f9a:	d109      	bne.n	8005fb0 <__libc_init_array+0x24>
 8005f9c:	4d0b      	ldr	r5, [pc, #44]	; (8005fcc <__libc_init_array+0x40>)
 8005f9e:	4c0c      	ldr	r4, [pc, #48]	; (8005fd0 <__libc_init_array+0x44>)
 8005fa0:	f000 f818 	bl	8005fd4 <_init>
 8005fa4:	1b64      	subs	r4, r4, r5
 8005fa6:	10a4      	asrs	r4, r4, #2
 8005fa8:	2600      	movs	r6, #0
 8005faa:	42a6      	cmp	r6, r4
 8005fac:	d105      	bne.n	8005fba <__libc_init_array+0x2e>
 8005fae:	bd70      	pop	{r4, r5, r6, pc}
 8005fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fb4:	4798      	blx	r3
 8005fb6:	3601      	adds	r6, #1
 8005fb8:	e7ee      	b.n	8005f98 <__libc_init_array+0xc>
 8005fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fbe:	4798      	blx	r3
 8005fc0:	3601      	adds	r6, #1
 8005fc2:	e7f2      	b.n	8005faa <__libc_init_array+0x1e>
 8005fc4:	0800603c 	.word	0x0800603c
 8005fc8:	0800603c 	.word	0x0800603c
 8005fcc:	0800603c 	.word	0x0800603c
 8005fd0:	08006040 	.word	0x08006040

08005fd4 <_init>:
 8005fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd6:	bf00      	nop
 8005fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fda:	bc08      	pop	{r3}
 8005fdc:	469e      	mov	lr, r3
 8005fde:	4770      	bx	lr

08005fe0 <_fini>:
 8005fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe2:	bf00      	nop
 8005fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe6:	bc08      	pop	{r3}
 8005fe8:	469e      	mov	lr, r3
 8005fea:	4770      	bx	lr

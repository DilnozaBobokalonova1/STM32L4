
HelloFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08009840  08009840  00019840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c84  08009c84  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009c84  08009c84  00019c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c8c  08009c8c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c8c  08009c8c  00019c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c90  08009c90  00019c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d4  200001e8  08009e7c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bbc  08009e7c  00020bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019f85  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003666  00000000  00000000  0003a1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f8  00000000  00000000  0003d848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000127c  00000000  00000000  0003f040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029927  00000000  00000000  000402bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b2b2  00000000  00000000  00069be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f79b8  00000000  00000000  00084e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007714  00000000  00000000  0017c850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00183f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009828 	.word	0x08009828

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009828 	.word	0x08009828

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <LL_GetUID_Word0>:
/**
  * @brief  Get Word0 of the unique device identifier (UID based on 96 bits)
  * @retval UID[31:0]: X and Y coordinates on the wafer expressed in BCD format
  */
__STATIC_INLINE uint32_t LL_GetUID_Word0(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID_BASE_ADDRESS)));
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <LL_GetUID_Word0+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	1fff7590 	.word	0x1fff7590

08000ebc <LL_GetUID_Word1>:
/**
  * @brief  Get Word1 of the unique device identifier (UID based on 96 bits)
  * @retval UID[63:32]: Wafer number (UID[39:32]) & LOT_NUM[23:0] (UID[63:40])
  */
__STATIC_INLINE uint32_t LL_GetUID_Word1(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 4U))));
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <LL_GetUID_Word1+0x14>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	1fff7594 	.word	0x1fff7594

08000ed4 <LL_GetUID_Word2>:
/**
  * @brief  Get Word2 of the unique device identifier (UID based on 96 bits)
  * @retval UID[95:64]: Lot number (ASCII encoded) - LOT_NUM[55:24]
  */
__STATIC_INLINE uint32_t LL_GetUID_Word2(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 8U))));
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <LL_GetUID_Word2+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	1fff7598 	.word	0x1fff7598

08000eec <LL_GetFlashSize>:
  * @note   This bitfield indicates the size of the device Flash memory expressed in
  *         Kbytes. As an example, 0x040 corresponds to 64 Kbytes.
  * @retval FLASH_SIZE[15:0]: Flash memory size
  */
__STATIC_INLINE uint32_t LL_GetFlashSize(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)FLASHSIZE_BASE_ADDRESS)) & 0xFFFFU);
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <LL_GetFlashSize+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	b29b      	uxth	r3, r3
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	1fff75e0 	.word	0x1fff75e0

08000f04 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000f14:	68fa      	ldr	r2, [r7, #12]
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	041a      	lsls	r2, r3, #16
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	400b      	ands	r3, r1
 8000f24:	431a      	orrs	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	619a      	str	r2, [r3, #24]
}
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <__io_putchar>:
static void DEMO_Init(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1000);
 8000f40:	1d39      	adds	r1, r7, #4
 8000f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f46:	2201      	movs	r2, #1
 8000f48:	4803      	ldr	r0, [pc, #12]	; (8000f58 <__io_putchar+0x20>)
 8000f4a:	f004 fde4 	bl	8005b16 <HAL_UART_Transmit>
	return 1;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200003c0 	.word	0x200003c0

08000f5c <HAL_GPIO_EXTI_Callback>:

//upon the button press, update the demo_number
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BUTTON_EXTI13_Pin) {
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f6c:	d10b      	bne.n	8000f86 <HAL_GPIO_EXTI_Callback+0x2a>
		//if reached max num of demos, restart
		if (demo_number == 3) {
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_GPIO_EXTI_Callback+0x34>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d102      	bne.n	8000f7c <HAL_GPIO_EXTI_Callback+0x20>
			//reinitialize demo number and state
			DEMO_Init();
 8000f76:	f000 fca7 	bl	80018c8 <DEMO_Init>
		}
		else {
			demo_number++;
		}
	}
}
 8000f7a:	e004      	b.n	8000f86 <HAL_GPIO_EXTI_Callback+0x2a>
			demo_number++;
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <HAL_GPIO_EXTI_Callback+0x34>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	3301      	adds	r3, #1
 8000f82:	4a03      	ldr	r2, [pc, #12]	; (8000f90 <HAL_GPIO_EXTI_Callback+0x34>)
 8000f84:	6013      	str	r3, [r2, #0]
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200009dc 	.word	0x200009dc

08000f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0e4      	sub	sp, #400	; 0x190
 8000f98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9a:	f001 fb5f 	bl	800265c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9e:	f000 f8fb 	bl	8001198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa2:	f000 faf3 	bl	800158c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000fa6:	f000 f959 	bl	800125c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000faa:	f000 f98f 	bl	80012cc <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000fae:	f000 f9cb 	bl	8001348 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000fb2:	f000 f9ef 	bl	8001394 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000fb6:	f000 fa5b 	bl	8001470 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000fba:	f000 fa89 	bl	80014d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fbe:	f000 fab7 	bl	8001530 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8000fc2:	f000 fa25 	bl	8001410 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  //initialize the demo number and states upon the start
  DEMO_Init();
 8000fc6:	f000 fc7f 	bl	80018c8 <DEMO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (demo_number) {
 8000fca:	4b68      	ldr	r3, [pc, #416]	; (800116c <main+0x1d8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	f000 809b 	beq.w	800110a <main+0x176>
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	dcf8      	bgt.n	8000fca <main+0x36>
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d002      	beq.n	8000fe2 <main+0x4e>
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d04a      	beq.n	8001076 <main+0xe2>
 8000fe0:	e7f3      	b.n	8000fca <main+0x36>
	  case 1:
		  HAL_UART_Transmit(&huart4, (uint8_t *) "DEMO 1:\n" , 10, 100);
 8000fe2:	2364      	movs	r3, #100	; 0x64
 8000fe4:	220a      	movs	r2, #10
 8000fe6:	4962      	ldr	r1, [pc, #392]	; (8001170 <main+0x1dc>)
 8000fe8:	4862      	ldr	r0, [pc, #392]	; (8001174 <main+0x1e0>)
 8000fea:	f004 fd94 	bl	8005b16 <HAL_UART_Transmit>
		  //use LL API
		  if (demo_one_start) {
 8000fee:	4b62      	ldr	r3, [pc, #392]	; (8001178 <main+0x1e4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d035      	beq.n	8001062 <main+0xce>
			  uint32_t flash_size = LL_GetFlashSize();
 8000ff6:	f7ff ff79 	bl	8000eec <LL_GetFlashSize>
 8000ffa:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
			  uint32_t uid[3];
			  uid[0] = LL_GetUID_Word0();
 8000ffe:	f7ff ff51 	bl	8000ea4 <LL_GetUID_Word0>
 8001002:	4603      	mov	r3, r0
 8001004:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
			  uid[1] = LL_GetUID_Word1();
 8001008:	f7ff ff58 	bl	8000ebc <LL_GetUID_Word1>
 800100c:	4603      	mov	r3, r0
 800100e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
			  uid[2] = LL_GetUID_Word2();
 8001012:	f7ff ff5f 	bl	8000ed4 <LL_GetUID_Word2>
 8001016:	4603      	mov	r3, r0
 8001018:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
			  //display to the serial terminal
			  char msg[60];
			  sprintf(msg, "Flash size: %lu, UID: %lu%lu%lu\n", flash_size, uid[0], uid[1], uid[2]);
 800101c:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8001020:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001024:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8001028:	1d38      	adds	r0, r7, #4
 800102a:	9201      	str	r2, [sp, #4]
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	460b      	mov	r3, r1
 8001030:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001034:	4951      	ldr	r1, [pc, #324]	; (800117c <main+0x1e8>)
 8001036:	f006 f9d7 	bl	80073e8 <siprintf>
			  int len = strlen(msg) + 1;
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff f917 	bl	8000270 <strlen>
 8001042:	4603      	mov	r3, r0
 8001044:	3301      	adds	r3, #1
 8001046:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
			  HAL_UART_Transmit(&huart4, (uint8_t *) msg, len, HAL_MAX_DELAY);
 800104a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800104e:	b29a      	uxth	r2, r3
 8001050:	1d39      	adds	r1, r7, #4
 8001052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001056:	4847      	ldr	r0, [pc, #284]	; (8001174 <main+0x1e0>)
 8001058:	f004 fd5d 	bl	8005b16 <HAL_UART_Transmit>
			   //signify that the demo1 now has started, so no duplicate display of ids
			  demo_one_start = 0;
 800105c:	4b46      	ldr	r3, [pc, #280]	; (8001178 <main+0x1e4>)
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
		  }

		  LL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001062:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001066:	4846      	ldr	r0, [pc, #280]	; (8001180 <main+0x1ec>)
 8001068:	f7ff ff4c 	bl	8000f04 <LL_GPIO_TogglePin>
		  HAL_Delay(1000);
 800106c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001070:	f001 fb68 	bl	8002744 <HAL_Delay>
		  break;
 8001074:	e078      	b.n	8001168 <main+0x1d4>

	   case 2:
		   HAL_UART_Transmit(&huart4, (uint8_t *) "DEMO 2:\n" , 10, 100);
 8001076:	2364      	movs	r3, #100	; 0x64
 8001078:	220a      	movs	r2, #10
 800107a:	4942      	ldr	r1, [pc, #264]	; (8001184 <main+0x1f0>)
 800107c:	483d      	ldr	r0, [pc, #244]	; (8001174 <main+0x1e0>)
 800107e:	f004 fd4a 	bl	8005b16 <HAL_UART_Transmit>
		   //use HAL_API
		   if (demo_two_start) {
 8001082:	4b41      	ldr	r3, [pc, #260]	; (8001188 <main+0x1f4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d035      	beq.n	80010f6 <main+0x162>
			   uint32_t device_id = HAL_GetDEVID();
 800108a:	f001 fb7f 	bl	800278c <HAL_GetDEVID>
 800108e:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
			   uint32_t dev_unique_id[3];
			   dev_unique_id[0] = HAL_GetUIDw0();
 8001092:	f001 fb89 	bl	80027a8 <HAL_GetUIDw0>
 8001096:	4603      	mov	r3, r0
 8001098:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
			   dev_unique_id[1] = HAL_GetUIDw1();
 800109c:	f001 fb90 	bl	80027c0 <HAL_GetUIDw1>
 80010a0:	4603      	mov	r3, r0
 80010a2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
			   dev_unique_id[2] = HAL_GetUIDw2();
 80010a6:	f001 fb97 	bl	80027d8 <HAL_GetUIDw2>
 80010aa:	4603      	mov	r3, r0
 80010ac:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
			   char msg[60];
			   sprintf(msg, "Device ID: %lu, Device unique ID: %lu%lu%lu\n", device_id, dev_unique_id[0], dev_unique_id[1], dev_unique_id[2]);
 80010b0:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80010b4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80010b8:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80010bc:	1d38      	adds	r0, r7, #4
 80010be:	9201      	str	r2, [sp, #4]
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	460b      	mov	r3, r1
 80010c4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80010c8:	4930      	ldr	r1, [pc, #192]	; (800118c <main+0x1f8>)
 80010ca:	f006 f98d 	bl	80073e8 <siprintf>
			   int len = strlen(msg) + 1;
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff f8cd 	bl	8000270 <strlen>
 80010d6:	4603      	mov	r3, r0
 80010d8:	3301      	adds	r3, #1
 80010da:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
			   HAL_UART_Transmit(&huart4, (uint8_t *) msg, len, HAL_MAX_DELAY);
 80010de:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	1d39      	adds	r1, r7, #4
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ea:	4822      	ldr	r0, [pc, #136]	; (8001174 <main+0x1e0>)
 80010ec:	f004 fd13 	bl	8005b16 <HAL_UART_Transmit>
			   //signify that the demo2 now has started, so no duplicate display of ids
			   demo_two_start = 0;
 80010f0:	4b25      	ldr	r3, [pc, #148]	; (8001188 <main+0x1f4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
		   }
		   HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80010f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010fa:	4821      	ldr	r0, [pc, #132]	; (8001180 <main+0x1ec>)
 80010fc:	f002 f84c 	bl	8003198 <HAL_GPIO_TogglePin>
		   HAL_Delay(2000);
 8001100:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001104:	f001 fb1e 	bl	8002744 <HAL_Delay>
		   break;
 8001108:	e02e      	b.n	8001168 <main+0x1d4>

	   case 3:
		   HAL_UART_Transmit(&huart4, (uint8_t *) "DEMO 3:\n" , 10, 100);
 800110a:	2364      	movs	r3, #100	; 0x64
 800110c:	220a      	movs	r2, #10
 800110e:	4920      	ldr	r1, [pc, #128]	; (8001190 <main+0x1fc>)
 8001110:	4818      	ldr	r0, [pc, #96]	; (8001174 <main+0x1e0>)
 8001112:	f004 fd00 	bl	8005b16 <HAL_UART_Transmit>
		   //Use BSP_API
		   BSP_TSENSOR_Init();
 8001116:	f001 f9c3 	bl	80024a0 <BSP_TSENSOR_Init>
		   float temp = BSP_TSENSOR_ReadTemp();
 800111a:	f001 f9dd 	bl	80024d8 <BSP_TSENSOR_ReadTemp>
 800111e:	ed87 0a61 	vstr	s0, [r7, #388]	; 0x184
		   char msg[340];
		   sprintf(msg, "Temperature is: %f\n", temp);
 8001122:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
 8001126:	f7ff fa0f 	bl	8000548 <__aeabi_f2d>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	1d38      	adds	r0, r7, #4
 8001130:	4918      	ldr	r1, [pc, #96]	; (8001194 <main+0x200>)
 8001132:	f006 f959 	bl	80073e8 <siprintf>
		   int len = strlen(msg) + 1;
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff f899 	bl	8000270 <strlen>
 800113e:	4603      	mov	r3, r0
 8001140:	3301      	adds	r3, #1
 8001142:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
		   HAL_UART_Transmit(&huart4, (uint8_t*) msg, len, HAL_MAX_DELAY);
 8001146:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800114a:	b29a      	uxth	r2, r3
 800114c:	1d39      	adds	r1, r7, #4
 800114e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001152:	4808      	ldr	r0, [pc, #32]	; (8001174 <main+0x1e0>)
 8001154:	f004 fcdf 	bl	8005b16 <HAL_UART_Transmit>
		   BSP_LED_Toggle(LED2);
 8001158:	2000      	movs	r0, #0
 800115a:	f001 f83b 	bl	80021d4 <BSP_LED_Toggle>
		   HAL_Delay(3000);
 800115e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001162:	f001 faef 	bl	8002744 <HAL_Delay>
		   break;
 8001166:	bf00      	nop
	  switch (demo_number) {
 8001168:	e72f      	b.n	8000fca <main+0x36>
 800116a:	bf00      	nop
 800116c:	200009dc 	.word	0x200009dc
 8001170:	08009840 	.word	0x08009840
 8001174:	20000338 	.word	0x20000338
 8001178:	200009e0 	.word	0x200009e0
 800117c:	0800984c 	.word	0x0800984c
 8001180:	48000400 	.word	0x48000400
 8001184:	08009870 	.word	0x08009870
 8001188:	200009e4 	.word	0x200009e4
 800118c:	0800987c 	.word	0x0800987c
 8001190:	080098ac 	.word	0x080098ac
 8001194:	080098b8 	.word	0x080098b8

08001198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b096      	sub	sp, #88	; 0x58
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	2244      	movs	r2, #68	; 0x44
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f006 fa00 	bl	80075ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011be:	f002 ffcb 	bl	8004158 <HAL_PWREx_ControlVoltageScaling>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011c8:	f000 fb94 	bl	80018f4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011cc:	f002 ffa6 	bl	800411c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011d0:	4b21      	ldr	r3, [pc, #132]	; (8001258 <SystemClock_Config+0xc0>)
 80011d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011d6:	4a20      	ldr	r2, [pc, #128]	; (8001258 <SystemClock_Config+0xc0>)
 80011d8:	f023 0318 	bic.w	r3, r3, #24
 80011dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80011e0:	2314      	movs	r3, #20
 80011e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011e4:	2301      	movs	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011e8:	2301      	movs	r3, #1
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011f0:	2360      	movs	r3, #96	; 0x60
 80011f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f4:	2302      	movs	r3, #2
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011f8:	2301      	movs	r3, #1
 80011fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011fc:	2301      	movs	r3, #1
 80011fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001200:	2328      	movs	r3, #40	; 0x28
 8001202:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001204:	2307      	movs	r3, #7
 8001206:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001208:	2302      	movs	r3, #2
 800120a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800120c:	2302      	movs	r3, #2
 800120e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4618      	mov	r0, r3
 8001216:	f003 f8c1 	bl	800439c <HAL_RCC_OscConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001220:	f000 fb68 	bl	80018f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001224:	230f      	movs	r3, #15
 8001226:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001228:	2303      	movs	r3, #3
 800122a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122c:	2300      	movs	r3, #0
 800122e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	2104      	movs	r1, #4
 800123c:	4618      	mov	r0, r3
 800123e:	f003 fc89 	bl	8004b54 <HAL_RCC_ClockConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001248:	f000 fb54 	bl	80018f4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800124c:	f004 f990 	bl	8005570 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001250:	bf00      	nop
 8001252:	3758      	adds	r7, #88	; 0x58
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40021000 	.word	0x40021000

0800125c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001260:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <MX_DFSDM1_Init+0x68>)
 8001262:	4a19      	ldr	r2, [pc, #100]	; (80012c8 <MX_DFSDM1_Init+0x6c>)
 8001264:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <MX_DFSDM1_Init+0x68>)
 8001268:	2201      	movs	r2, #1
 800126a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800126c:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <MX_DFSDM1_Init+0x68>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001272:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <MX_DFSDM1_Init+0x68>)
 8001274:	2202      	movs	r2, #2
 8001276:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <MX_DFSDM1_Init+0x68>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <MX_DFSDM1_Init+0x68>)
 8001280:	2200      	movs	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_DFSDM1_Init+0x68>)
 8001286:	f44f 7280 	mov.w	r2, #256	; 0x100
 800128a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800128c:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <MX_DFSDM1_Init+0x68>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_DFSDM1_Init+0x68>)
 8001294:	2204      	movs	r2, #4
 8001296:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <MX_DFSDM1_Init+0x68>)
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_DFSDM1_Init+0x68>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <MX_DFSDM1_Init+0x68>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_DFSDM1_Init+0x68>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <MX_DFSDM1_Init+0x68>)
 80012b2:	f001 fbaf 	bl	8002a14 <HAL_DFSDM_ChannelInit>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80012bc:	f000 fb1a 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000204 	.word	0x20000204
 80012c8:	40016020 	.word	0x40016020

080012cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <MX_I2C2_Init+0x74>)
 80012d2:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <MX_I2C2_Init+0x78>)
 80012d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80012d6:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <MX_I2C2_Init+0x74>)
 80012d8:	f640 6214 	movw	r2, #3604	; 0xe14
 80012dc:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012de:	4b18      	ldr	r3, [pc, #96]	; (8001340 <MX_I2C2_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <MX_I2C2_Init+0x74>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <MX_I2C2_Init+0x74>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <MX_I2C2_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <MX_I2C2_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <MX_I2C2_Init+0x74>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_I2C2_Init+0x74>)
 8001304:	2200      	movs	r2, #0
 8001306:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <MX_I2C2_Init+0x74>)
 800130a:	f001 ff77 	bl	80031fc <HAL_I2C_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001314:	f000 faee 	bl	80018f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001318:	2100      	movs	r1, #0
 800131a:	4809      	ldr	r0, [pc, #36]	; (8001340 <MX_I2C2_Init+0x74>)
 800131c:	f002 fd1e 	bl	8003d5c <HAL_I2CEx_ConfigAnalogFilter>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001326:	f000 fae5 	bl	80018f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800132a:	2100      	movs	r1, #0
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <MX_I2C2_Init+0x74>)
 800132e:	f002 fd60 	bl	8003df2 <HAL_I2CEx_ConfigDigitalFilter>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001338:	f000 fadc 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000023c 	.word	0x2000023c
 8001344:	40005800 	.word	0x40005800

08001348 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <MX_QUADSPI_Init+0x44>)
 800134e:	4a10      	ldr	r2, [pc, #64]	; (8001390 <MX_QUADSPI_Init+0x48>)
 8001350:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_QUADSPI_Init+0x44>)
 8001354:	2202      	movs	r2, #2
 8001356:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_QUADSPI_Init+0x44>)
 800135a:	2204      	movs	r2, #4
 800135c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <MX_QUADSPI_Init+0x44>)
 8001360:	2210      	movs	r2, #16
 8001362:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_QUADSPI_Init+0x44>)
 8001366:	2217      	movs	r2, #23
 8001368:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <MX_QUADSPI_Init+0x44>)
 800136c:	2200      	movs	r2, #0
 800136e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <MX_QUADSPI_Init+0x44>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_QUADSPI_Init+0x44>)
 8001378:	f002 ff54 	bl	8004224 <HAL_QSPI_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001382:	f000 fab7 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000290 	.word	0x20000290
 8001390:	a0001000 	.word	0xa0001000

08001394 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <MX_SPI3_Init+0x74>)
 800139a:	4a1c      	ldr	r2, [pc, #112]	; (800140c <MX_SPI3_Init+0x78>)
 800139c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <MX_SPI3_Init+0x74>)
 80013a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <MX_SPI3_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <MX_SPI3_Init+0x74>)
 80013ae:	f44f 7240 	mov.w	r2, #768	; 0x300
 80013b2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <MX_SPI3_Init+0x74>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <MX_SPI3_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <MX_SPI3_Init+0x74>)
 80013c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013c6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <MX_SPI3_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <MX_SPI3_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_SPI3_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <MX_SPI3_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_SPI3_Init+0x74>)
 80013e2:	2207      	movs	r2, #7
 80013e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <MX_SPI3_Init+0x74>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <MX_SPI3_Init+0x74>)
 80013ee:	2208      	movs	r2, #8
 80013f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_SPI3_Init+0x74>)
 80013f4:	f004 fa9e 	bl	8005934 <HAL_SPI_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80013fe:	f000 fa79 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200002d4 	.word	0x200002d4
 800140c:	40003c00 	.word	0x40003c00

08001410 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_UART4_Init+0x58>)
 8001416:	4a15      	ldr	r2, [pc, #84]	; (800146c <MX_UART4_Init+0x5c>)
 8001418:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <MX_UART4_Init+0x58>)
 800141c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001420:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_UART4_Init+0x58>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_UART4_Init+0x58>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_UART4_Init+0x58>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_UART4_Init+0x58>)
 8001436:	220c      	movs	r2, #12
 8001438:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <MX_UART4_Init+0x58>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_UART4_Init+0x58>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <MX_UART4_Init+0x58>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_UART4_Init+0x58>)
 800144e:	2200      	movs	r2, #0
 8001450:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_UART4_Init+0x58>)
 8001454:	f004 fb11 	bl	8005a7a <HAL_UART_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800145e:	f000 fa49 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000338 	.word	0x20000338
 800146c:	40004c00 	.word	0x40004c00

08001470 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <MX_USART1_UART_Init+0x58>)
 8001476:	4a15      	ldr	r2, [pc, #84]	; (80014cc <MX_USART1_UART_Init+0x5c>)
 8001478:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <MX_USART1_UART_Init+0x58>)
 800147c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001480:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_USART1_UART_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_USART1_UART_Init+0x58>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_USART1_UART_Init+0x58>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_USART1_UART_Init+0x58>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <MX_USART1_UART_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_USART1_UART_Init+0x58>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <MX_USART1_UART_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_USART1_UART_Init+0x58>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_USART1_UART_Init+0x58>)
 80014b4:	f004 fae1 	bl	8005a7a <HAL_UART_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014be:	f000 fa19 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200003c0 	.word	0x200003c0
 80014cc:	40013800 	.word	0x40013800

080014d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <MX_USART3_UART_Init+0x58>)
 80014d6:	4a15      	ldr	r2, [pc, #84]	; (800152c <MX_USART3_UART_Init+0x5c>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <MX_USART3_UART_Init+0x58>)
 80014dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_USART3_UART_Init+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <MX_USART3_UART_Init+0x58>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_USART3_UART_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_USART3_UART_Init+0x58>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <MX_USART3_UART_Init+0x58>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_USART3_UART_Init+0x58>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <MX_USART3_UART_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_USART3_UART_Init+0x58>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_USART3_UART_Init+0x58>)
 8001514:	f004 fab1 	bl	8005a7a <HAL_UART_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800151e:	f000 f9e9 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000448 	.word	0x20000448
 800152c:	40004800 	.word	0x40004800

08001530 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001536:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800153a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800153e:	2206      	movs	r2, #6
 8001540:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001544:	2202      	movs	r2, #2
 8001546:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800154a:	2202      	movs	r2, #2
 800154c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001550:	2200      	movs	r2, #0
 8001552:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001556:	2200      	movs	r2, #0
 8001558:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800155c:	2200      	movs	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001562:	2200      	movs	r2, #0
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800156e:	2200      	movs	r2, #0
 8001570:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001574:	f002 fc89 	bl	8003e8a <HAL_PCD_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800157e:	f000 f9b9 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200004d0 	.word	0x200004d0

0800158c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015a2:	4bbd      	ldr	r3, [pc, #756]	; (8001898 <MX_GPIO_Init+0x30c>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	4abc      	ldr	r2, [pc, #752]	; (8001898 <MX_GPIO_Init+0x30c>)
 80015a8:	f043 0310 	orr.w	r3, r3, #16
 80015ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ae:	4bba      	ldr	r3, [pc, #744]	; (8001898 <MX_GPIO_Init+0x30c>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	f003 0310 	and.w	r3, r3, #16
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ba:	4bb7      	ldr	r3, [pc, #732]	; (8001898 <MX_GPIO_Init+0x30c>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	4ab6      	ldr	r2, [pc, #728]	; (8001898 <MX_GPIO_Init+0x30c>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c6:	4bb4      	ldr	r3, [pc, #720]	; (8001898 <MX_GPIO_Init+0x30c>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	4bb1      	ldr	r3, [pc, #708]	; (8001898 <MX_GPIO_Init+0x30c>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	4ab0      	ldr	r2, [pc, #704]	; (8001898 <MX_GPIO_Init+0x30c>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015de:	4bae      	ldr	r3, [pc, #696]	; (8001898 <MX_GPIO_Init+0x30c>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	4bab      	ldr	r3, [pc, #684]	; (8001898 <MX_GPIO_Init+0x30c>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	4aaa      	ldr	r2, [pc, #680]	; (8001898 <MX_GPIO_Init+0x30c>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f6:	4ba8      	ldr	r3, [pc, #672]	; (8001898 <MX_GPIO_Init+0x30c>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001602:	4ba5      	ldr	r3, [pc, #660]	; (8001898 <MX_GPIO_Init+0x30c>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	4aa4      	ldr	r2, [pc, #656]	; (8001898 <MX_GPIO_Init+0x30c>)
 8001608:	f043 0308 	orr.w	r3, r3, #8
 800160c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160e:	4ba2      	ldr	r3, [pc, #648]	; (8001898 <MX_GPIO_Init+0x30c>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001620:	489e      	ldr	r0, [pc, #632]	; (800189c <MX_GPIO_Init+0x310>)
 8001622:	f001 fda1 	bl	8003168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	f248 1104 	movw	r1, #33028	; 0x8104
 800162c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001630:	f001 fd9a 	bl	8003168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001634:	2200      	movs	r2, #0
 8001636:	f24f 0114 	movw	r1, #61460	; 0xf014
 800163a:	4899      	ldr	r0, [pc, #612]	; (80018a0 <MX_GPIO_Init+0x314>)
 800163c:	f001 fd94 	bl	8003168 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001640:	2200      	movs	r2, #0
 8001642:	f241 0181 	movw	r1, #4225	; 0x1081
 8001646:	4897      	ldr	r0, [pc, #604]	; (80018a4 <MX_GPIO_Init+0x318>)
 8001648:	f001 fd8e 	bl	8003168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800164c:	2201      	movs	r2, #1
 800164e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001652:	4894      	ldr	r0, [pc, #592]	; (80018a4 <MX_GPIO_Init+0x318>)
 8001654:	f001 fd88 	bl	8003168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800165e:	4892      	ldr	r0, [pc, #584]	; (80018a8 <MX_GPIO_Init+0x31c>)
 8001660:	f001 fd82 	bl	8003168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001664:	2201      	movs	r2, #1
 8001666:	2120      	movs	r1, #32
 8001668:	488d      	ldr	r0, [pc, #564]	; (80018a0 <MX_GPIO_Init+0x314>)
 800166a:	f001 fd7d 	bl	8003168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	2101      	movs	r1, #1
 8001672:	488a      	ldr	r0, [pc, #552]	; (800189c <MX_GPIO_Init+0x310>)
 8001674:	f001 fd78 	bl	8003168 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001678:	f240 1315 	movw	r3, #277	; 0x115
 800167c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167e:	2301      	movs	r3, #1
 8001680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4882      	ldr	r0, [pc, #520]	; (800189c <MX_GPIO_Init+0x310>)
 8001692:	f001 facb 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001696:	236a      	movs	r3, #106	; 0x6a
 8001698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800169a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800169e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	487c      	ldr	r0, [pc, #496]	; (800189c <MX_GPIO_Init+0x310>)
 80016ac:	f001 fabe 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80016b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016b6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	4878      	ldr	r0, [pc, #480]	; (80018a8 <MX_GPIO_Init+0x31c>)
 80016c8:	f001 fab0 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80016cc:	233f      	movs	r3, #63	; 0x3f
 80016ce:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016d0:	230b      	movs	r3, #11
 80016d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	4872      	ldr	r0, [pc, #456]	; (80018a8 <MX_GPIO_Init+0x31c>)
 80016e0:	f001 faa4 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80016e4:	f248 1304 	movw	r3, #33028	; 0x8104
 80016e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001700:	f001 fa94 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001704:	2308      	movs	r3, #8
 8001706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001714:	2301      	movs	r3, #1
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4619      	mov	r1, r3
 800171e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001722:	f001 fa83 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001726:	2310      	movs	r3, #16
 8001728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800172a:	230b      	movs	r3, #11
 800172c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173c:	f001 fa76 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001740:	23e0      	movs	r3, #224	; 0xe0
 8001742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001750:	2305      	movs	r3, #5
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4619      	mov	r1, r3
 800175a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175e:	f001 fa65 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001762:	2301      	movs	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001766:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800176a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4619      	mov	r1, r3
 8001776:	484a      	ldr	r0, [pc, #296]	; (80018a0 <MX_GPIO_Init+0x314>)
 8001778:	f001 fa58 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800177c:	2302      	movs	r3, #2
 800177e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001780:	230b      	movs	r3, #11
 8001782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4844      	ldr	r0, [pc, #272]	; (80018a0 <MX_GPIO_Init+0x314>)
 8001790:	f001 fa4c 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001794:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001798:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179a:	2301      	movs	r3, #1
 800179c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	483c      	ldr	r0, [pc, #240]	; (80018a0 <MX_GPIO_Init+0x314>)
 80017ae:	f001 fa3d 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80017b2:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80017b6:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	4836      	ldr	r0, [pc, #216]	; (80018a4 <MX_GPIO_Init+0x318>)
 80017ca:	f001 fa2f 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80017ce:	f243 0381 	movw	r3, #12417	; 0x3081
 80017d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d4:	2301      	movs	r3, #1
 80017d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4619      	mov	r1, r3
 80017e6:	482f      	ldr	r0, [pc, #188]	; (80018a4 <MX_GPIO_Init+0x318>)
 80017e8:	f001 fa20 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80017ec:	f44f 7310 	mov.w	r3, #576	; 0x240
 80017f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	4828      	ldr	r0, [pc, #160]	; (80018a8 <MX_GPIO_Init+0x31c>)
 8001806:	f001 fa11 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800180a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800180e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001810:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	4821      	ldr	r0, [pc, #132]	; (80018a8 <MX_GPIO_Init+0x31c>)
 8001822:	f001 fa03 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001826:	2302      	movs	r3, #2
 8001828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001832:	2303      	movs	r3, #3
 8001834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001836:	2305      	movs	r3, #5
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	4818      	ldr	r0, [pc, #96]	; (80018a4 <MX_GPIO_Init+0x318>)
 8001842:	f001 f9f3 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001846:	2378      	movs	r3, #120	; 0x78
 8001848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001856:	2307      	movs	r3, #7
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4619      	mov	r1, r3
 8001860:	4810      	ldr	r0, [pc, #64]	; (80018a4 <MX_GPIO_Init+0x318>)
 8001862:	f001 f9e3 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001866:	f44f 7340 	mov.w	r3, #768	; 0x300
 800186a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186c:	2312      	movs	r3, #18
 800186e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001874:	2303      	movs	r3, #3
 8001876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001878:	2304      	movs	r3, #4
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	4807      	ldr	r0, [pc, #28]	; (80018a0 <MX_GPIO_Init+0x314>)
 8001884:	f001 f9d2 	bl	8002c2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001888:	2200      	movs	r2, #0
 800188a:	2100      	movs	r1, #0
 800188c:	2017      	movs	r0, #23
 800188e:	f001 f88a 	bl	80029a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001892:	2017      	movs	r0, #23
 8001894:	e00a      	b.n	80018ac <MX_GPIO_Init+0x320>
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
 800189c:	48001000 	.word	0x48001000
 80018a0:	48000400 	.word	0x48000400
 80018a4:	48000c00 	.word	0x48000c00
 80018a8:	48000800 	.word	0x48000800
 80018ac:	f001 f897 	bl	80029de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2100      	movs	r1, #0
 80018b4:	2028      	movs	r0, #40	; 0x28
 80018b6:	f001 f876 	bl	80029a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018ba:	2028      	movs	r0, #40	; 0x28
 80018bc:	f001 f88f 	bl	80029de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018c0:	bf00      	nop
 80018c2:	3728      	adds	r7, #40	; 0x28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <DEMO_Init>:

/* USER CODE BEGIN 4 */
static void DEMO_Init(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
	demo_number = 1;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <DEMO_Init+0x20>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	601a      	str	r2, [r3, #0]
	demo_one_start = 1;
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <DEMO_Init+0x24>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
	demo_two_start = 1;
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <DEMO_Init+0x28>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	200009dc 	.word	0x200009dc
 80018ec:	200009e0 	.word	0x200009e0
 80018f0:	200009e4 	.word	0x200009e4

080018f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f8:	b672      	cpsid	i
}
 80018fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018fc:	e7fe      	b.n	80018fc <Error_Handler+0x8>
	...

08001900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_MspInit+0x44>)
 8001908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190a:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <HAL_MspInit+0x44>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6613      	str	r3, [r2, #96]	; 0x60
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <HAL_MspInit+0x44>)
 8001914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_MspInit+0x44>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	4a08      	ldr	r2, [pc, #32]	; (8001944 <HAL_MspInit+0x44>)
 8001924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001928:	6593      	str	r3, [r2, #88]	; 0x58
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_MspInit+0x44>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000

08001948 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b0ac      	sub	sp, #176	; 0xb0
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	2288      	movs	r2, #136	; 0x88
 8001966:	2100      	movs	r1, #0
 8001968:	4618      	mov	r0, r3
 800196a:	f005 fe1f 	bl	80075ac <memset>
  if(DFSDM1_Init == 0)
 800196e:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d142      	bne.n	80019fc <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001976:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800197a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800197c:	2300      	movs	r3, #0
 800197e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4618      	mov	r0, r3
 8001988:	f003 fb08 	bl	8004f9c <HAL_RCCEx_PeriphCLKConfig>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001992:	f7ff ffaf 	bl	80018f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001996:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199a:	4a1b      	ldr	r2, [pc, #108]	; (8001a08 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800199c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019a0:	6613      	str	r3, [r2, #96]	; 0x60
 80019a2:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80019a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ae:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	4a15      	ldr	r2, [pc, #84]	; (8001a08 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80019b4:	f043 0310 	orr.w	r3, r3, #16
 80019b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	f003 0310 	and.w	r3, r3, #16
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80019c6:	f44f 7320 	mov.w	r3, #640	; 0x280
 80019ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80019e0:	2306      	movs	r3, #6
 80019e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019ea:	4619      	mov	r1, r3
 80019ec:	4807      	ldr	r0, [pc, #28]	; (8001a0c <HAL_DFSDM_ChannelMspInit+0xc4>)
 80019ee:	f001 f91d 	bl	8002c2c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	3301      	adds	r3, #1
 80019f8:	4a02      	ldr	r2, [pc, #8]	; (8001a04 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80019fa:	6013      	str	r3, [r2, #0]
  }

}
 80019fc:	bf00      	nop
 80019fe:	37b0      	adds	r7, #176	; 0xb0
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	200009e8 	.word	0x200009e8
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	48001000 	.word	0x48001000

08001a10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b0ac      	sub	sp, #176	; 0xb0
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2288      	movs	r2, #136	; 0x88
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f005 fdbb 	bl	80075ac <memset>
  if(hi2c->Instance==I2C2)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a21      	ldr	r2, [pc, #132]	; (8001ac0 <HAL_I2C_MspInit+0xb0>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d13b      	bne.n	8001ab8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a44:	2300      	movs	r3, #0
 8001a46:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f003 faa5 	bl	8004f9c <HAL_RCCEx_PeriphCLKConfig>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a58:	f7ff ff4c 	bl	80018f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_I2C_MspInit+0xb4>)
 8001a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a60:	4a18      	ldr	r2, [pc, #96]	; (8001ac4 <HAL_I2C_MspInit+0xb4>)
 8001a62:	f043 0302 	orr.w	r3, r3, #2
 8001a66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a68:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <HAL_I2C_MspInit+0xb4>)
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001a74:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a7c:	2312      	movs	r3, #18
 8001a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a8e:	2304      	movs	r3, #4
 8001a90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480b      	ldr	r0, [pc, #44]	; (8001ac8 <HAL_I2C_MspInit+0xb8>)
 8001a9c:	f001 f8c6 	bl	8002c2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_I2C_MspInit+0xb4>)
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa4:	4a07      	ldr	r2, [pc, #28]	; (8001ac4 <HAL_I2C_MspInit+0xb4>)
 8001aa6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_I2C_MspInit+0xb4>)
 8001aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ab8:	bf00      	nop
 8001aba:	37b0      	adds	r7, #176	; 0xb0
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40005800 	.word	0x40005800
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	48000400 	.word	0x48000400

08001acc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0b      	ldr	r2, [pc, #44]	; (8001b08 <HAL_I2C_MspDeInit+0x3c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d10f      	bne.n	8001afe <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_I2C_MspDeInit+0x40>)
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <HAL_I2C_MspDeInit+0x40>)
 8001ae4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ae8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001aea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aee:	4808      	ldr	r0, [pc, #32]	; (8001b10 <HAL_I2C_MspDeInit+0x44>)
 8001af0:	f001 fa46 	bl	8002f80 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001af4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001af8:	4805      	ldr	r0, [pc, #20]	; (8001b10 <HAL_I2C_MspDeInit+0x44>)
 8001afa:	f001 fa41 	bl	8002f80 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40005800 	.word	0x40005800
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	48000400 	.word	0x48000400

08001b14 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a17      	ldr	r2, [pc, #92]	; (8001b90 <HAL_QSPI_MspInit+0x7c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d128      	bne.n	8001b88 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <HAL_QSPI_MspInit+0x80>)
 8001b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b3a:	4a16      	ldr	r2, [pc, #88]	; (8001b94 <HAL_QSPI_MspInit+0x80>)
 8001b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b40:	6513      	str	r3, [r2, #80]	; 0x50
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <HAL_QSPI_MspInit+0x80>)
 8001b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_QSPI_MspInit+0x80>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b52:	4a10      	ldr	r2, [pc, #64]	; (8001b94 <HAL_QSPI_MspInit+0x80>)
 8001b54:	f043 0310 	orr.w	r3, r3, #16
 8001b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_QSPI_MspInit+0x80>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001b66:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001b6a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b78:	230a      	movs	r3, #10
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	4619      	mov	r1, r3
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <HAL_QSPI_MspInit+0x84>)
 8001b84:	f001 f852 	bl	8002c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001b88:	bf00      	nop
 8001b8a:	3728      	adds	r7, #40	; 0x28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	a0001000 	.word	0xa0001000
 8001b94:	40021000 	.word	0x40021000
 8001b98:	48001000 	.word	0x48001000

08001b9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a17      	ldr	r2, [pc, #92]	; (8001c18 <HAL_SPI_MspInit+0x7c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d128      	bne.n	8001c10 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bbe:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <HAL_SPI_MspInit+0x80>)
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	4a16      	ldr	r2, [pc, #88]	; (8001c1c <HAL_SPI_MspInit+0x80>)
 8001bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bca:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <HAL_SPI_MspInit+0x80>)
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <HAL_SPI_MspInit+0x80>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	4a10      	ldr	r2, [pc, #64]	; (8001c1c <HAL_SPI_MspInit+0x80>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <HAL_SPI_MspInit+0x80>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001bee:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c00:	2306      	movs	r3, #6
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <HAL_SPI_MspInit+0x84>)
 8001c0c:	f001 f80e 	bl	8002c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c10:	bf00      	nop
 8001c12:	3728      	adds	r7, #40	; 0x28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40003c00 	.word	0x40003c00
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	48000800 	.word	0x48000800

08001c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b0b0      	sub	sp, #192	; 0xc0
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c40:	2288      	movs	r2, #136	; 0x88
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f005 fcb1 	bl	80075ac <memset>
  if(huart->Instance==UART4)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a63      	ldr	r2, [pc, #396]	; (8001ddc <HAL_UART_MspInit+0x1b8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d13c      	bne.n	8001cce <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001c54:	2308      	movs	r3, #8
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c60:	4618      	mov	r0, r3
 8001c62:	f003 f99b 	bl	8004f9c <HAL_RCCEx_PeriphCLKConfig>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c6c:	f7ff fe42 	bl	80018f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c70:	4b5b      	ldr	r3, [pc, #364]	; (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	4a5a      	ldr	r2, [pc, #360]	; (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001c76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c7c:	4b58      	ldr	r3, [pc, #352]	; (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c84:	623b      	str	r3, [r7, #32]
 8001c86:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c88:	4b55      	ldr	r3, [pc, #340]	; (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8c:	4a54      	ldr	r2, [pc, #336]	; (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c94:	4b52      	ldr	r3, [pc, #328]	; (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	61fb      	str	r3, [r7, #28]
 8001c9e:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001cb8:	2308      	movs	r3, #8
 8001cba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc8:	f000 ffb0 	bl	8002c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ccc:	e081      	b.n	8001dd2 <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART1)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a44      	ldr	r2, [pc, #272]	; (8001de4 <HAL_UART_MspInit+0x1c0>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d13b      	bne.n	8001d50 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f003 f959 	bl	8004f9c <HAL_RCCEx_PeriphCLKConfig>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001cf0:	f7ff fe00 	bl	80018f4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cf4:	4b3a      	ldr	r3, [pc, #232]	; (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf8:	4a39      	ldr	r2, [pc, #228]	; (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001cfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cfe:	6613      	str	r3, [r2, #96]	; 0x60
 8001d00:	4b37      	ldr	r3, [pc, #220]	; (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d08:	61bb      	str	r3, [r7, #24]
 8001d0a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0c:	4b34      	ldr	r3, [pc, #208]	; (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d10:	4a33      	ldr	r2, [pc, #204]	; (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001d12:	f043 0302 	orr.w	r3, r3, #2
 8001d16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d18:	4b31      	ldr	r3, [pc, #196]	; (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001d24:	23c0      	movs	r3, #192	; 0xc0
 8001d26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d3c:	2307      	movs	r3, #7
 8001d3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d42:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d46:	4619      	mov	r1, r3
 8001d48:	4827      	ldr	r0, [pc, #156]	; (8001de8 <HAL_UART_MspInit+0x1c4>)
 8001d4a:	f000 ff6f 	bl	8002c2c <HAL_GPIO_Init>
}
 8001d4e:	e040      	b.n	8001dd2 <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART3)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a25      	ldr	r2, [pc, #148]	; (8001dec <HAL_UART_MspInit+0x1c8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d13b      	bne.n	8001dd2 <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 f918 	bl	8004f9c <HAL_RCCEx_PeriphCLKConfig>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_UART_MspInit+0x152>
      Error_Handler();
 8001d72:	f7ff fdbf 	bl	80018f4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7a:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d80:	6593      	str	r3, [r2, #88]	; 0x58
 8001d82:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d92:	4a13      	ldr	r2, [pc, #76]	; (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001d94:	f043 0308 	orr.w	r3, r3, #8
 8001d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001da6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001daa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dc0:	2307      	movs	r3, #7
 8001dc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dc6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4808      	ldr	r0, [pc, #32]	; (8001df0 <HAL_UART_MspInit+0x1cc>)
 8001dce:	f000 ff2d 	bl	8002c2c <HAL_GPIO_Init>
}
 8001dd2:	bf00      	nop
 8001dd4:	37c0      	adds	r7, #192	; 0xc0
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40004c00 	.word	0x40004c00
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40013800 	.word	0x40013800
 8001de8:	48000400 	.word	0x48000400
 8001dec:	40004800 	.word	0x40004800
 8001df0:	48000c00 	.word	0x48000c00

08001df4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b0ac      	sub	sp, #176	; 0xb0
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2288      	movs	r2, #136	; 0x88
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f005 fbc9 	bl	80075ac <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e22:	d17c      	bne.n	8001f1e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001e24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e28:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001e2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001e2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001e32:	2301      	movs	r3, #1
 8001e34:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001e36:	2301      	movs	r3, #1
 8001e38:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001e3a:	2318      	movs	r3, #24
 8001e3c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001e3e:	2307      	movs	r3, #7
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001e42:	2302      	movs	r3, #2
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001e46:	2302      	movs	r3, #2
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001e4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e4e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	4618      	mov	r0, r3
 8001e56:	f003 f8a1 	bl	8004f9c <HAL_RCCEx_PeriphCLKConfig>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001e60:	f7ff fd48 	bl	80018f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e64:	4b30      	ldr	r3, [pc, #192]	; (8001f28 <HAL_PCD_MspInit+0x134>)
 8001e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e68:	4a2f      	ldr	r2, [pc, #188]	; (8001f28 <HAL_PCD_MspInit+0x134>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e70:	4b2d      	ldr	r3, [pc, #180]	; (8001f28 <HAL_PCD_MspInit+0x134>)
 8001e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e94:	4619      	mov	r1, r3
 8001e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9a:	f000 fec7 	bl	8002c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001e9e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ea2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001eb8:	230a      	movs	r3, #10
 8001eba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec8:	f000 feb0 	bl	8002c2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ecc:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <HAL_PCD_MspInit+0x134>)
 8001ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed0:	4a15      	ldr	r2, [pc, #84]	; (8001f28 <HAL_PCD_MspInit+0x134>)
 8001ed2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ed6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed8:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <HAL_PCD_MspInit+0x134>)
 8001eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HAL_PCD_MspInit+0x134>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d114      	bne.n	8001f1a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef0:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <HAL_PCD_MspInit+0x134>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	4a0c      	ldr	r2, [pc, #48]	; (8001f28 <HAL_PCD_MspInit+0x134>)
 8001ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efa:	6593      	str	r3, [r2, #88]	; 0x58
 8001efc:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_PCD_MspInit+0x134>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001f08:	f002 f97c 	bl	8004204 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_PCD_MspInit+0x134>)
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f10:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <HAL_PCD_MspInit+0x134>)
 8001f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f16:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001f18:	e001      	b.n	8001f1e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001f1a:	f002 f973 	bl	8004204 <HAL_PWREx_EnableVddUSB>
}
 8001f1e:	bf00      	nop
 8001f20:	37b0      	adds	r7, #176	; 0xb0
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000

08001f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <NMI_Handler+0x4>

08001f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f36:	e7fe      	b.n	8001f36 <HardFault_Handler+0x4>

08001f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <MemManage_Handler+0x4>

08001f3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f42:	e7fe      	b.n	8001f42 <BusFault_Handler+0x4>

08001f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <UsageFault_Handler+0x4>

08001f4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f78:	f000 fbc4 	bl	8002704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001f84:	2020      	movs	r0, #32
 8001f86:	f001 f921 	bl	80031cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001f8a:	2040      	movs	r0, #64	; 0x40
 8001f8c:	f001 f91e 	bl	80031cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001f90:	2080      	movs	r0, #128	; 0x80
 8001f92:	f001 f91b 	bl	80031cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001f96:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f9a:	f001 f917 	bl	80031cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001fa6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001faa:	f001 f90f 	bl	80031cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001fae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001fb2:	f001 f90b 	bl	80031cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001fb6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fba:	f001 f907 	bl	80031cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001fbe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001fc2:	f001 f903 	bl	80031cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001fc6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001fca:	f001 f8ff 	bl	80031cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
  return 1;
 8001fd6:	2301      	movs	r3, #1
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <_kill>:

int _kill(int pid, int sig)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fec:	f005 faea 	bl	80075c4 <__errno>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2216      	movs	r2, #22
 8001ff4:	601a      	str	r2, [r3, #0]
  return -1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <_exit>:

void _exit (int status)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800200a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff ffe7 	bl	8001fe2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002014:	e7fe      	b.n	8002014 <_exit+0x12>

08002016 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	e00a      	b.n	800203e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002028:	f3af 8000 	nop.w
 800202c:	4601      	mov	r1, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	60ba      	str	r2, [r7, #8]
 8002034:	b2ca      	uxtb	r2, r1
 8002036:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	3301      	adds	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	429a      	cmp	r2, r3
 8002044:	dbf0      	blt.n	8002028 <_read+0x12>
  }

  return len;
 8002046:	687b      	ldr	r3, [r7, #4]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	e009      	b.n	8002076 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	60ba      	str	r2, [r7, #8]
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe ff64 	bl	8000f38 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	3301      	adds	r3, #1
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	429a      	cmp	r2, r3
 800207c:	dbf1      	blt.n	8002062 <_write+0x12>
  }
  return len;
 800207e:	687b      	ldr	r3, [r7, #4]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <_close>:

int _close(int file)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020b0:	605a      	str	r2, [r3, #4]
  return 0;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <_isatty>:

int _isatty(int file)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020c8:	2301      	movs	r3, #1
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b085      	sub	sp, #20
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f8:	4a14      	ldr	r2, [pc, #80]	; (800214c <_sbrk+0x5c>)
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <_sbrk+0x60>)
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002104:	4b13      	ldr	r3, [pc, #76]	; (8002154 <_sbrk+0x64>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <_sbrk+0x64>)
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <_sbrk+0x68>)
 8002110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <_sbrk+0x64>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	429a      	cmp	r2, r3
 800211e:	d207      	bcs.n	8002130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002120:	f005 fa50 	bl	80075c4 <__errno>
 8002124:	4603      	mov	r3, r0
 8002126:	220c      	movs	r2, #12
 8002128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800212e:	e009      	b.n	8002144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <_sbrk+0x64>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002136:	4b07      	ldr	r3, [pc, #28]	; (8002154 <_sbrk+0x64>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	4a05      	ldr	r2, [pc, #20]	; (8002154 <_sbrk+0x64>)
 8002140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002142:	68fb      	ldr	r3, [r7, #12]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20018000 	.word	0x20018000
 8002150:	00000400 	.word	0x00000400
 8002154:	200009ec 	.word	0x200009ec
 8002158:	20000bc0 	.word	0x20000bc0

0800215c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <SystemInit+0x20>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	4a05      	ldr	r2, [pc, #20]	; (800217c <SystemInit+0x20>)
 8002168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800216c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002180:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002184:	f7ff ffea 	bl	800215c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002188:	480c      	ldr	r0, [pc, #48]	; (80021bc <LoopForever+0x6>)
  ldr r1, =_edata
 800218a:	490d      	ldr	r1, [pc, #52]	; (80021c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800218c:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <LoopForever+0xe>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002190:	e002      	b.n	8002198 <LoopCopyDataInit>

08002192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002196:	3304      	adds	r3, #4

08002198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800219c:	d3f9      	bcc.n	8002192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219e:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021a0:	4c0a      	ldr	r4, [pc, #40]	; (80021cc <LoopForever+0x16>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a4:	e001      	b.n	80021aa <LoopFillZerobss>

080021a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a8:	3204      	adds	r2, #4

080021aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ac:	d3fb      	bcc.n	80021a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ae:	f005 fa0f 	bl	80075d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021b2:	f7fe feef 	bl	8000f94 <main>

080021b6 <LoopForever>:

LoopForever:
    b LoopForever
 80021b6:	e7fe      	b.n	80021b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80021bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80021c4:	08009c94 	.word	0x08009c94
  ldr r2, =_sbss
 80021c8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80021cc:	20000bbc 	.word	0x20000bbc

080021d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021d0:	e7fe      	b.n	80021d0 <ADC1_2_IRQHandler>
	...

080021d4 <BSP_LED_Toggle>:
  * @param  Led  LED to be toggled
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	4a06      	ldr	r2, [pc, #24]	; (80021fc <BSP_LED_Toggle+0x28>)
 80021e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021ea:	b292      	uxth	r2, r2
 80021ec:	4611      	mov	r1, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 ffd2 	bl	8003198 <HAL_GPIO_TogglePin>
}
 80021f4:	bf00      	nop
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000004 	.word	0x20000004

08002200 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	; 0x28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002208:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <I2Cx_MspInit+0xa8>)
 800220a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220c:	4a26      	ldr	r2, [pc, #152]	; (80022a8 <I2Cx_MspInit+0xa8>)
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002214:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <I2Cx_MspInit+0xa8>)
 8002216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002220:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002224:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002226:	2312      	movs	r3, #18
 8002228:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800222a:	2301      	movs	r3, #1
 800222c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222e:	2303      	movs	r3, #3
 8002230:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002232:	2304      	movs	r3, #4
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4619      	mov	r1, r3
 800223c:	481b      	ldr	r0, [pc, #108]	; (80022ac <I2Cx_MspInit+0xac>)
 800223e:	f000 fcf5 	bl	8002c2c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4619      	mov	r1, r3
 8002248:	4818      	ldr	r0, [pc, #96]	; (80022ac <I2Cx_MspInit+0xac>)
 800224a:	f000 fcef 	bl	8002c2c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800224e:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <I2Cx_MspInit+0xa8>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <I2Cx_MspInit+0xa8>)
 8002254:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002258:	6593      	str	r3, [r2, #88]	; 0x58
 800225a:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <I2Cx_MspInit+0xa8>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <I2Cx_MspInit+0xa8>)
 8002268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226a:	4a0f      	ldr	r2, [pc, #60]	; (80022a8 <I2Cx_MspInit+0xa8>)
 800226c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002270:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002272:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <I2Cx_MspInit+0xa8>)
 8002274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002276:	4a0c      	ldr	r2, [pc, #48]	; (80022a8 <I2Cx_MspInit+0xa8>)
 8002278:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800227c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	210f      	movs	r1, #15
 8002282:	2021      	movs	r0, #33	; 0x21
 8002284:	f000 fb8f 	bl	80029a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002288:	2021      	movs	r0, #33	; 0x21
 800228a:	f000 fba8 	bl	80029de <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	210f      	movs	r1, #15
 8002292:	2022      	movs	r0, #34	; 0x22
 8002294:	f000 fb87 	bl	80029a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002298:	2022      	movs	r0, #34	; 0x22
 800229a:	f000 fba0 	bl	80029de <HAL_NVIC_EnableIRQ>
}
 800229e:	bf00      	nop
 80022a0:	3728      	adds	r7, #40	; 0x28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	48000400 	.word	0x48000400

080022b0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a12      	ldr	r2, [pc, #72]	; (8002304 <I2Cx_Init+0x54>)
 80022bc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a11      	ldr	r2, [pc, #68]	; (8002308 <I2Cx_Init+0x58>)
 80022c2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff ff89 	bl	8002200 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 ff84 	bl	80031fc <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80022f4:	2100      	movs	r1, #0
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f001 fd30 	bl	8003d5c <HAL_I2CEx_ConfigAnalogFilter>
}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40005800 	.word	0x40005800
 8002308:	00702681 	.word	0x00702681

0800230c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	; 0x28
 8002310:	af04      	add	r7, sp, #16
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	4608      	mov	r0, r1
 8002316:	4611      	mov	r1, r2
 8002318:	461a      	mov	r2, r3
 800231a:	4603      	mov	r3, r0
 800231c:	72fb      	strb	r3, [r7, #11]
 800231e:	460b      	mov	r3, r1
 8002320:	813b      	strh	r3, [r7, #8]
 8002322:	4613      	mov	r3, r2
 8002324:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800232a:	7afb      	ldrb	r3, [r7, #11]
 800232c:	b299      	uxth	r1, r3
 800232e:	88f8      	ldrh	r0, [r7, #6]
 8002330:	893a      	ldrh	r2, [r7, #8]
 8002332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002336:	9302      	str	r3, [sp, #8]
 8002338:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	4603      	mov	r3, r0
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f001 f938 	bl	80035b8 <HAL_I2C_Mem_Read>
 8002348:	4603      	mov	r3, r0
 800234a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800234c:	7dfb      	ldrb	r3, [r7, #23]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d004      	beq.n	800235c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002352:	7afb      	ldrb	r3, [r7, #11]
 8002354:	4619      	mov	r1, r3
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f832 	bl	80023c0 <I2Cx_Error>
  }
  return status;
 800235c:	7dfb      	ldrb	r3, [r7, #23]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b08a      	sub	sp, #40	; 0x28
 800236a:	af04      	add	r7, sp, #16
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	4608      	mov	r0, r1
 8002370:	4611      	mov	r1, r2
 8002372:	461a      	mov	r2, r3
 8002374:	4603      	mov	r3, r0
 8002376:	72fb      	strb	r3, [r7, #11]
 8002378:	460b      	mov	r3, r1
 800237a:	813b      	strh	r3, [r7, #8]
 800237c:	4613      	mov	r3, r2
 800237e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002384:	7afb      	ldrb	r3, [r7, #11]
 8002386:	b299      	uxth	r1, r3
 8002388:	88f8      	ldrh	r0, [r7, #6]
 800238a:	893a      	ldrh	r2, [r7, #8]
 800238c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	4603      	mov	r3, r0
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 fff7 	bl	8003390 <HAL_I2C_Mem_Write>
 80023a2:	4603      	mov	r3, r0
 80023a4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80023a6:	7dfb      	ldrb	r3, [r7, #23]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d004      	beq.n	80023b6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80023ac:	7afb      	ldrb	r3, [r7, #11]
 80023ae:	4619      	mov	r1, r3
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f805 	bl	80023c0 <I2Cx_Error>
  }
  return status;
 80023b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 ffb0 	bl	8003332 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff ff6c 	bl	80022b0 <I2Cx_Init>
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <SENSOR_IO_Init+0x10>)
 80023e6:	f7ff ff63 	bl	80022b0 <I2Cx_Init>
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200009f0 	.word	0x200009f0

080023f4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af02      	add	r7, sp, #8
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
 80023fe:	460b      	mov	r3, r1
 8002400:	71bb      	strb	r3, [r7, #6]
 8002402:	4613      	mov	r3, r2
 8002404:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002406:	79bb      	ldrb	r3, [r7, #6]
 8002408:	b29a      	uxth	r2, r3
 800240a:	79f9      	ldrb	r1, [r7, #7]
 800240c:	2301      	movs	r3, #1
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	1d7b      	adds	r3, r7, #5
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2301      	movs	r3, #1
 8002416:	4803      	ldr	r0, [pc, #12]	; (8002424 <SENSOR_IO_Write+0x30>)
 8002418:	f7ff ffa5 	bl	8002366 <I2Cx_WriteMultiple>
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	200009f0 	.word	0x200009f0

08002428 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af02      	add	r7, sp, #8
 800242e:	4603      	mov	r3, r0
 8002430:	460a      	mov	r2, r1
 8002432:	71fb      	strb	r3, [r7, #7]
 8002434:	4613      	mov	r3, r2
 8002436:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800243c:	79bb      	ldrb	r3, [r7, #6]
 800243e:	b29a      	uxth	r2, r3
 8002440:	79f9      	ldrb	r1, [r7, #7]
 8002442:	2301      	movs	r3, #1
 8002444:	9301      	str	r3, [sp, #4]
 8002446:	f107 030f 	add.w	r3, r7, #15
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	2301      	movs	r3, #1
 800244e:	4804      	ldr	r0, [pc, #16]	; (8002460 <SENSOR_IO_Read+0x38>)
 8002450:	f7ff ff5c 	bl	800230c <I2Cx_ReadMultiple>

  return read_value;
 8002454:	7bfb      	ldrb	r3, [r7, #15]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200009f0 	.word	0x200009f0

08002464 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af02      	add	r7, sp, #8
 800246a:	603a      	str	r2, [r7, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
 8002472:	460b      	mov	r3, r1
 8002474:	71bb      	strb	r3, [r7, #6]
 8002476:	4613      	mov	r3, r2
 8002478:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800247a:	79bb      	ldrb	r3, [r7, #6]
 800247c:	b29a      	uxth	r2, r3
 800247e:	79f9      	ldrb	r1, [r7, #7]
 8002480:	88bb      	ldrh	r3, [r7, #4]
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	2301      	movs	r3, #1
 800248a:	4804      	ldr	r0, [pc, #16]	; (800249c <SENSOR_IO_ReadMultiple+0x38>)
 800248c:	f7ff ff3e 	bl	800230c <I2Cx_ReadMultiple>
 8002490:	4603      	mov	r3, r0
 8002492:	b29b      	uxth	r3, r3
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	200009f0 	.word	0x200009f0

080024a0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <BSP_TSENSOR_Init+0x30>)
 80024ac:	4a09      	ldr	r2, [pc, #36]	; (80024d4 <BSP_TSENSOR_Init+0x34>)
 80024ae:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80024b0:	f7ff ff96 	bl	80023e0 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <BSP_TSENSOR_Init+0x30>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2100      	movs	r1, #0
 80024bc:	20be      	movs	r0, #190	; 0xbe
 80024be:	4798      	blx	r3

  ret = TSENSOR_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80024c4:	79fb      	ldrb	r3, [r7, #7]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000a44 	.word	0x20000a44
 80024d4:	20000008 	.word	0x20000008

080024d8 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80024dc:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <BSP_TSENSOR_ReadTemp+0x18>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	20be      	movs	r0, #190	; 0xbe
 80024e4:	4798      	blx	r3
 80024e6:	eef0 7a40 	vmov.f32	s15, s0
}
 80024ea:	eeb0 0a67 	vmov.f32	s0, s15
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000a44 	.word	0x20000a44

080024f4 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	6039      	str	r1, [r7, #0]
 80024fe:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002500:	88fb      	ldrh	r3, [r7, #6]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2120      	movs	r1, #32
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff ff8e 	bl	8002428 <SENSOR_IO_Read>
 800250c:	4603      	mov	r3, r0
 800250e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	f023 0304 	bic.w	r3, r3, #4
 8002516:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	f043 0304 	orr.w	r3, r3, #4
 800251e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	f023 0303 	bic.w	r3, r3, #3
 8002526:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002536:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	7bfa      	ldrb	r2, [r7, #15]
 800253e:	2120      	movs	r1, #32
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff57 	bl	80023f4 <SENSOR_IO_Write>
}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b088      	sub	sp, #32
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002558:	88fb      	ldrh	r3, [r7, #6]
 800255a:	b2d8      	uxtb	r0, r3
 800255c:	f107 0208 	add.w	r2, r7, #8
 8002560:	2302      	movs	r3, #2
 8002562:	21b2      	movs	r1, #178	; 0xb2
 8002564:	f7ff ff7e 	bl	8002464 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2135      	movs	r1, #53	; 0x35
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff ff5a 	bl	8002428 <SENSOR_IO_Read>
 8002574:	4603      	mov	r3, r0
 8002576:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002578:	7ffb      	ldrb	r3, [r7, #31]
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	b21b      	sxth	r3, r3
 800257e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002582:	b21a      	sxth	r2, r3
 8002584:	7a3b      	ldrb	r3, [r7, #8]
 8002586:	b21b      	sxth	r3, r3
 8002588:	4313      	orrs	r3, r2
 800258a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800258c:	7ffb      	ldrb	r3, [r7, #31]
 800258e:	019b      	lsls	r3, r3, #6
 8002590:	b21b      	sxth	r3, r3
 8002592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002596:	b21a      	sxth	r2, r3
 8002598:	7a7b      	ldrb	r3, [r7, #9]
 800259a:	b21b      	sxth	r3, r3
 800259c:	4313      	orrs	r3, r2
 800259e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80025a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80025a4:	10db      	asrs	r3, r3, #3
 80025a6:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80025a8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80025ac:	10db      	asrs	r3, r3, #3
 80025ae:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	b2d8      	uxtb	r0, r3
 80025b4:	f107 0208 	add.w	r2, r7, #8
 80025b8:	2304      	movs	r3, #4
 80025ba:	21bc      	movs	r1, #188	; 0xbc
 80025bc:	f7ff ff52 	bl	8002464 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80025c0:	7a7b      	ldrb	r3, [r7, #9]
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	b21a      	sxth	r2, r3
 80025c6:	7a3b      	ldrb	r3, [r7, #8]
 80025c8:	b21b      	sxth	r3, r3
 80025ca:	4313      	orrs	r3, r2
 80025cc:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80025ce:	7afb      	ldrb	r3, [r7, #11]
 80025d0:	021b      	lsls	r3, r3, #8
 80025d2:	b21a      	sxth	r2, r3
 80025d4:	7abb      	ldrb	r3, [r7, #10]
 80025d6:	b21b      	sxth	r3, r3
 80025d8:	4313      	orrs	r3, r2
 80025da:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80025dc:	88fb      	ldrh	r3, [r7, #6]
 80025de:	b2d8      	uxtb	r0, r3
 80025e0:	f107 0208 	add.w	r2, r7, #8
 80025e4:	2302      	movs	r3, #2
 80025e6:	21aa      	movs	r1, #170	; 0xaa
 80025e8:	f7ff ff3c 	bl	8002464 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80025ec:	7a7b      	ldrb	r3, [r7, #9]
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	b21a      	sxth	r2, r3
 80025f2:	7a3b      	ldrb	r3, [r7, #8]
 80025f4:	b21b      	sxth	r3, r3
 80025f6:	4313      	orrs	r3, r2
 80025f8:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80025fa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80025fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	ee07 3a90 	vmov	s15, r3
 8002608:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800260c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002610:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	ee07 3a90 	vmov	s15, r3
 800261a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800261e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002622:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002626:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	ee07 3a90 	vmov	s15, r3
 8002630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002634:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002638:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800263c:	ee07 3a90 	vmov	s15, r3
 8002640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002648:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	ee07 3a90 	vmov	s15, r3
}
 8002652:	eeb0 0a67 	vmov.f32	s0, s15
 8002656:	3720      	adds	r7, #32
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002666:	2003      	movs	r0, #3
 8002668:	f000 f992 	bl	8002990 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800266c:	2000      	movs	r0, #0
 800266e:	f000 f80d 	bl	800268c <HAL_InitTick>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	71fb      	strb	r3, [r7, #7]
 800267c:	e001      	b.n	8002682 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800267e:	f7ff f93f 	bl	8001900 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002682:	79fb      	ldrb	r3, [r7, #7]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002698:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <HAL_InitTick+0x6c>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d023      	beq.n	80026e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026a0:	4b16      	ldr	r3, [pc, #88]	; (80026fc <HAL_InitTick+0x70>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <HAL_InitTick+0x6c>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	4619      	mov	r1, r3
 80026aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80026b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f99f 	bl	80029fa <HAL_SYSTICK_Config>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10f      	bne.n	80026e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b0f      	cmp	r3, #15
 80026c6:	d809      	bhi.n	80026dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c8:	2200      	movs	r2, #0
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026d0:	f000 f969 	bl	80029a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026d4:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <HAL_InitTick+0x74>)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	e007      	b.n	80026ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
 80026e0:	e004      	b.n	80026ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]
 80026e6:	e001      	b.n	80026ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	2000001c 	.word	0x2000001c
 80026fc:	20000000 	.word	0x20000000
 8002700:	20000018 	.word	0x20000018

08002704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_IncTick+0x20>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_IncTick+0x24>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4413      	add	r3, r2
 8002714:	4a04      	ldr	r2, [pc, #16]	; (8002728 <HAL_IncTick+0x24>)
 8002716:	6013      	str	r3, [r2, #0]
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	2000001c 	.word	0x2000001c
 8002728:	20000a48 	.word	0x20000a48

0800272c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return uwTick;
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <HAL_GetTick+0x14>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000a48 	.word	0x20000a48

08002744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800274c:	f7ff ffee 	bl	800272c <HAL_GetTick>
 8002750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800275c:	d005      	beq.n	800276a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <HAL_Delay+0x44>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4413      	add	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800276a:	bf00      	nop
 800276c:	f7ff ffde 	bl	800272c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	429a      	cmp	r2, r3
 800277a:	d8f7      	bhi.n	800276c <HAL_Delay+0x28>
  {
  }
}
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	2000001c 	.word	0x2000001c

0800278c <HAL_GetDEVID>:
/**
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <HAL_GetDEVID+0x18>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e0042000 	.word	0xe0042000

080027a8 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80027ac:	4b03      	ldr	r3, [pc, #12]	; (80027bc <HAL_GetUIDw0+0x14>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	1fff7590 	.word	0x1fff7590

080027c0 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <HAL_GetUIDw1+0x14>)
 80027c6:	681b      	ldr	r3, [r3, #0]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	1fff7594 	.word	0x1fff7594

080027d8 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80027dc:	4b03      	ldr	r3, [pc, #12]	; (80027ec <HAL_GetUIDw2+0x14>)
 80027de:	681b      	ldr	r3, [r3, #0]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	1fff7598 	.word	0x1fff7598

080027f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <__NVIC_SetPriorityGrouping+0x44>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800280c:	4013      	ands	r3, r2
 800280e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800281c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002822:	4a04      	ldr	r2, [pc, #16]	; (8002834 <__NVIC_SetPriorityGrouping+0x44>)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	60d3      	str	r3, [r2, #12]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <__NVIC_GetPriorityGrouping+0x18>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	0a1b      	lsrs	r3, r3, #8
 8002842:	f003 0307 	and.w	r3, r3, #7
}
 8002846:	4618      	mov	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	2b00      	cmp	r3, #0
 8002864:	db0b      	blt.n	800287e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	f003 021f 	and.w	r2, r3, #31
 800286c:	4907      	ldr	r1, [pc, #28]	; (800288c <__NVIC_EnableIRQ+0x38>)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	2001      	movs	r0, #1
 8002876:	fa00 f202 	lsl.w	r2, r0, r2
 800287a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	e000e100 	.word	0xe000e100

08002890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	6039      	str	r1, [r7, #0]
 800289a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800289c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	db0a      	blt.n	80028ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	490c      	ldr	r1, [pc, #48]	; (80028dc <__NVIC_SetPriority+0x4c>)
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	0112      	lsls	r2, r2, #4
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	440b      	add	r3, r1
 80028b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b8:	e00a      	b.n	80028d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4908      	ldr	r1, [pc, #32]	; (80028e0 <__NVIC_SetPriority+0x50>)
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	3b04      	subs	r3, #4
 80028c8:	0112      	lsls	r2, r2, #4
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	440b      	add	r3, r1
 80028ce:	761a      	strb	r2, [r3, #24]
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	e000e100 	.word	0xe000e100
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b089      	sub	sp, #36	; 0x24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f1c3 0307 	rsb	r3, r3, #7
 80028fe:	2b04      	cmp	r3, #4
 8002900:	bf28      	it	cs
 8002902:	2304      	movcs	r3, #4
 8002904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3304      	adds	r3, #4
 800290a:	2b06      	cmp	r3, #6
 800290c:	d902      	bls.n	8002914 <NVIC_EncodePriority+0x30>
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3b03      	subs	r3, #3
 8002912:	e000      	b.n	8002916 <NVIC_EncodePriority+0x32>
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43da      	mvns	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	401a      	ands	r2, r3
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800292c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	43d9      	mvns	r1, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800293c:	4313      	orrs	r3, r2
         );
}
 800293e:	4618      	mov	r0, r3
 8002940:	3724      	adds	r7, #36	; 0x24
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3b01      	subs	r3, #1
 8002958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800295c:	d301      	bcc.n	8002962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800295e:	2301      	movs	r3, #1
 8002960:	e00f      	b.n	8002982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002962:	4a0a      	ldr	r2, [pc, #40]	; (800298c <SysTick_Config+0x40>)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3b01      	subs	r3, #1
 8002968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800296a:	210f      	movs	r1, #15
 800296c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002970:	f7ff ff8e 	bl	8002890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002974:	4b05      	ldr	r3, [pc, #20]	; (800298c <SysTick_Config+0x40>)
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800297a:	4b04      	ldr	r3, [pc, #16]	; (800298c <SysTick_Config+0x40>)
 800297c:	2207      	movs	r2, #7
 800297e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	e000e010 	.word	0xe000e010

08002990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ff29 	bl	80027f0 <__NVIC_SetPriorityGrouping>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b086      	sub	sp, #24
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	4603      	mov	r3, r0
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029b8:	f7ff ff3e 	bl	8002838 <__NVIC_GetPriorityGrouping>
 80029bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	6978      	ldr	r0, [r7, #20]
 80029c4:	f7ff ff8e 	bl	80028e4 <NVIC_EncodePriority>
 80029c8:	4602      	mov	r2, r0
 80029ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ce:	4611      	mov	r1, r2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff5d 	bl	8002890 <__NVIC_SetPriority>
}
 80029d6:	bf00      	nop
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	4603      	mov	r3, r0
 80029e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff31 	bl	8002854 <__NVIC_EnableIRQ>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff ffa2 	bl	800294c <SysTick_Config>
 8002a08:	4603      	mov	r3, r0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e0ac      	b.n	8002b80 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 f8b2 	bl	8002b94 <DFSDM_GetChannelFromInstance>
 8002a30:	4603      	mov	r3, r0
 8002a32:	4a55      	ldr	r2, [pc, #340]	; (8002b88 <HAL_DFSDM_ChannelInit+0x174>)
 8002a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e09f      	b.n	8002b80 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7fe ff81 	bl	8001948 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002a46:	4b51      	ldr	r3, [pc, #324]	; (8002b8c <HAL_DFSDM_ChannelInit+0x178>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	4a4f      	ldr	r2, [pc, #316]	; (8002b8c <HAL_DFSDM_ChannelInit+0x178>)
 8002a4e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002a50:	4b4e      	ldr	r3, [pc, #312]	; (8002b8c <HAL_DFSDM_ChannelInit+0x178>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d125      	bne.n	8002aa4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002a58:	4b4d      	ldr	r3, [pc, #308]	; (8002b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a4c      	ldr	r2, [pc, #304]	; (8002b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a62:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002a64:	4b4a      	ldr	r3, [pc, #296]	; (8002b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4948      	ldr	r1, [pc, #288]	; (8002b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002a72:	4b47      	ldr	r3, [pc, #284]	; (8002b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a46      	ldr	r2, [pc, #280]	; (8002b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a78:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002a7c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	791b      	ldrb	r3, [r3, #4]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d108      	bne.n	8002a98 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002a86:	4b42      	ldr	r3, [pc, #264]	; (8002b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	041b      	lsls	r3, r3, #16
 8002a92:	493f      	ldr	r1, [pc, #252]	; (8002b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002a98:	4b3d      	ldr	r3, [pc, #244]	; (8002b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a3c      	ldr	r2, [pc, #240]	; (8002b90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002ab2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6819      	ldr	r1, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002ac2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002ac8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 020f 	bic.w	r2, r2, #15
 8002ae0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6819      	ldr	r1, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002b08:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6899      	ldr	r1, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f002 0207 	and.w	r2, r2, #7
 8002b34:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6859      	ldr	r1, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b60:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f810 	bl	8002b94 <DFSDM_GetChannelFromInstance>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4904      	ldr	r1, [pc, #16]	; (8002b88 <HAL_DFSDM_ChannelInit+0x174>)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20000a50 	.word	0x20000a50
 8002b8c:	20000a4c 	.word	0x20000a4c
 8002b90:	40016000 	.word	0x40016000

08002b94 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a1c      	ldr	r2, [pc, #112]	; (8002c10 <DFSDM_GetChannelFromInstance+0x7c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d102      	bne.n	8002baa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	e02b      	b.n	8002c02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a19      	ldr	r2, [pc, #100]	; (8002c14 <DFSDM_GetChannelFromInstance+0x80>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d102      	bne.n	8002bb8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	e024      	b.n	8002c02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a17      	ldr	r2, [pc, #92]	; (8002c18 <DFSDM_GetChannelFromInstance+0x84>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d102      	bne.n	8002bc6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	e01d      	b.n	8002c02 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a14      	ldr	r2, [pc, #80]	; (8002c1c <DFSDM_GetChannelFromInstance+0x88>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d102      	bne.n	8002bd4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002bce:	2304      	movs	r3, #4
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	e016      	b.n	8002c02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a12      	ldr	r2, [pc, #72]	; (8002c20 <DFSDM_GetChannelFromInstance+0x8c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d102      	bne.n	8002be2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002bdc:	2305      	movs	r3, #5
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	e00f      	b.n	8002c02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <DFSDM_GetChannelFromInstance+0x90>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d102      	bne.n	8002bf0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002bea:	2306      	movs	r3, #6
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	e008      	b.n	8002c02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a0d      	ldr	r2, [pc, #52]	; (8002c28 <DFSDM_GetChannelFromInstance+0x94>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d102      	bne.n	8002bfe <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002bf8:	2307      	movs	r3, #7
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	e001      	b.n	8002c02 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002c02:	68fb      	ldr	r3, [r7, #12]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	40016000 	.word	0x40016000
 8002c14:	40016020 	.word	0x40016020
 8002c18:	40016040 	.word	0x40016040
 8002c1c:	40016080 	.word	0x40016080
 8002c20:	400160a0 	.word	0x400160a0
 8002c24:	400160c0 	.word	0x400160c0
 8002c28:	400160e0 	.word	0x400160e0

08002c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c3a:	e17f      	b.n	8002f3c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	2101      	movs	r1, #1
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	fa01 f303 	lsl.w	r3, r1, r3
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 8171 	beq.w	8002f36 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d005      	beq.n	8002c6c <HAL_GPIO_Init+0x40>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d130      	bne.n	8002cce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	2203      	movs	r2, #3
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	091b      	lsrs	r3, r3, #4
 8002cb8:	f003 0201 	and.w	r2, r3, #1
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d118      	bne.n	8002d0c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	08db      	lsrs	r3, r3, #3
 8002cf6:	f003 0201 	and.w	r2, r3, #1
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d017      	beq.n	8002d48 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	2203      	movs	r2, #3
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d123      	bne.n	8002d9c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	08da      	lsrs	r2, r3, #3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3208      	adds	r2, #8
 8002d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d60:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	220f      	movs	r2, #15
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	08da      	lsrs	r2, r3, #3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3208      	adds	r2, #8
 8002d96:	6939      	ldr	r1, [r7, #16]
 8002d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	2203      	movs	r2, #3
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4013      	ands	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 0203 	and.w	r2, r3, #3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 80ac 	beq.w	8002f36 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dde:	4b5f      	ldr	r3, [pc, #380]	; (8002f5c <HAL_GPIO_Init+0x330>)
 8002de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de2:	4a5e      	ldr	r2, [pc, #376]	; (8002f5c <HAL_GPIO_Init+0x330>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6613      	str	r3, [r2, #96]	; 0x60
 8002dea:	4b5c      	ldr	r3, [pc, #368]	; (8002f5c <HAL_GPIO_Init+0x330>)
 8002dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002df6:	4a5a      	ldr	r2, [pc, #360]	; (8002f60 <HAL_GPIO_Init+0x334>)
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	3302      	adds	r3, #2
 8002dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e02:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	220f      	movs	r2, #15
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4013      	ands	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e20:	d025      	beq.n	8002e6e <HAL_GPIO_Init+0x242>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a4f      	ldr	r2, [pc, #316]	; (8002f64 <HAL_GPIO_Init+0x338>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d01f      	beq.n	8002e6a <HAL_GPIO_Init+0x23e>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a4e      	ldr	r2, [pc, #312]	; (8002f68 <HAL_GPIO_Init+0x33c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d019      	beq.n	8002e66 <HAL_GPIO_Init+0x23a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4d      	ldr	r2, [pc, #308]	; (8002f6c <HAL_GPIO_Init+0x340>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d013      	beq.n	8002e62 <HAL_GPIO_Init+0x236>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4c      	ldr	r2, [pc, #304]	; (8002f70 <HAL_GPIO_Init+0x344>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00d      	beq.n	8002e5e <HAL_GPIO_Init+0x232>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4b      	ldr	r2, [pc, #300]	; (8002f74 <HAL_GPIO_Init+0x348>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d007      	beq.n	8002e5a <HAL_GPIO_Init+0x22e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a4a      	ldr	r2, [pc, #296]	; (8002f78 <HAL_GPIO_Init+0x34c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d101      	bne.n	8002e56 <HAL_GPIO_Init+0x22a>
 8002e52:	2306      	movs	r3, #6
 8002e54:	e00c      	b.n	8002e70 <HAL_GPIO_Init+0x244>
 8002e56:	2307      	movs	r3, #7
 8002e58:	e00a      	b.n	8002e70 <HAL_GPIO_Init+0x244>
 8002e5a:	2305      	movs	r3, #5
 8002e5c:	e008      	b.n	8002e70 <HAL_GPIO_Init+0x244>
 8002e5e:	2304      	movs	r3, #4
 8002e60:	e006      	b.n	8002e70 <HAL_GPIO_Init+0x244>
 8002e62:	2303      	movs	r3, #3
 8002e64:	e004      	b.n	8002e70 <HAL_GPIO_Init+0x244>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e002      	b.n	8002e70 <HAL_GPIO_Init+0x244>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <HAL_GPIO_Init+0x244>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	f002 0203 	and.w	r2, r2, #3
 8002e76:	0092      	lsls	r2, r2, #2
 8002e78:	4093      	lsls	r3, r2
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e80:	4937      	ldr	r1, [pc, #220]	; (8002f60 <HAL_GPIO_Init+0x334>)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	089b      	lsrs	r3, r3, #2
 8002e86:	3302      	adds	r3, #2
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e8e:	4b3b      	ldr	r3, [pc, #236]	; (8002f7c <HAL_GPIO_Init+0x350>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	43db      	mvns	r3, r3
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002eb2:	4a32      	ldr	r2, [pc, #200]	; (8002f7c <HAL_GPIO_Init+0x350>)
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002eb8:	4b30      	ldr	r3, [pc, #192]	; (8002f7c <HAL_GPIO_Init+0x350>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002edc:	4a27      	ldr	r2, [pc, #156]	; (8002f7c <HAL_GPIO_Init+0x350>)
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ee2:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <HAL_GPIO_Init+0x350>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f06:	4a1d      	ldr	r2, [pc, #116]	; (8002f7c <HAL_GPIO_Init+0x350>)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f0c:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <HAL_GPIO_Init+0x350>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f30:	4a12      	ldr	r2, [pc, #72]	; (8002f7c <HAL_GPIO_Init+0x350>)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	fa22 f303 	lsr.w	r3, r2, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f47f ae78 	bne.w	8002c3c <HAL_GPIO_Init+0x10>
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	bf00      	nop
 8002f50:	371c      	adds	r7, #28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40010000 	.word	0x40010000
 8002f64:	48000400 	.word	0x48000400
 8002f68:	48000800 	.word	0x48000800
 8002f6c:	48000c00 	.word	0x48000c00
 8002f70:	48001000 	.word	0x48001000
 8002f74:	48001400 	.word	0x48001400
 8002f78:	48001800 	.word	0x48001800
 8002f7c:	40010400 	.word	0x40010400

08002f80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b087      	sub	sp, #28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002f8e:	e0cd      	b.n	800312c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002f90:	2201      	movs	r2, #1
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80c0 	beq.w	8003126 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002fa6:	4a68      	ldr	r2, [pc, #416]	; (8003148 <HAL_GPIO_DeInit+0x1c8>)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	089b      	lsrs	r3, r3, #2
 8002fac:	3302      	adds	r3, #2
 8002fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	220f      	movs	r2, #15
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fce:	d025      	beq.n	800301c <HAL_GPIO_DeInit+0x9c>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a5e      	ldr	r2, [pc, #376]	; (800314c <HAL_GPIO_DeInit+0x1cc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d01f      	beq.n	8003018 <HAL_GPIO_DeInit+0x98>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a5d      	ldr	r2, [pc, #372]	; (8003150 <HAL_GPIO_DeInit+0x1d0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d019      	beq.n	8003014 <HAL_GPIO_DeInit+0x94>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a5c      	ldr	r2, [pc, #368]	; (8003154 <HAL_GPIO_DeInit+0x1d4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d013      	beq.n	8003010 <HAL_GPIO_DeInit+0x90>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a5b      	ldr	r2, [pc, #364]	; (8003158 <HAL_GPIO_DeInit+0x1d8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d00d      	beq.n	800300c <HAL_GPIO_DeInit+0x8c>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a5a      	ldr	r2, [pc, #360]	; (800315c <HAL_GPIO_DeInit+0x1dc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d007      	beq.n	8003008 <HAL_GPIO_DeInit+0x88>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a59      	ldr	r2, [pc, #356]	; (8003160 <HAL_GPIO_DeInit+0x1e0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d101      	bne.n	8003004 <HAL_GPIO_DeInit+0x84>
 8003000:	2306      	movs	r3, #6
 8003002:	e00c      	b.n	800301e <HAL_GPIO_DeInit+0x9e>
 8003004:	2307      	movs	r3, #7
 8003006:	e00a      	b.n	800301e <HAL_GPIO_DeInit+0x9e>
 8003008:	2305      	movs	r3, #5
 800300a:	e008      	b.n	800301e <HAL_GPIO_DeInit+0x9e>
 800300c:	2304      	movs	r3, #4
 800300e:	e006      	b.n	800301e <HAL_GPIO_DeInit+0x9e>
 8003010:	2303      	movs	r3, #3
 8003012:	e004      	b.n	800301e <HAL_GPIO_DeInit+0x9e>
 8003014:	2302      	movs	r3, #2
 8003016:	e002      	b.n	800301e <HAL_GPIO_DeInit+0x9e>
 8003018:	2301      	movs	r3, #1
 800301a:	e000      	b.n	800301e <HAL_GPIO_DeInit+0x9e>
 800301c:	2300      	movs	r3, #0
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	f002 0203 	and.w	r2, r2, #3
 8003024:	0092      	lsls	r2, r2, #2
 8003026:	4093      	lsls	r3, r2
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	429a      	cmp	r2, r3
 800302c:	d132      	bne.n	8003094 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800302e:	4b4d      	ldr	r3, [pc, #308]	; (8003164 <HAL_GPIO_DeInit+0x1e4>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	43db      	mvns	r3, r3
 8003036:	494b      	ldr	r1, [pc, #300]	; (8003164 <HAL_GPIO_DeInit+0x1e4>)
 8003038:	4013      	ands	r3, r2
 800303a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800303c:	4b49      	ldr	r3, [pc, #292]	; (8003164 <HAL_GPIO_DeInit+0x1e4>)
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	43db      	mvns	r3, r3
 8003044:	4947      	ldr	r1, [pc, #284]	; (8003164 <HAL_GPIO_DeInit+0x1e4>)
 8003046:	4013      	ands	r3, r2
 8003048:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800304a:	4b46      	ldr	r3, [pc, #280]	; (8003164 <HAL_GPIO_DeInit+0x1e4>)
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	43db      	mvns	r3, r3
 8003052:	4944      	ldr	r1, [pc, #272]	; (8003164 <HAL_GPIO_DeInit+0x1e4>)
 8003054:	4013      	ands	r3, r2
 8003056:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003058:	4b42      	ldr	r3, [pc, #264]	; (8003164 <HAL_GPIO_DeInit+0x1e4>)
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	43db      	mvns	r3, r3
 8003060:	4940      	ldr	r1, [pc, #256]	; (8003164 <HAL_GPIO_DeInit+0x1e4>)
 8003062:	4013      	ands	r3, r2
 8003064:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	220f      	movs	r2, #15
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003076:	4a34      	ldr	r2, [pc, #208]	; (8003148 <HAL_GPIO_DeInit+0x1c8>)
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	089b      	lsrs	r3, r3, #2
 800307c:	3302      	adds	r3, #2
 800307e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	43da      	mvns	r2, r3
 8003086:	4830      	ldr	r0, [pc, #192]	; (8003148 <HAL_GPIO_DeInit+0x1c8>)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	089b      	lsrs	r3, r3, #2
 800308c:	400a      	ands	r2, r1
 800308e:	3302      	adds	r3, #2
 8003090:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	2103      	movs	r1, #3
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	08da      	lsrs	r2, r3, #3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3208      	adds	r2, #8
 80030b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	220f      	movs	r2, #15
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43db      	mvns	r3, r3
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	08d2      	lsrs	r2, r2, #3
 80030c8:	4019      	ands	r1, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3208      	adds	r2, #8
 80030ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	2103      	movs	r1, #3
 80030dc:	fa01 f303 	lsl.w	r3, r1, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	401a      	ands	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	2101      	movs	r1, #1
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	fa01 f303 	lsl.w	r3, r1, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	401a      	ands	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	2103      	movs	r1, #3
 8003106:	fa01 f303 	lsl.w	r3, r1, r3
 800310a:	43db      	mvns	r3, r3
 800310c:	401a      	ands	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003116:	2101      	movs	r1, #1
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	fa01 f303 	lsl.w	r3, r1, r3
 800311e:	43db      	mvns	r3, r3
 8003120:	401a      	ands	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	3301      	adds	r3, #1
 800312a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	f47f af2b 	bne.w	8002f90 <HAL_GPIO_DeInit+0x10>
  }
}
 800313a:	bf00      	nop
 800313c:	bf00      	nop
 800313e:	371c      	adds	r7, #28
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	40010000 	.word	0x40010000
 800314c:	48000400 	.word	0x48000400
 8003150:	48000800 	.word	0x48000800
 8003154:	48000c00 	.word	0x48000c00
 8003158:	48001000 	.word	0x48001000
 800315c:	48001400 	.word	0x48001400
 8003160:	48001800 	.word	0x48001800
 8003164:	40010400 	.word	0x40010400

08003168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	807b      	strh	r3, [r7, #2]
 8003174:	4613      	mov	r3, r2
 8003176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003178:	787b      	ldrb	r3, [r7, #1]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800317e:	887a      	ldrh	r2, [r7, #2]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003184:	e002      	b.n	800318c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003186:	887a      	ldrh	r2, [r7, #2]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031aa:	887a      	ldrh	r2, [r7, #2]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4013      	ands	r3, r2
 80031b0:	041a      	lsls	r2, r3, #16
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	43d9      	mvns	r1, r3
 80031b6:	887b      	ldrh	r3, [r7, #2]
 80031b8:	400b      	ands	r3, r1
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	619a      	str	r2, [r3, #24]
}
 80031c0:	bf00      	nop
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031d6:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	4013      	ands	r3, r2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d006      	beq.n	80031f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031e2:	4a05      	ldr	r2, [pc, #20]	; (80031f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fd feb6 	bl	8000f5c <HAL_GPIO_EXTI_Callback>
  }
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40010400 	.word	0x40010400

080031fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e08d      	b.n	800332a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fe fbf4 	bl	8001a10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2224      	movs	r2, #36	; 0x24
 800322c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0201 	bic.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800324c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800325c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d107      	bne.n	8003276 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	e006      	b.n	8003284 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003282:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	2b02      	cmp	r3, #2
 800328a:	d108      	bne.n	800329e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800329a:	605a      	str	r2, [r3, #4]
 800329c:	e007      	b.n	80032ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69d9      	ldr	r1, [r3, #28]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1a      	ldr	r2, [r3, #32]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e021      	b.n	8003388 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2224      	movs	r2, #36	; 0x24
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7fe fbb5 	bl	8001acc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	4608      	mov	r0, r1
 800339a:	4611      	mov	r1, r2
 800339c:	461a      	mov	r2, r3
 800339e:	4603      	mov	r3, r0
 80033a0:	817b      	strh	r3, [r7, #10]
 80033a2:	460b      	mov	r3, r1
 80033a4:	813b      	strh	r3, [r7, #8]
 80033a6:	4613      	mov	r3, r2
 80033a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	f040 80f9 	bne.w	80035aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <HAL_I2C_Mem_Write+0x34>
 80033be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d105      	bne.n	80033d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0ed      	b.n	80035ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_I2C_Mem_Write+0x4e>
 80033da:	2302      	movs	r3, #2
 80033dc:	e0e6      	b.n	80035ac <HAL_I2C_Mem_Write+0x21c>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033e6:	f7ff f9a1 	bl	800272c <HAL_GetTick>
 80033ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	2319      	movs	r3, #25
 80033f2:	2201      	movs	r2, #1
 80033f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 fac3 	bl	8003984 <I2C_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0d1      	b.n	80035ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2221      	movs	r2, #33	; 0x21
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2240      	movs	r2, #64	; 0x40
 8003414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a3a      	ldr	r2, [r7, #32]
 8003422:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003428:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003430:	88f8      	ldrh	r0, [r7, #6]
 8003432:	893a      	ldrh	r2, [r7, #8]
 8003434:	8979      	ldrh	r1, [r7, #10]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	9301      	str	r3, [sp, #4]
 800343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	4603      	mov	r3, r0
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f9d3 	bl	80037ec <I2C_RequestMemoryWrite>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0a9      	b.n	80035ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345c:	b29b      	uxth	r3, r3
 800345e:	2bff      	cmp	r3, #255	; 0xff
 8003460:	d90e      	bls.n	8003480 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	22ff      	movs	r2, #255	; 0xff
 8003466:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	b2da      	uxtb	r2, r3
 800346e:	8979      	ldrh	r1, [r7, #10]
 8003470:	2300      	movs	r3, #0
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 fc3d 	bl	8003cf8 <I2C_TransferConfig>
 800347e:	e00f      	b.n	80034a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348e:	b2da      	uxtb	r2, r3
 8003490:	8979      	ldrh	r1, [r7, #10]
 8003492:	2300      	movs	r3, #0
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 fc2c 	bl	8003cf8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 fabc 	bl	8003a22 <I2C_WaitOnTXISFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e07b      	b.n	80035ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	781a      	ldrb	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d034      	beq.n	8003558 <HAL_I2C_Mem_Write+0x1c8>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d130      	bne.n	8003558 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	2200      	movs	r2, #0
 80034fe:	2180      	movs	r1, #128	; 0x80
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 fa3f 	bl	8003984 <I2C_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e04d      	b.n	80035ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003514:	b29b      	uxth	r3, r3
 8003516:	2bff      	cmp	r3, #255	; 0xff
 8003518:	d90e      	bls.n	8003538 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	22ff      	movs	r2, #255	; 0xff
 800351e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003524:	b2da      	uxtb	r2, r3
 8003526:	8979      	ldrh	r1, [r7, #10]
 8003528:	2300      	movs	r3, #0
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 fbe1 	bl	8003cf8 <I2C_TransferConfig>
 8003536:	e00f      	b.n	8003558 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003546:	b2da      	uxtb	r2, r3
 8003548:	8979      	ldrh	r1, [r7, #10]
 800354a:	2300      	movs	r3, #0
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 fbd0 	bl	8003cf8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d19e      	bne.n	80034a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 faa2 	bl	8003ab0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e01a      	b.n	80035ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2220      	movs	r2, #32
 800357c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6859      	ldr	r1, [r3, #4]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <HAL_I2C_Mem_Write+0x224>)
 800358a:	400b      	ands	r3, r1
 800358c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	e000      	b.n	80035ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80035aa:	2302      	movs	r3, #2
  }
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	fe00e800 	.word	0xfe00e800

080035b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	4608      	mov	r0, r1
 80035c2:	4611      	mov	r1, r2
 80035c4:	461a      	mov	r2, r3
 80035c6:	4603      	mov	r3, r0
 80035c8:	817b      	strh	r3, [r7, #10]
 80035ca:	460b      	mov	r3, r1
 80035cc:	813b      	strh	r3, [r7, #8]
 80035ce:	4613      	mov	r3, r2
 80035d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b20      	cmp	r3, #32
 80035dc:	f040 80fd 	bne.w	80037da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_I2C_Mem_Read+0x34>
 80035e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d105      	bne.n	80035f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0f1      	b.n	80037dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <HAL_I2C_Mem_Read+0x4e>
 8003602:	2302      	movs	r3, #2
 8003604:	e0ea      	b.n	80037dc <HAL_I2C_Mem_Read+0x224>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800360e:	f7ff f88d 	bl	800272c <HAL_GetTick>
 8003612:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	2319      	movs	r3, #25
 800361a:	2201      	movs	r2, #1
 800361c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f9af 	bl	8003984 <I2C_WaitOnFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0d5      	b.n	80037dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2222      	movs	r2, #34	; 0x22
 8003634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2240      	movs	r2, #64	; 0x40
 800363c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a3a      	ldr	r2, [r7, #32]
 800364a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003650:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003658:	88f8      	ldrh	r0, [r7, #6]
 800365a:	893a      	ldrh	r2, [r7, #8]
 800365c:	8979      	ldrh	r1, [r7, #10]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	9301      	str	r3, [sp, #4]
 8003662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	4603      	mov	r3, r0
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 f913 	bl	8003894 <I2C_RequestMemoryRead>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0ad      	b.n	80037dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	2bff      	cmp	r3, #255	; 0xff
 8003688:	d90e      	bls.n	80036a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	22ff      	movs	r2, #255	; 0xff
 800368e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003694:	b2da      	uxtb	r2, r3
 8003696:	8979      	ldrh	r1, [r7, #10]
 8003698:	4b52      	ldr	r3, [pc, #328]	; (80037e4 <HAL_I2C_Mem_Read+0x22c>)
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 fb29 	bl	8003cf8 <I2C_TransferConfig>
 80036a6:	e00f      	b.n	80036c8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	8979      	ldrh	r1, [r7, #10]
 80036ba:	4b4a      	ldr	r3, [pc, #296]	; (80037e4 <HAL_I2C_Mem_Read+0x22c>)
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 fb18 	bl	8003cf8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ce:	2200      	movs	r2, #0
 80036d0:	2104      	movs	r1, #4
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 f956 	bl	8003984 <I2C_WaitOnFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e07c      	b.n	80037dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d034      	beq.n	8003788 <HAL_I2C_Mem_Read+0x1d0>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003722:	2b00      	cmp	r3, #0
 8003724:	d130      	bne.n	8003788 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372c:	2200      	movs	r2, #0
 800372e:	2180      	movs	r1, #128	; 0x80
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f927 	bl	8003984 <I2C_WaitOnFlagUntilTimeout>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e04d      	b.n	80037dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003744:	b29b      	uxth	r3, r3
 8003746:	2bff      	cmp	r3, #255	; 0xff
 8003748:	d90e      	bls.n	8003768 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	22ff      	movs	r2, #255	; 0xff
 800374e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003754:	b2da      	uxtb	r2, r3
 8003756:	8979      	ldrh	r1, [r7, #10]
 8003758:	2300      	movs	r3, #0
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 fac9 	bl	8003cf8 <I2C_TransferConfig>
 8003766:	e00f      	b.n	8003788 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003776:	b2da      	uxtb	r2, r3
 8003778:	8979      	ldrh	r1, [r7, #10]
 800377a:	2300      	movs	r3, #0
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 fab8 	bl	8003cf8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d19a      	bne.n	80036c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f98a 	bl	8003ab0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e01a      	b.n	80037dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2220      	movs	r2, #32
 80037ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_I2C_Mem_Read+0x230>)
 80037ba:	400b      	ands	r3, r1
 80037bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	e000      	b.n	80037dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80037da:	2302      	movs	r3, #2
  }
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	80002400 	.word	0x80002400
 80037e8:	fe00e800 	.word	0xfe00e800

080037ec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	4608      	mov	r0, r1
 80037f6:	4611      	mov	r1, r2
 80037f8:	461a      	mov	r2, r3
 80037fa:	4603      	mov	r3, r0
 80037fc:	817b      	strh	r3, [r7, #10]
 80037fe:	460b      	mov	r3, r1
 8003800:	813b      	strh	r3, [r7, #8]
 8003802:	4613      	mov	r3, r2
 8003804:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003806:	88fb      	ldrh	r3, [r7, #6]
 8003808:	b2da      	uxtb	r2, r3
 800380a:	8979      	ldrh	r1, [r7, #10]
 800380c:	4b20      	ldr	r3, [pc, #128]	; (8003890 <I2C_RequestMemoryWrite+0xa4>)
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 fa6f 	bl	8003cf8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800381a:	69fa      	ldr	r2, [r7, #28]
 800381c:	69b9      	ldr	r1, [r7, #24]
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f8ff 	bl	8003a22 <I2C_WaitOnTXISFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e02c      	b.n	8003888 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d105      	bne.n	8003840 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003834:	893b      	ldrh	r3, [r7, #8]
 8003836:	b2da      	uxtb	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	629a      	str	r2, [r3, #40]	; 0x28
 800383e:	e015      	b.n	800386c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003840:	893b      	ldrh	r3, [r7, #8]
 8003842:	0a1b      	lsrs	r3, r3, #8
 8003844:	b29b      	uxth	r3, r3
 8003846:	b2da      	uxtb	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	69b9      	ldr	r1, [r7, #24]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f8e5 	bl	8003a22 <I2C_WaitOnTXISFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e012      	b.n	8003888 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003862:	893b      	ldrh	r3, [r7, #8]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	2200      	movs	r2, #0
 8003874:	2180      	movs	r1, #128	; 0x80
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f884 	bl	8003984 <I2C_WaitOnFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	80002000 	.word	0x80002000

08003894 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af02      	add	r7, sp, #8
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	4608      	mov	r0, r1
 800389e:	4611      	mov	r1, r2
 80038a0:	461a      	mov	r2, r3
 80038a2:	4603      	mov	r3, r0
 80038a4:	817b      	strh	r3, [r7, #10]
 80038a6:	460b      	mov	r3, r1
 80038a8:	813b      	strh	r3, [r7, #8]
 80038aa:	4613      	mov	r3, r2
 80038ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80038ae:	88fb      	ldrh	r3, [r7, #6]
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	8979      	ldrh	r1, [r7, #10]
 80038b4:	4b20      	ldr	r3, [pc, #128]	; (8003938 <I2C_RequestMemoryRead+0xa4>)
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	2300      	movs	r3, #0
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 fa1c 	bl	8003cf8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	69b9      	ldr	r1, [r7, #24]
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 f8ac 	bl	8003a22 <I2C_WaitOnTXISFlagUntilTimeout>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e02c      	b.n	800392e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038d4:	88fb      	ldrh	r3, [r7, #6]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d105      	bne.n	80038e6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038da:	893b      	ldrh	r3, [r7, #8]
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	629a      	str	r2, [r3, #40]	; 0x28
 80038e4:	e015      	b.n	8003912 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038e6:	893b      	ldrh	r3, [r7, #8]
 80038e8:	0a1b      	lsrs	r3, r3, #8
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	69b9      	ldr	r1, [r7, #24]
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f892 	bl	8003a22 <I2C_WaitOnTXISFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e012      	b.n	800392e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003908:	893b      	ldrh	r3, [r7, #8]
 800390a:	b2da      	uxtb	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	2200      	movs	r2, #0
 800391a:	2140      	movs	r1, #64	; 0x40
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f831 	bl	8003984 <I2C_WaitOnFlagUntilTimeout>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	80002000 	.word	0x80002000

0800393c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b02      	cmp	r3, #2
 8003950:	d103      	bne.n	800395a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2200      	movs	r2, #0
 8003958:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b01      	cmp	r3, #1
 8003966:	d007      	beq.n	8003978 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	619a      	str	r2, [r3, #24]
  }
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	4613      	mov	r3, r2
 8003992:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003994:	e031      	b.n	80039fa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800399c:	d02d      	beq.n	80039fa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800399e:	f7fe fec5 	bl	800272c <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d302      	bcc.n	80039b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d122      	bne.n	80039fa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4013      	ands	r3, r2
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d113      	bne.n	80039fa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d6:	f043 0220 	orr.w	r2, r3, #32
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e00f      	b.n	8003a1a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699a      	ldr	r2, [r3, #24]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4013      	ands	r3, r2
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	bf0c      	ite	eq
 8003a0a:	2301      	moveq	r3, #1
 8003a0c:	2300      	movne	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d0be      	beq.n	8003996 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a2e:	e033      	b.n	8003a98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	68b9      	ldr	r1, [r7, #8]
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 f87f 	bl	8003b38 <I2C_IsErrorOccurred>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e031      	b.n	8003aa8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a4a:	d025      	beq.n	8003a98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a4c:	f7fe fe6e 	bl	800272c <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d302      	bcc.n	8003a62 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d11a      	bne.n	8003a98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d013      	beq.n	8003a98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a74:	f043 0220 	orr.w	r2, r3, #32
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e007      	b.n	8003aa8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d1c4      	bne.n	8003a30 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003abc:	e02f      	b.n	8003b1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 f838 	bl	8003b38 <I2C_IsErrorOccurred>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e02d      	b.n	8003b2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad2:	f7fe fe2b 	bl	800272c <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d302      	bcc.n	8003ae8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d11a      	bne.n	8003b1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	d013      	beq.n	8003b1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afa:	f043 0220 	orr.w	r2, r3, #32
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e007      	b.n	8003b2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d1c8      	bne.n	8003abe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08a      	sub	sp, #40	; 0x28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d068      	beq.n	8003c36 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2210      	movs	r2, #16
 8003b6a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b6c:	e049      	b.n	8003c02 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b74:	d045      	beq.n	8003c02 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b76:	f7fe fdd9 	bl	800272c <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d302      	bcc.n	8003b8c <I2C_IsErrorOccurred+0x54>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d13a      	bne.n	8003c02 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b9e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bae:	d121      	bne.n	8003bf4 <I2C_IsErrorOccurred+0xbc>
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bb6:	d01d      	beq.n	8003bf4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003bb8:	7cfb      	ldrb	r3, [r7, #19]
 8003bba:	2b20      	cmp	r3, #32
 8003bbc:	d01a      	beq.n	8003bf4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bcc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003bce:	f7fe fdad 	bl	800272c <HAL_GetTick>
 8003bd2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bd4:	e00e      	b.n	8003bf4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003bd6:	f7fe fda9 	bl	800272c <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b19      	cmp	r3, #25
 8003be2:	d907      	bls.n	8003bf4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	f043 0320 	orr.w	r3, r3, #32
 8003bea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003bf2:	e006      	b.n	8003c02 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d1e9      	bne.n	8003bd6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	f003 0320 	and.w	r3, r3, #32
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d003      	beq.n	8003c18 <I2C_IsErrorOccurred+0xe0>
 8003c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0aa      	beq.n	8003b6e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d103      	bne.n	8003c28 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2220      	movs	r2, #32
 8003c26:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	f043 0304 	orr.w	r3, r3, #4
 8003c2e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00b      	beq.n	8003c60 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00b      	beq.n	8003c82 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	f043 0308 	orr.w	r3, r3, #8
 8003c70:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00b      	beq.n	8003ca4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	f043 0302 	orr.w	r3, r3, #2
 8003c92:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d01c      	beq.n	8003ce6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f7ff fe45 	bl	800393c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <I2C_IsErrorOccurred+0x1bc>)
 8003cbe:	400b      	ands	r3, r1
 8003cc0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3728      	adds	r7, #40	; 0x28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	fe00e800 	.word	0xfe00e800

08003cf8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	607b      	str	r3, [r7, #4]
 8003d02:	460b      	mov	r3, r1
 8003d04:	817b      	strh	r3, [r7, #10]
 8003d06:	4613      	mov	r3, r2
 8003d08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d0a:	897b      	ldrh	r3, [r7, #10]
 8003d0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d10:	7a7b      	ldrb	r3, [r7, #9]
 8003d12:	041b      	lsls	r3, r3, #16
 8003d14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d18:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d26:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	0d5b      	lsrs	r3, r3, #21
 8003d32:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003d36:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <I2C_TransferConfig+0x60>)
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	ea02 0103 	and.w	r1, r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d4a:	bf00      	nop
 8003d4c:	371c      	adds	r7, #28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	03ff63ff 	.word	0x03ff63ff

08003d5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	d138      	bne.n	8003de4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e032      	b.n	8003de6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2224      	movs	r2, #36	; 0x24
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6819      	ldr	r1, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	e000      	b.n	8003de6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003de4:	2302      	movs	r3, #2
  }
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b085      	sub	sp, #20
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d139      	bne.n	8003e7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e033      	b.n	8003e7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2224      	movs	r2, #36	; 0x24
 8003e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0201 	bic.w	r2, r2, #1
 8003e34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e000      	b.n	8003e7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
  }
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e8c:	b08f      	sub	sp, #60	; 0x3c
 8003e8e:	af0a      	add	r7, sp, #40	; 0x28
 8003e90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e116      	b.n	80040ca <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d106      	bne.n	8003ebc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7fd ff9c 	bl	8001df4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d102      	bne.n	8003ed6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f002 fb9f 	bl	800661e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	603b      	str	r3, [r7, #0]
 8003ee6:	687e      	ldr	r6, [r7, #4]
 8003ee8:	466d      	mov	r5, sp
 8003eea:	f106 0410 	add.w	r4, r6, #16
 8003eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ef4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ef6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003efa:	e885 0003 	stmia.w	r5, {r0, r1}
 8003efe:	1d33      	adds	r3, r6, #4
 8003f00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f02:	6838      	ldr	r0, [r7, #0]
 8003f04:	f002 fb5f 	bl	80065c6 <USB_CoreInit>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2202      	movs	r2, #2
 8003f12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e0d7      	b.n	80040ca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4618      	mov	r0, r3
 8003f22:	f002 fb8d 	bl	8006640 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f26:	2300      	movs	r3, #0
 8003f28:	73fb      	strb	r3, [r7, #15]
 8003f2a:	e04a      	b.n	8003fc2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f2c:	7bfa      	ldrb	r2, [r7, #15]
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	333d      	adds	r3, #61	; 0x3d
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f40:	7bfa      	ldrb	r2, [r7, #15]
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	4613      	mov	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	333c      	adds	r3, #60	; 0x3c
 8003f50:	7bfa      	ldrb	r2, [r7, #15]
 8003f52:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f54:	7bfa      	ldrb	r2, [r7, #15]
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	b298      	uxth	r0, r3
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4413      	add	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	3356      	adds	r3, #86	; 0x56
 8003f68:	4602      	mov	r2, r0
 8003f6a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f6c:	7bfa      	ldrb	r2, [r7, #15]
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	4613      	mov	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	3340      	adds	r3, #64	; 0x40
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f80:	7bfa      	ldrb	r2, [r7, #15]
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	3344      	adds	r3, #68	; 0x44
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f94:	7bfa      	ldrb	r2, [r7, #15]
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	3348      	adds	r3, #72	; 0x48
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fa8:	7bfa      	ldrb	r2, [r7, #15]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	334c      	adds	r3, #76	; 0x4c
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	73fb      	strb	r3, [r7, #15]
 8003fc2:	7bfa      	ldrb	r2, [r7, #15]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d3af      	bcc.n	8003f2c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fcc:	2300      	movs	r3, #0
 8003fce:	73fb      	strb	r3, [r7, #15]
 8003fd0:	e044      	b.n	800405c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003fd2:	7bfa      	ldrb	r2, [r7, #15]
 8003fd4:	6879      	ldr	r1, [r7, #4]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4413      	add	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	440b      	add	r3, r1
 8003fe0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fe8:	7bfa      	ldrb	r2, [r7, #15]
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003ffa:	7bfa      	ldrb	r2, [r7, #15]
 8003ffc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ffe:	7bfa      	ldrb	r2, [r7, #15]
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004010:	2200      	movs	r2, #0
 8004012:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004014:	7bfa      	ldrb	r2, [r7, #15]
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	4613      	mov	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800402a:	7bfa      	ldrb	r2, [r7, #15]
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004040:	7bfa      	ldrb	r2, [r7, #15]
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	4613      	mov	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	3301      	adds	r3, #1
 800405a:	73fb      	strb	r3, [r7, #15]
 800405c:	7bfa      	ldrb	r2, [r7, #15]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	429a      	cmp	r2, r3
 8004064:	d3b5      	bcc.n	8003fd2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	687e      	ldr	r6, [r7, #4]
 800406e:	466d      	mov	r5, sp
 8004070:	f106 0410 	add.w	r4, r6, #16
 8004074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004078:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800407a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800407c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004080:	e885 0003 	stmia.w	r5, {r0, r1}
 8004084:	1d33      	adds	r3, r6, #4
 8004086:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004088:	6838      	ldr	r0, [r7, #0]
 800408a:	f002 fb25 	bl	80066d8 <USB_DevInit>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e014      	b.n	80040ca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d102      	bne.n	80040be <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f80a 	bl	80040d2 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f002 fcc7 	bl	8006a56 <USB_DevDisconnect>

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040d2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b085      	sub	sp, #20
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004104:	f043 0303 	orr.w	r3, r3, #3
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
	...

0800411c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004120:	4b05      	ldr	r3, [pc, #20]	; (8004138 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a04      	ldr	r2, [pc, #16]	; (8004138 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412a:	6013      	str	r3, [r2, #0]
}
 800412c:	bf00      	nop
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40007000 	.word	0x40007000

0800413c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004140:	4b04      	ldr	r3, [pc, #16]	; (8004154 <HAL_PWREx_GetVoltageRange+0x18>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004148:	4618      	mov	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40007000 	.word	0x40007000

08004158 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004166:	d130      	bne.n	80041ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004168:	4b23      	ldr	r3, [pc, #140]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004174:	d038      	beq.n	80041e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004176:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800417e:	4a1e      	ldr	r2, [pc, #120]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004180:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004184:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004186:	4b1d      	ldr	r3, [pc, #116]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2232      	movs	r2, #50	; 0x32
 800418c:	fb02 f303 	mul.w	r3, r2, r3
 8004190:	4a1b      	ldr	r2, [pc, #108]	; (8004200 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004192:	fba2 2303 	umull	r2, r3, r2, r3
 8004196:	0c9b      	lsrs	r3, r3, #18
 8004198:	3301      	adds	r3, #1
 800419a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800419c:	e002      	b.n	80041a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041a4:	4b14      	ldr	r3, [pc, #80]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b0:	d102      	bne.n	80041b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1f2      	bne.n	800419e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041b8:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c4:	d110      	bne.n	80041e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e00f      	b.n	80041ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80041ca:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d6:	d007      	beq.n	80041e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041d8:	4b07      	ldr	r3, [pc, #28]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041e0:	4a05      	ldr	r2, [pc, #20]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40007000 	.word	0x40007000
 80041fc:	20000000 	.word	0x20000000
 8004200:	431bde83 	.word	0x431bde83

08004204 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <HAL_PWREx_EnableVddUSB+0x1c>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4a04      	ldr	r2, [pc, #16]	; (8004220 <HAL_PWREx_EnableVddUSB+0x1c>)
 800420e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004212:	6053      	str	r3, [r2, #4]
}
 8004214:	bf00      	nop
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40007000 	.word	0x40007000

08004224 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af02      	add	r7, sp, #8
 800422a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800422c:	f7fe fa7e 	bl	800272c <HAL_GetTick>
 8004230:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e063      	b.n	8004304 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10b      	bne.n	8004260 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7fd fc5f 	bl	8001b14 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004256:	f241 3188 	movw	r1, #5000	; 0x1388
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f858 	bl	8004310 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	3b01      	subs	r3, #1
 8004270:	021a      	lsls	r2, r3, #8
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	2120      	movs	r1, #32
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f850 	bl	800432c <QSPI_WaitFlagStateUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004290:	7afb      	ldrb	r3, [r7, #11]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d131      	bne.n	80042fa <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80042a0:	f023 0310 	bic.w	r3, r3, #16
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6852      	ldr	r2, [r2, #4]
 80042a8:	0611      	lsls	r1, r2, #24
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	68d2      	ldr	r2, [r2, #12]
 80042ae:	4311      	orrs	r1, r2
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6812      	ldr	r2, [r2, #0]
 80042b4:	430b      	orrs	r3, r1
 80042b6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	4b13      	ldr	r3, [pc, #76]	; (800430c <HAL_QSPI_Init+0xe8>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6912      	ldr	r2, [r2, #16]
 80042c6:	0411      	lsls	r1, r2, #16
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6952      	ldr	r2, [r2, #20]
 80042cc:	4311      	orrs	r1, r2
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6992      	ldr	r2, [r2, #24]
 80042d2:	4311      	orrs	r1, r2
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6812      	ldr	r2, [r2, #0]
 80042d8:	430b      	orrs	r3, r1
 80042da:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004302:	7afb      	ldrb	r3, [r7, #11]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	ffe0f8fe 	.word	0xffe0f8fe

08004310 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	4613      	mov	r3, r2
 800433a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800433c:	e01a      	b.n	8004374 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004344:	d016      	beq.n	8004374 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004346:	f7fe f9f1 	bl	800272c <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	429a      	cmp	r2, r3
 8004354:	d302      	bcc.n	800435c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10b      	bne.n	8004374 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2204      	movs	r2, #4
 8004360:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004368:	f043 0201 	orr.w	r2, r3, #1
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e00e      	b.n	8004392 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	4013      	ands	r3, r2
 800437e:	2b00      	cmp	r3, #0
 8004380:	bf14      	ite	ne
 8004382:	2301      	movne	r3, #1
 8004384:	2300      	moveq	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	429a      	cmp	r2, r3
 800438e:	d1d6      	bne.n	800433e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b088      	sub	sp, #32
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e3ca      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ae:	4b97      	ldr	r3, [pc, #604]	; (800460c <HAL_RCC_OscConfig+0x270>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043b8:	4b94      	ldr	r3, [pc, #592]	; (800460c <HAL_RCC_OscConfig+0x270>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 80e4 	beq.w	8004598 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d007      	beq.n	80043e6 <HAL_RCC_OscConfig+0x4a>
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	2b0c      	cmp	r3, #12
 80043da:	f040 808b 	bne.w	80044f4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	f040 8087 	bne.w	80044f4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043e6:	4b89      	ldr	r3, [pc, #548]	; (800460c <HAL_RCC_OscConfig+0x270>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d005      	beq.n	80043fe <HAL_RCC_OscConfig+0x62>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e3a2      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1a      	ldr	r2, [r3, #32]
 8004402:	4b82      	ldr	r3, [pc, #520]	; (800460c <HAL_RCC_OscConfig+0x270>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d004      	beq.n	8004418 <HAL_RCC_OscConfig+0x7c>
 800440e:	4b7f      	ldr	r3, [pc, #508]	; (800460c <HAL_RCC_OscConfig+0x270>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004416:	e005      	b.n	8004424 <HAL_RCC_OscConfig+0x88>
 8004418:	4b7c      	ldr	r3, [pc, #496]	; (800460c <HAL_RCC_OscConfig+0x270>)
 800441a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800441e:	091b      	lsrs	r3, r3, #4
 8004420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004424:	4293      	cmp	r3, r2
 8004426:	d223      	bcs.n	8004470 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	4618      	mov	r0, r3
 800442e:	f000 fd55 	bl	8004edc <RCC_SetFlashLatencyFromMSIRange>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e383      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800443c:	4b73      	ldr	r3, [pc, #460]	; (800460c <HAL_RCC_OscConfig+0x270>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a72      	ldr	r2, [pc, #456]	; (800460c <HAL_RCC_OscConfig+0x270>)
 8004442:	f043 0308 	orr.w	r3, r3, #8
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	4b70      	ldr	r3, [pc, #448]	; (800460c <HAL_RCC_OscConfig+0x270>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	496d      	ldr	r1, [pc, #436]	; (800460c <HAL_RCC_OscConfig+0x270>)
 8004456:	4313      	orrs	r3, r2
 8004458:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800445a:	4b6c      	ldr	r3, [pc, #432]	; (800460c <HAL_RCC_OscConfig+0x270>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	4968      	ldr	r1, [pc, #416]	; (800460c <HAL_RCC_OscConfig+0x270>)
 800446a:	4313      	orrs	r3, r2
 800446c:	604b      	str	r3, [r1, #4]
 800446e:	e025      	b.n	80044bc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004470:	4b66      	ldr	r3, [pc, #408]	; (800460c <HAL_RCC_OscConfig+0x270>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a65      	ldr	r2, [pc, #404]	; (800460c <HAL_RCC_OscConfig+0x270>)
 8004476:	f043 0308 	orr.w	r3, r3, #8
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	4b63      	ldr	r3, [pc, #396]	; (800460c <HAL_RCC_OscConfig+0x270>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	4960      	ldr	r1, [pc, #384]	; (800460c <HAL_RCC_OscConfig+0x270>)
 800448a:	4313      	orrs	r3, r2
 800448c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800448e:	4b5f      	ldr	r3, [pc, #380]	; (800460c <HAL_RCC_OscConfig+0x270>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	021b      	lsls	r3, r3, #8
 800449c:	495b      	ldr	r1, [pc, #364]	; (800460c <HAL_RCC_OscConfig+0x270>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d109      	bne.n	80044bc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 fd15 	bl	8004edc <RCC_SetFlashLatencyFromMSIRange>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e343      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044bc:	f000 fc4a 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 80044c0:	4602      	mov	r2, r0
 80044c2:	4b52      	ldr	r3, [pc, #328]	; (800460c <HAL_RCC_OscConfig+0x270>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	091b      	lsrs	r3, r3, #4
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	4950      	ldr	r1, [pc, #320]	; (8004610 <HAL_RCC_OscConfig+0x274>)
 80044ce:	5ccb      	ldrb	r3, [r1, r3]
 80044d0:	f003 031f 	and.w	r3, r3, #31
 80044d4:	fa22 f303 	lsr.w	r3, r2, r3
 80044d8:	4a4e      	ldr	r2, [pc, #312]	; (8004614 <HAL_RCC_OscConfig+0x278>)
 80044da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044dc:	4b4e      	ldr	r3, [pc, #312]	; (8004618 <HAL_RCC_OscConfig+0x27c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fe f8d3 	bl	800268c <HAL_InitTick>
 80044e6:	4603      	mov	r3, r0
 80044e8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d052      	beq.n	8004596 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	e327      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d032      	beq.n	8004562 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044fc:	4b43      	ldr	r3, [pc, #268]	; (800460c <HAL_RCC_OscConfig+0x270>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a42      	ldr	r2, [pc, #264]	; (800460c <HAL_RCC_OscConfig+0x270>)
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004508:	f7fe f910 	bl	800272c <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004510:	f7fe f90c 	bl	800272c <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e310      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004522:	4b3a      	ldr	r3, [pc, #232]	; (800460c <HAL_RCC_OscConfig+0x270>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0f0      	beq.n	8004510 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800452e:	4b37      	ldr	r3, [pc, #220]	; (800460c <HAL_RCC_OscConfig+0x270>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a36      	ldr	r2, [pc, #216]	; (800460c <HAL_RCC_OscConfig+0x270>)
 8004534:	f043 0308 	orr.w	r3, r3, #8
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	4b34      	ldr	r3, [pc, #208]	; (800460c <HAL_RCC_OscConfig+0x270>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	4931      	ldr	r1, [pc, #196]	; (800460c <HAL_RCC_OscConfig+0x270>)
 8004548:	4313      	orrs	r3, r2
 800454a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800454c:	4b2f      	ldr	r3, [pc, #188]	; (800460c <HAL_RCC_OscConfig+0x270>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	021b      	lsls	r3, r3, #8
 800455a:	492c      	ldr	r1, [pc, #176]	; (800460c <HAL_RCC_OscConfig+0x270>)
 800455c:	4313      	orrs	r3, r2
 800455e:	604b      	str	r3, [r1, #4]
 8004560:	e01a      	b.n	8004598 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004562:	4b2a      	ldr	r3, [pc, #168]	; (800460c <HAL_RCC_OscConfig+0x270>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a29      	ldr	r2, [pc, #164]	; (800460c <HAL_RCC_OscConfig+0x270>)
 8004568:	f023 0301 	bic.w	r3, r3, #1
 800456c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800456e:	f7fe f8dd 	bl	800272c <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004576:	f7fe f8d9 	bl	800272c <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e2dd      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004588:	4b20      	ldr	r3, [pc, #128]	; (800460c <HAL_RCC_OscConfig+0x270>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1f0      	bne.n	8004576 <HAL_RCC_OscConfig+0x1da>
 8004594:	e000      	b.n	8004598 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004596:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d074      	beq.n	800468e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d005      	beq.n	80045b6 <HAL_RCC_OscConfig+0x21a>
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	2b0c      	cmp	r3, #12
 80045ae:	d10e      	bne.n	80045ce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	d10b      	bne.n	80045ce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b6:	4b15      	ldr	r3, [pc, #84]	; (800460c <HAL_RCC_OscConfig+0x270>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d064      	beq.n	800468c <HAL_RCC_OscConfig+0x2f0>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d160      	bne.n	800468c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e2ba      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d6:	d106      	bne.n	80045e6 <HAL_RCC_OscConfig+0x24a>
 80045d8:	4b0c      	ldr	r3, [pc, #48]	; (800460c <HAL_RCC_OscConfig+0x270>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a0b      	ldr	r2, [pc, #44]	; (800460c <HAL_RCC_OscConfig+0x270>)
 80045de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	e026      	b.n	8004634 <HAL_RCC_OscConfig+0x298>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045ee:	d115      	bne.n	800461c <HAL_RCC_OscConfig+0x280>
 80045f0:	4b06      	ldr	r3, [pc, #24]	; (800460c <HAL_RCC_OscConfig+0x270>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a05      	ldr	r2, [pc, #20]	; (800460c <HAL_RCC_OscConfig+0x270>)
 80045f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	4b03      	ldr	r3, [pc, #12]	; (800460c <HAL_RCC_OscConfig+0x270>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a02      	ldr	r2, [pc, #8]	; (800460c <HAL_RCC_OscConfig+0x270>)
 8004602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	e014      	b.n	8004634 <HAL_RCC_OscConfig+0x298>
 800460a:	bf00      	nop
 800460c:	40021000 	.word	0x40021000
 8004610:	080098cc 	.word	0x080098cc
 8004614:	20000000 	.word	0x20000000
 8004618:	20000018 	.word	0x20000018
 800461c:	4ba0      	ldr	r3, [pc, #640]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a9f      	ldr	r2, [pc, #636]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 8004622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	4b9d      	ldr	r3, [pc, #628]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a9c      	ldr	r2, [pc, #624]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 800462e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d013      	beq.n	8004664 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fe f876 	bl	800272c <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004644:	f7fe f872 	bl	800272c <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b64      	cmp	r3, #100	; 0x64
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e276      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004656:	4b92      	ldr	r3, [pc, #584]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCC_OscConfig+0x2a8>
 8004662:	e014      	b.n	800468e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004664:	f7fe f862 	bl	800272c <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800466c:	f7fe f85e 	bl	800272c <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b64      	cmp	r3, #100	; 0x64
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e262      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800467e:	4b88      	ldr	r3, [pc, #544]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_OscConfig+0x2d0>
 800468a:	e000      	b.n	800468e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800468c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d060      	beq.n	800475c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b04      	cmp	r3, #4
 800469e:	d005      	beq.n	80046ac <HAL_RCC_OscConfig+0x310>
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	2b0c      	cmp	r3, #12
 80046a4:	d119      	bne.n	80046da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d116      	bne.n	80046da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046ac:	4b7c      	ldr	r3, [pc, #496]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <HAL_RCC_OscConfig+0x328>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e23f      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c4:	4b76      	ldr	r3, [pc, #472]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	061b      	lsls	r3, r3, #24
 80046d2:	4973      	ldr	r1, [pc, #460]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046d8:	e040      	b.n	800475c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d023      	beq.n	800472a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046e2:	4b6f      	ldr	r3, [pc, #444]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a6e      	ldr	r2, [pc, #440]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 80046e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ee:	f7fe f81d 	bl	800272c <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f6:	f7fe f819 	bl	800272c <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e21d      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004708:	4b65      	ldr	r3, [pc, #404]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0f0      	beq.n	80046f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004714:	4b62      	ldr	r3, [pc, #392]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	061b      	lsls	r3, r3, #24
 8004722:	495f      	ldr	r1, [pc, #380]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 8004724:	4313      	orrs	r3, r2
 8004726:	604b      	str	r3, [r1, #4]
 8004728:	e018      	b.n	800475c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800472a:	4b5d      	ldr	r3, [pc, #372]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a5c      	ldr	r2, [pc, #368]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 8004730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004736:	f7fd fff9 	bl	800272c <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800473e:	f7fd fff5 	bl	800272c <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e1f9      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004750:	4b53      	ldr	r3, [pc, #332]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1f0      	bne.n	800473e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	d03c      	beq.n	80047e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d01c      	beq.n	80047aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004770:	4b4b      	ldr	r3, [pc, #300]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 8004772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004776:	4a4a      	ldr	r2, [pc, #296]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004780:	f7fd ffd4 	bl	800272c <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004788:	f7fd ffd0 	bl	800272c <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e1d4      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800479a:	4b41      	ldr	r3, [pc, #260]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 800479c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0ef      	beq.n	8004788 <HAL_RCC_OscConfig+0x3ec>
 80047a8:	e01b      	b.n	80047e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047aa:	4b3d      	ldr	r3, [pc, #244]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 80047ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047b0:	4a3b      	ldr	r2, [pc, #236]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 80047b2:	f023 0301 	bic.w	r3, r3, #1
 80047b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ba:	f7fd ffb7 	bl	800272c <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047c2:	f7fd ffb3 	bl	800272c <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e1b7      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047d4:	4b32      	ldr	r3, [pc, #200]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 80047d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1ef      	bne.n	80047c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 80a6 	beq.w	800493c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047f0:	2300      	movs	r3, #0
 80047f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047f4:	4b2a      	ldr	r3, [pc, #168]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 80047f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10d      	bne.n	800481c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004800:	4b27      	ldr	r3, [pc, #156]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 8004802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004804:	4a26      	ldr	r2, [pc, #152]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 8004806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800480a:	6593      	str	r3, [r2, #88]	; 0x58
 800480c:	4b24      	ldr	r3, [pc, #144]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 800480e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004818:	2301      	movs	r3, #1
 800481a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800481c:	4b21      	ldr	r3, [pc, #132]	; (80048a4 <HAL_RCC_OscConfig+0x508>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d118      	bne.n	800485a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004828:	4b1e      	ldr	r3, [pc, #120]	; (80048a4 <HAL_RCC_OscConfig+0x508>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a1d      	ldr	r2, [pc, #116]	; (80048a4 <HAL_RCC_OscConfig+0x508>)
 800482e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004832:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004834:	f7fd ff7a 	bl	800272c <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800483c:	f7fd ff76 	bl	800272c <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e17a      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800484e:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <HAL_RCC_OscConfig+0x508>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0f0      	beq.n	800483c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d108      	bne.n	8004874 <HAL_RCC_OscConfig+0x4d8>
 8004862:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 8004864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004868:	4a0d      	ldr	r2, [pc, #52]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 800486a:	f043 0301 	orr.w	r3, r3, #1
 800486e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004872:	e029      	b.n	80048c8 <HAL_RCC_OscConfig+0x52c>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	2b05      	cmp	r3, #5
 800487a:	d115      	bne.n	80048a8 <HAL_RCC_OscConfig+0x50c>
 800487c:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004882:	4a07      	ldr	r2, [pc, #28]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 8004884:	f043 0304 	orr.w	r3, r3, #4
 8004888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800488c:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 800488e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004892:	4a03      	ldr	r2, [pc, #12]	; (80048a0 <HAL_RCC_OscConfig+0x504>)
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800489c:	e014      	b.n	80048c8 <HAL_RCC_OscConfig+0x52c>
 800489e:	bf00      	nop
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40007000 	.word	0x40007000
 80048a8:	4b9c      	ldr	r3, [pc, #624]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 80048aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ae:	4a9b      	ldr	r2, [pc, #620]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 80048b0:	f023 0301 	bic.w	r3, r3, #1
 80048b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048b8:	4b98      	ldr	r3, [pc, #608]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 80048ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048be:	4a97      	ldr	r2, [pc, #604]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 80048c0:	f023 0304 	bic.w	r3, r3, #4
 80048c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d016      	beq.n	80048fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d0:	f7fd ff2c 	bl	800272c <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048d6:	e00a      	b.n	80048ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d8:	f7fd ff28 	bl	800272c <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e12a      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ee:	4b8b      	ldr	r3, [pc, #556]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 80048f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0ed      	beq.n	80048d8 <HAL_RCC_OscConfig+0x53c>
 80048fc:	e015      	b.n	800492a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fe:	f7fd ff15 	bl	800272c <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004904:	e00a      	b.n	800491c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004906:	f7fd ff11 	bl	800272c <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	f241 3288 	movw	r2, #5000	; 0x1388
 8004914:	4293      	cmp	r3, r2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e113      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800491c:	4b7f      	ldr	r3, [pc, #508]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1ed      	bne.n	8004906 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800492a:	7ffb      	ldrb	r3, [r7, #31]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d105      	bne.n	800493c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004930:	4b7a      	ldr	r3, [pc, #488]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 8004932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004934:	4a79      	ldr	r2, [pc, #484]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 8004936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800493a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80fe 	beq.w	8004b42 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494a:	2b02      	cmp	r3, #2
 800494c:	f040 80d0 	bne.w	8004af0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004950:	4b72      	ldr	r3, [pc, #456]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f003 0203 	and.w	r2, r3, #3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	429a      	cmp	r2, r3
 8004962:	d130      	bne.n	80049c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	3b01      	subs	r3, #1
 8004970:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004972:	429a      	cmp	r2, r3
 8004974:	d127      	bne.n	80049c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004980:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004982:	429a      	cmp	r2, r3
 8004984:	d11f      	bne.n	80049c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004990:	2a07      	cmp	r2, #7
 8004992:	bf14      	ite	ne
 8004994:	2201      	movne	r2, #1
 8004996:	2200      	moveq	r2, #0
 8004998:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800499a:	4293      	cmp	r3, r2
 800499c:	d113      	bne.n	80049c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a8:	085b      	lsrs	r3, r3, #1
 80049aa:	3b01      	subs	r3, #1
 80049ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d109      	bne.n	80049c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	085b      	lsrs	r3, r3, #1
 80049be:	3b01      	subs	r3, #1
 80049c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d06e      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	2b0c      	cmp	r3, #12
 80049ca:	d069      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80049cc:	4b53      	ldr	r3, [pc, #332]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d105      	bne.n	80049e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80049d8:	4b50      	ldr	r3, [pc, #320]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e0ad      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049e8:	4b4c      	ldr	r3, [pc, #304]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a4b      	ldr	r2, [pc, #300]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 80049ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049f4:	f7fd fe9a 	bl	800272c <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049fc:	f7fd fe96 	bl	800272c <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e09a      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a0e:	4b43      	ldr	r3, [pc, #268]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f0      	bne.n	80049fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a1a:	4b40      	ldr	r3, [pc, #256]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	4b40      	ldr	r3, [pc, #256]	; (8004b20 <HAL_RCC_OscConfig+0x784>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a2a:	3a01      	subs	r2, #1
 8004a2c:	0112      	lsls	r2, r2, #4
 8004a2e:	4311      	orrs	r1, r2
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a34:	0212      	lsls	r2, r2, #8
 8004a36:	4311      	orrs	r1, r2
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a3c:	0852      	lsrs	r2, r2, #1
 8004a3e:	3a01      	subs	r2, #1
 8004a40:	0552      	lsls	r2, r2, #21
 8004a42:	4311      	orrs	r1, r2
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a48:	0852      	lsrs	r2, r2, #1
 8004a4a:	3a01      	subs	r2, #1
 8004a4c:	0652      	lsls	r2, r2, #25
 8004a4e:	4311      	orrs	r1, r2
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a54:	0912      	lsrs	r2, r2, #4
 8004a56:	0452      	lsls	r2, r2, #17
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	4930      	ldr	r1, [pc, #192]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a60:	4b2e      	ldr	r3, [pc, #184]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a2d      	ldr	r2, [pc, #180]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 8004a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a6c:	4b2b      	ldr	r3, [pc, #172]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	4a2a      	ldr	r2, [pc, #168]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 8004a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a78:	f7fd fe58 	bl	800272c <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a80:	f7fd fe54 	bl	800272c <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e058      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a92:	4b22      	ldr	r3, [pc, #136]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f0      	beq.n	8004a80 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a9e:	e050      	b.n	8004b42 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e04f      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa4:	4b1d      	ldr	r3, [pc, #116]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d148      	bne.n	8004b42 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ab0:	4b1a      	ldr	r3, [pc, #104]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a19      	ldr	r2, [pc, #100]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 8004ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004abc:	4b17      	ldr	r3, [pc, #92]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	4a16      	ldr	r2, [pc, #88]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 8004ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ac6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ac8:	f7fd fe30 	bl	800272c <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad0:	f7fd fe2c 	bl	800272c <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e030      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ae2:	4b0e      	ldr	r3, [pc, #56]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x734>
 8004aee:	e028      	b.n	8004b42 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	2b0c      	cmp	r3, #12
 8004af4:	d023      	beq.n	8004b3e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af6:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a08      	ldr	r2, [pc, #32]	; (8004b1c <HAL_RCC_OscConfig+0x780>)
 8004afc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b02:	f7fd fe13 	bl	800272c <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b08:	e00c      	b.n	8004b24 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b0a:	f7fd fe0f 	bl	800272c <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d905      	bls.n	8004b24 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e013      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b24:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <HAL_RCC_OscConfig+0x7b0>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1ec      	bne.n	8004b0a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b30:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <HAL_RCC_OscConfig+0x7b0>)
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	4905      	ldr	r1, [pc, #20]	; (8004b4c <HAL_RCC_OscConfig+0x7b0>)
 8004b36:	4b06      	ldr	r3, [pc, #24]	; (8004b50 <HAL_RCC_OscConfig+0x7b4>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	60cb      	str	r3, [r1, #12]
 8004b3c:	e001      	b.n	8004b42 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	feeefffc 	.word	0xfeeefffc

08004b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e0e7      	b.n	8004d38 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b68:	4b75      	ldr	r3, [pc, #468]	; (8004d40 <HAL_RCC_ClockConfig+0x1ec>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d910      	bls.n	8004b98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b76:	4b72      	ldr	r3, [pc, #456]	; (8004d40 <HAL_RCC_ClockConfig+0x1ec>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f023 0207 	bic.w	r2, r3, #7
 8004b7e:	4970      	ldr	r1, [pc, #448]	; (8004d40 <HAL_RCC_ClockConfig+0x1ec>)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b86:	4b6e      	ldr	r3, [pc, #440]	; (8004d40 <HAL_RCC_ClockConfig+0x1ec>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0cf      	b.n	8004d38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d010      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	4b66      	ldr	r3, [pc, #408]	; (8004d44 <HAL_RCC_ClockConfig+0x1f0>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d908      	bls.n	8004bc6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bb4:	4b63      	ldr	r3, [pc, #396]	; (8004d44 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	4960      	ldr	r1, [pc, #384]	; (8004d44 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d04c      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d107      	bne.n	8004bea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bda:	4b5a      	ldr	r3, [pc, #360]	; (8004d44 <HAL_RCC_ClockConfig+0x1f0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d121      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e0a6      	b.n	8004d38 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d107      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bf2:	4b54      	ldr	r3, [pc, #336]	; (8004d44 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d115      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e09a      	b.n	8004d38 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d107      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c0a:	4b4e      	ldr	r3, [pc, #312]	; (8004d44 <HAL_RCC_ClockConfig+0x1f0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d109      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e08e      	b.n	8004d38 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c1a:	4b4a      	ldr	r3, [pc, #296]	; (8004d44 <HAL_RCC_ClockConfig+0x1f0>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e086      	b.n	8004d38 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c2a:	4b46      	ldr	r3, [pc, #280]	; (8004d44 <HAL_RCC_ClockConfig+0x1f0>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f023 0203 	bic.w	r2, r3, #3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	4943      	ldr	r1, [pc, #268]	; (8004d44 <HAL_RCC_ClockConfig+0x1f0>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c3c:	f7fd fd76 	bl	800272c <HAL_GetTick>
 8004c40:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c42:	e00a      	b.n	8004c5a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c44:	f7fd fd72 	bl	800272c <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e06e      	b.n	8004d38 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c5a:	4b3a      	ldr	r3, [pc, #232]	; (8004d44 <HAL_RCC_ClockConfig+0x1f0>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 020c 	and.w	r2, r3, #12
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d1eb      	bne.n	8004c44 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d010      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	4b31      	ldr	r3, [pc, #196]	; (8004d44 <HAL_RCC_ClockConfig+0x1f0>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d208      	bcs.n	8004c9a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c88:	4b2e      	ldr	r3, [pc, #184]	; (8004d44 <HAL_RCC_ClockConfig+0x1f0>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	492b      	ldr	r1, [pc, #172]	; (8004d44 <HAL_RCC_ClockConfig+0x1f0>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c9a:	4b29      	ldr	r3, [pc, #164]	; (8004d40 <HAL_RCC_ClockConfig+0x1ec>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d210      	bcs.n	8004cca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca8:	4b25      	ldr	r3, [pc, #148]	; (8004d40 <HAL_RCC_ClockConfig+0x1ec>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f023 0207 	bic.w	r2, r3, #7
 8004cb0:	4923      	ldr	r1, [pc, #140]	; (8004d40 <HAL_RCC_ClockConfig+0x1ec>)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb8:	4b21      	ldr	r3, [pc, #132]	; (8004d40 <HAL_RCC_ClockConfig+0x1ec>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d001      	beq.n	8004cca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e036      	b.n	8004d38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d008      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd6:	4b1b      	ldr	r3, [pc, #108]	; (8004d44 <HAL_RCC_ClockConfig+0x1f0>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	4918      	ldr	r1, [pc, #96]	; (8004d44 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0308 	and.w	r3, r3, #8
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d009      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cf4:	4b13      	ldr	r3, [pc, #76]	; (8004d44 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	4910      	ldr	r1, [pc, #64]	; (8004d44 <HAL_RCC_ClockConfig+0x1f0>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d08:	f000 f824 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	4b0d      	ldr	r3, [pc, #52]	; (8004d44 <HAL_RCC_ClockConfig+0x1f0>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	091b      	lsrs	r3, r3, #4
 8004d14:	f003 030f 	and.w	r3, r3, #15
 8004d18:	490b      	ldr	r1, [pc, #44]	; (8004d48 <HAL_RCC_ClockConfig+0x1f4>)
 8004d1a:	5ccb      	ldrb	r3, [r1, r3]
 8004d1c:	f003 031f 	and.w	r3, r3, #31
 8004d20:	fa22 f303 	lsr.w	r3, r2, r3
 8004d24:	4a09      	ldr	r2, [pc, #36]	; (8004d4c <HAL_RCC_ClockConfig+0x1f8>)
 8004d26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d28:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <HAL_RCC_ClockConfig+0x1fc>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fd fcad 	bl	800268c <HAL_InitTick>
 8004d32:	4603      	mov	r3, r0
 8004d34:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d36:	7afb      	ldrb	r3, [r7, #11]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40022000 	.word	0x40022000
 8004d44:	40021000 	.word	0x40021000
 8004d48:	080098cc 	.word	0x080098cc
 8004d4c:	20000000 	.word	0x20000000
 8004d50:	20000018 	.word	0x20000018

08004d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b089      	sub	sp, #36	; 0x24
 8004d58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d62:	4b3e      	ldr	r3, [pc, #248]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 030c 	and.w	r3, r3, #12
 8004d6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d6c:	4b3b      	ldr	r3, [pc, #236]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f003 0303 	and.w	r3, r3, #3
 8004d74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d005      	beq.n	8004d88 <HAL_RCC_GetSysClockFreq+0x34>
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	2b0c      	cmp	r3, #12
 8004d80:	d121      	bne.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d11e      	bne.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d88:	4b34      	ldr	r3, [pc, #208]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d107      	bne.n	8004da4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d94:	4b31      	ldr	r3, [pc, #196]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d9a:	0a1b      	lsrs	r3, r3, #8
 8004d9c:	f003 030f 	and.w	r3, r3, #15
 8004da0:	61fb      	str	r3, [r7, #28]
 8004da2:	e005      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004da4:	4b2d      	ldr	r3, [pc, #180]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	091b      	lsrs	r3, r3, #4
 8004daa:	f003 030f 	and.w	r3, r3, #15
 8004dae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004db0:	4a2b      	ldr	r2, [pc, #172]	; (8004e60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10d      	bne.n	8004ddc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dc4:	e00a      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	d102      	bne.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dcc:	4b25      	ldr	r3, [pc, #148]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dce:	61bb      	str	r3, [r7, #24]
 8004dd0:	e004      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d101      	bne.n	8004ddc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dd8:	4b23      	ldr	r3, [pc, #140]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b0c      	cmp	r3, #12
 8004de0:	d134      	bne.n	8004e4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004de2:	4b1e      	ldr	r3, [pc, #120]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d003      	beq.n	8004dfa <HAL_RCC_GetSysClockFreq+0xa6>
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d003      	beq.n	8004e00 <HAL_RCC_GetSysClockFreq+0xac>
 8004df8:	e005      	b.n	8004e06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004dfa:	4b1a      	ldr	r3, [pc, #104]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dfc:	617b      	str	r3, [r7, #20]
      break;
 8004dfe:	e005      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e00:	4b19      	ldr	r3, [pc, #100]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e02:	617b      	str	r3, [r7, #20]
      break;
 8004e04:	e002      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	617b      	str	r3, [r7, #20]
      break;
 8004e0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e0c:	4b13      	ldr	r3, [pc, #76]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	091b      	lsrs	r3, r3, #4
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	3301      	adds	r3, #1
 8004e18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e1a:	4b10      	ldr	r3, [pc, #64]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	0a1b      	lsrs	r3, r3, #8
 8004e20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	fb03 f202 	mul.w	r2, r3, r2
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e32:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	0e5b      	lsrs	r3, r3, #25
 8004e38:	f003 0303 	and.w	r3, r3, #3
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e4c:	69bb      	ldr	r3, [r7, #24]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3724      	adds	r7, #36	; 0x24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	080098e4 	.word	0x080098e4
 8004e64:	00f42400 	.word	0x00f42400
 8004e68:	007a1200 	.word	0x007a1200

08004e6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e70:	4b03      	ldr	r3, [pc, #12]	; (8004e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e72:	681b      	ldr	r3, [r3, #0]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	20000000 	.word	0x20000000

08004e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e88:	f7ff fff0 	bl	8004e6c <HAL_RCC_GetHCLKFreq>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	0a1b      	lsrs	r3, r3, #8
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	4904      	ldr	r1, [pc, #16]	; (8004eac <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e9a:	5ccb      	ldrb	r3, [r1, r3]
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	080098dc 	.word	0x080098dc

08004eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004eb4:	f7ff ffda 	bl	8004e6c <HAL_RCC_GetHCLKFreq>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	0adb      	lsrs	r3, r3, #11
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	4904      	ldr	r1, [pc, #16]	; (8004ed8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ec6:	5ccb      	ldrb	r3, [r1, r3]
 8004ec8:	f003 031f 	and.w	r3, r3, #31
 8004ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	080098dc 	.word	0x080098dc

08004edc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ee8:	4b2a      	ldr	r3, [pc, #168]	; (8004f94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ef4:	f7ff f922 	bl	800413c <HAL_PWREx_GetVoltageRange>
 8004ef8:	6178      	str	r0, [r7, #20]
 8004efa:	e014      	b.n	8004f26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004efc:	4b25      	ldr	r3, [pc, #148]	; (8004f94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f00:	4a24      	ldr	r2, [pc, #144]	; (8004f94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f06:	6593      	str	r3, [r2, #88]	; 0x58
 8004f08:	4b22      	ldr	r3, [pc, #136]	; (8004f94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f14:	f7ff f912 	bl	800413c <HAL_PWREx_GetVoltageRange>
 8004f18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f1a:	4b1e      	ldr	r3, [pc, #120]	; (8004f94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1e:	4a1d      	ldr	r2, [pc, #116]	; (8004f94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f2c:	d10b      	bne.n	8004f46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b80      	cmp	r3, #128	; 0x80
 8004f32:	d919      	bls.n	8004f68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2ba0      	cmp	r3, #160	; 0xa0
 8004f38:	d902      	bls.n	8004f40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	e013      	b.n	8004f68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f40:	2301      	movs	r3, #1
 8004f42:	613b      	str	r3, [r7, #16]
 8004f44:	e010      	b.n	8004f68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b80      	cmp	r3, #128	; 0x80
 8004f4a:	d902      	bls.n	8004f52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	613b      	str	r3, [r7, #16]
 8004f50:	e00a      	b.n	8004f68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b80      	cmp	r3, #128	; 0x80
 8004f56:	d102      	bne.n	8004f5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f58:	2302      	movs	r3, #2
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	e004      	b.n	8004f68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b70      	cmp	r3, #112	; 0x70
 8004f62:	d101      	bne.n	8004f68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f64:	2301      	movs	r3, #1
 8004f66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f68:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f023 0207 	bic.w	r2, r3, #7
 8004f70:	4909      	ldr	r1, [pc, #36]	; (8004f98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f78:	4b07      	ldr	r3, [pc, #28]	; (8004f98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d001      	beq.n	8004f8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40021000 	.word	0x40021000
 8004f98:	40022000 	.word	0x40022000

08004f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fa8:	2300      	movs	r3, #0
 8004faa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d041      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fc0:	d02a      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004fc2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fc6:	d824      	bhi.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fcc:	d008      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004fce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fd2:	d81e      	bhi.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00a      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004fd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fdc:	d010      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fde:	e018      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fe0:	4b86      	ldr	r3, [pc, #536]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	4a85      	ldr	r2, [pc, #532]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fec:	e015      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 facb 	bl	8005590 <RCCEx_PLLSAI1_Config>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ffe:	e00c      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3320      	adds	r3, #32
 8005004:	2100      	movs	r1, #0
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fbb6 	bl	8005778 <RCCEx_PLLSAI2_Config>
 800500c:	4603      	mov	r3, r0
 800500e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005010:	e003      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	74fb      	strb	r3, [r7, #19]
      break;
 8005016:	e000      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005018:	bf00      	nop
    }

    if(ret == HAL_OK)
 800501a:	7cfb      	ldrb	r3, [r7, #19]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10b      	bne.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005020:	4b76      	ldr	r3, [pc, #472]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005026:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800502e:	4973      	ldr	r1, [pc, #460]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005036:	e001      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005038:	7cfb      	ldrb	r3, [r7, #19]
 800503a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d041      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800504c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005050:	d02a      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005052:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005056:	d824      	bhi.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005058:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800505c:	d008      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800505e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005062:	d81e      	bhi.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800506c:	d010      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800506e:	e018      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005070:	4b62      	ldr	r3, [pc, #392]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	4a61      	ldr	r2, [pc, #388]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800507a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800507c:	e015      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3304      	adds	r3, #4
 8005082:	2100      	movs	r1, #0
 8005084:	4618      	mov	r0, r3
 8005086:	f000 fa83 	bl	8005590 <RCCEx_PLLSAI1_Config>
 800508a:	4603      	mov	r3, r0
 800508c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800508e:	e00c      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3320      	adds	r3, #32
 8005094:	2100      	movs	r1, #0
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fb6e 	bl	8005778 <RCCEx_PLLSAI2_Config>
 800509c:	4603      	mov	r3, r0
 800509e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050a0:	e003      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	74fb      	strb	r3, [r7, #19]
      break;
 80050a6:	e000      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80050a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050aa:	7cfb      	ldrb	r3, [r7, #19]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10b      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050b0:	4b52      	ldr	r3, [pc, #328]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050be:	494f      	ldr	r1, [pc, #316]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050c6:	e001      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c8:	7cfb      	ldrb	r3, [r7, #19]
 80050ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80a0 	beq.w	800521a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050da:	2300      	movs	r3, #0
 80050dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050de:	4b47      	ldr	r3, [pc, #284]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x152>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e000      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80050ee:	2300      	movs	r3, #0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00d      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050f4:	4b41      	ldr	r3, [pc, #260]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f8:	4a40      	ldr	r2, [pc, #256]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fe:	6593      	str	r3, [r2, #88]	; 0x58
 8005100:	4b3e      	ldr	r3, [pc, #248]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005108:	60bb      	str	r3, [r7, #8]
 800510a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800510c:	2301      	movs	r3, #1
 800510e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005110:	4b3b      	ldr	r3, [pc, #236]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a3a      	ldr	r2, [pc, #232]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800511a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800511c:	f7fd fb06 	bl	800272c <HAL_GetTick>
 8005120:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005122:	e009      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005124:	f7fd fb02 	bl	800272c <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d902      	bls.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	74fb      	strb	r3, [r7, #19]
        break;
 8005136:	e005      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005138:	4b31      	ldr	r3, [pc, #196]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0ef      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005144:	7cfb      	ldrb	r3, [r7, #19]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d15c      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800514a:	4b2c      	ldr	r3, [pc, #176]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800514c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005154:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d01f      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	429a      	cmp	r2, r3
 8005166:	d019      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005168:	4b24      	ldr	r3, [pc, #144]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005172:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005174:	4b21      	ldr	r3, [pc, #132]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517a:	4a20      	ldr	r2, [pc, #128]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800517c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005184:	4b1d      	ldr	r3, [pc, #116]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518a:	4a1c      	ldr	r2, [pc, #112]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800518c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005194:	4a19      	ldr	r2, [pc, #100]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d016      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a6:	f7fd fac1 	bl	800272c <HAL_GetTick>
 80051aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051ac:	e00b      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ae:	f7fd fabd 	bl	800272c <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051bc:	4293      	cmp	r3, r2
 80051be:	d902      	bls.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	74fb      	strb	r3, [r7, #19]
            break;
 80051c4:	e006      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051c6:	4b0d      	ldr	r3, [pc, #52]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0ec      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80051d4:	7cfb      	ldrb	r3, [r7, #19]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10c      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051da:	4b08      	ldr	r3, [pc, #32]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ea:	4904      	ldr	r1, [pc, #16]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051f2:	e009      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051f4:	7cfb      	ldrb	r3, [r7, #19]
 80051f6:	74bb      	strb	r3, [r7, #18]
 80051f8:	e006      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80051fa:	bf00      	nop
 80051fc:	40021000 	.word	0x40021000
 8005200:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005204:	7cfb      	ldrb	r3, [r7, #19]
 8005206:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005208:	7c7b      	ldrb	r3, [r7, #17]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d105      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800520e:	4b9e      	ldr	r3, [pc, #632]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005212:	4a9d      	ldr	r2, [pc, #628]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005218:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005226:	4b98      	ldr	r3, [pc, #608]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522c:	f023 0203 	bic.w	r2, r3, #3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005234:	4994      	ldr	r1, [pc, #592]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00a      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005248:	4b8f      	ldr	r3, [pc, #572]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524e:	f023 020c 	bic.w	r2, r3, #12
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005256:	498c      	ldr	r1, [pc, #560]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800526a:	4b87      	ldr	r3, [pc, #540]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800526c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005270:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	4983      	ldr	r1, [pc, #524]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800528c:	4b7e      	ldr	r3, [pc, #504]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005292:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529a:	497b      	ldr	r1, [pc, #492]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0310 	and.w	r3, r3, #16
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052ae:	4b76      	ldr	r3, [pc, #472]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052bc:	4972      	ldr	r1, [pc, #456]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0320 	and.w	r3, r3, #32
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052d0:	4b6d      	ldr	r3, [pc, #436]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052de:	496a      	ldr	r1, [pc, #424]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052f2:	4b65      	ldr	r3, [pc, #404]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005300:	4961      	ldr	r1, [pc, #388]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00a      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005314:	4b5c      	ldr	r3, [pc, #368]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005322:	4959      	ldr	r1, [pc, #356]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005324:	4313      	orrs	r3, r2
 8005326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005336:	4b54      	ldr	r3, [pc, #336]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005344:	4950      	ldr	r1, [pc, #320]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00a      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005358:	4b4b      	ldr	r3, [pc, #300]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005366:	4948      	ldr	r1, [pc, #288]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005368:	4313      	orrs	r3, r2
 800536a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800537a:	4b43      	ldr	r3, [pc, #268]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800537c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005380:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005388:	493f      	ldr	r1, [pc, #252]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800538a:	4313      	orrs	r3, r2
 800538c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d028      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800539c:	4b3a      	ldr	r3, [pc, #232]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053aa:	4937      	ldr	r1, [pc, #220]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053ba:	d106      	bne.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053bc:	4b32      	ldr	r3, [pc, #200]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	4a31      	ldr	r2, [pc, #196]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053c6:	60d3      	str	r3, [r2, #12]
 80053c8:	e011      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053d2:	d10c      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	3304      	adds	r3, #4
 80053d8:	2101      	movs	r1, #1
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 f8d8 	bl	8005590 <RCCEx_PLLSAI1_Config>
 80053e0:	4603      	mov	r3, r0
 80053e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053e4:	7cfb      	ldrb	r3, [r7, #19]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80053ea:	7cfb      	ldrb	r3, [r7, #19]
 80053ec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d028      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053fa:	4b23      	ldr	r3, [pc, #140]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005400:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005408:	491f      	ldr	r1, [pc, #124]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005414:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005418:	d106      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800541a:	4b1b      	ldr	r3, [pc, #108]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	4a1a      	ldr	r2, [pc, #104]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005420:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005424:	60d3      	str	r3, [r2, #12]
 8005426:	e011      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005430:	d10c      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3304      	adds	r3, #4
 8005436:	2101      	movs	r1, #1
 8005438:	4618      	mov	r0, r3
 800543a:	f000 f8a9 	bl	8005590 <RCCEx_PLLSAI1_Config>
 800543e:	4603      	mov	r3, r0
 8005440:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005442:	7cfb      	ldrb	r3, [r7, #19]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005448:	7cfb      	ldrb	r3, [r7, #19]
 800544a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d02b      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005458:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005466:	4908      	ldr	r1, [pc, #32]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005472:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005476:	d109      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005478:	4b03      	ldr	r3, [pc, #12]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	4a02      	ldr	r2, [pc, #8]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800547e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005482:	60d3      	str	r3, [r2, #12]
 8005484:	e014      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005486:	bf00      	nop
 8005488:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005490:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005494:	d10c      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	3304      	adds	r3, #4
 800549a:	2101      	movs	r1, #1
 800549c:	4618      	mov	r0, r3
 800549e:	f000 f877 	bl	8005590 <RCCEx_PLLSAI1_Config>
 80054a2:	4603      	mov	r3, r0
 80054a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054a6:	7cfb      	ldrb	r3, [r7, #19]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80054ac:	7cfb      	ldrb	r3, [r7, #19]
 80054ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d02f      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054bc:	4b2b      	ldr	r3, [pc, #172]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054ca:	4928      	ldr	r1, [pc, #160]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054da:	d10d      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3304      	adds	r3, #4
 80054e0:	2102      	movs	r1, #2
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 f854 	bl	8005590 <RCCEx_PLLSAI1_Config>
 80054e8:	4603      	mov	r3, r0
 80054ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054ec:	7cfb      	ldrb	r3, [r7, #19]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d014      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054f2:	7cfb      	ldrb	r3, [r7, #19]
 80054f4:	74bb      	strb	r3, [r7, #18]
 80054f6:	e011      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005500:	d10c      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3320      	adds	r3, #32
 8005506:	2102      	movs	r1, #2
 8005508:	4618      	mov	r0, r3
 800550a:	f000 f935 	bl	8005778 <RCCEx_PLLSAI2_Config>
 800550e:	4603      	mov	r3, r0
 8005510:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005512:	7cfb      	ldrb	r3, [r7, #19]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005518:	7cfb      	ldrb	r3, [r7, #19]
 800551a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005528:	4b10      	ldr	r3, [pc, #64]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005536:	490d      	ldr	r1, [pc, #52]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00b      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800554a:	4b08      	ldr	r3, [pc, #32]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005550:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800555a:	4904      	ldr	r1, [pc, #16]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800555c:	4313      	orrs	r3, r2
 800555e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005562:	7cbb      	ldrb	r3, [r7, #18]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	40021000 	.word	0x40021000

08005570 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005574:	4b05      	ldr	r3, [pc, #20]	; (800558c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a04      	ldr	r2, [pc, #16]	; (800558c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800557a:	f043 0304 	orr.w	r3, r3, #4
 800557e:	6013      	str	r3, [r2, #0]
}
 8005580:	bf00      	nop
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	40021000 	.word	0x40021000

08005590 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800559e:	4b75      	ldr	r3, [pc, #468]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d018      	beq.n	80055dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80055aa:	4b72      	ldr	r3, [pc, #456]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f003 0203 	and.w	r2, r3, #3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d10d      	bne.n	80055d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
       ||
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d009      	beq.n	80055d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80055c2:	4b6c      	ldr	r3, [pc, #432]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	091b      	lsrs	r3, r3, #4
 80055c8:	f003 0307 	and.w	r3, r3, #7
 80055cc:	1c5a      	adds	r2, r3, #1
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
       ||
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d047      	beq.n	8005666 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	73fb      	strb	r3, [r7, #15]
 80055da:	e044      	b.n	8005666 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b03      	cmp	r3, #3
 80055e2:	d018      	beq.n	8005616 <RCCEx_PLLSAI1_Config+0x86>
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d825      	bhi.n	8005634 <RCCEx_PLLSAI1_Config+0xa4>
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d002      	beq.n	80055f2 <RCCEx_PLLSAI1_Config+0x62>
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d009      	beq.n	8005604 <RCCEx_PLLSAI1_Config+0x74>
 80055f0:	e020      	b.n	8005634 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055f2:	4b60      	ldr	r3, [pc, #384]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d11d      	bne.n	800563a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005602:	e01a      	b.n	800563a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005604:	4b5b      	ldr	r3, [pc, #364]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800560c:	2b00      	cmp	r3, #0
 800560e:	d116      	bne.n	800563e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005614:	e013      	b.n	800563e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005616:	4b57      	ldr	r3, [pc, #348]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10f      	bne.n	8005642 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005622:	4b54      	ldr	r3, [pc, #336]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d109      	bne.n	8005642 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005632:	e006      	b.n	8005642 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	73fb      	strb	r3, [r7, #15]
      break;
 8005638:	e004      	b.n	8005644 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800563a:	bf00      	nop
 800563c:	e002      	b.n	8005644 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800563e:	bf00      	nop
 8005640:	e000      	b.n	8005644 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005642:	bf00      	nop
    }

    if(status == HAL_OK)
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10d      	bne.n	8005666 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800564a:	4b4a      	ldr	r3, [pc, #296]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6819      	ldr	r1, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	3b01      	subs	r3, #1
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	430b      	orrs	r3, r1
 8005660:	4944      	ldr	r1, [pc, #272]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005662:	4313      	orrs	r3, r2
 8005664:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d17d      	bne.n	8005768 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800566c:	4b41      	ldr	r3, [pc, #260]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a40      	ldr	r2, [pc, #256]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005672:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005678:	f7fd f858 	bl	800272c <HAL_GetTick>
 800567c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800567e:	e009      	b.n	8005694 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005680:	f7fd f854 	bl	800272c <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d902      	bls.n	8005694 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	73fb      	strb	r3, [r7, #15]
        break;
 8005692:	e005      	b.n	80056a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005694:	4b37      	ldr	r3, [pc, #220]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1ef      	bne.n	8005680 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d160      	bne.n	8005768 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d111      	bne.n	80056d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056ac:	4b31      	ldr	r3, [pc, #196]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80056b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6892      	ldr	r2, [r2, #8]
 80056bc:	0211      	lsls	r1, r2, #8
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	68d2      	ldr	r2, [r2, #12]
 80056c2:	0912      	lsrs	r2, r2, #4
 80056c4:	0452      	lsls	r2, r2, #17
 80056c6:	430a      	orrs	r2, r1
 80056c8:	492a      	ldr	r1, [pc, #168]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	610b      	str	r3, [r1, #16]
 80056ce:	e027      	b.n	8005720 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d112      	bne.n	80056fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056d6:	4b27      	ldr	r3, [pc, #156]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80056de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6892      	ldr	r2, [r2, #8]
 80056e6:	0211      	lsls	r1, r2, #8
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6912      	ldr	r2, [r2, #16]
 80056ec:	0852      	lsrs	r2, r2, #1
 80056ee:	3a01      	subs	r2, #1
 80056f0:	0552      	lsls	r2, r2, #21
 80056f2:	430a      	orrs	r2, r1
 80056f4:	491f      	ldr	r1, [pc, #124]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	610b      	str	r3, [r1, #16]
 80056fa:	e011      	b.n	8005720 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056fc:	4b1d      	ldr	r3, [pc, #116]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005704:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6892      	ldr	r2, [r2, #8]
 800570c:	0211      	lsls	r1, r2, #8
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	6952      	ldr	r2, [r2, #20]
 8005712:	0852      	lsrs	r2, r2, #1
 8005714:	3a01      	subs	r2, #1
 8005716:	0652      	lsls	r2, r2, #25
 8005718:	430a      	orrs	r2, r1
 800571a:	4916      	ldr	r1, [pc, #88]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 800571c:	4313      	orrs	r3, r2
 800571e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005720:	4b14      	ldr	r3, [pc, #80]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a13      	ldr	r2, [pc, #76]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005726:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800572a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572c:	f7fc fffe 	bl	800272c <HAL_GetTick>
 8005730:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005732:	e009      	b.n	8005748 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005734:	f7fc fffa 	bl	800272c <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d902      	bls.n	8005748 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	73fb      	strb	r3, [r7, #15]
          break;
 8005746:	e005      	b.n	8005754 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005748:	4b0a      	ldr	r3, [pc, #40]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0ef      	beq.n	8005734 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005754:	7bfb      	ldrb	r3, [r7, #15]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d106      	bne.n	8005768 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800575a:	4b06      	ldr	r3, [pc, #24]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 800575c:	691a      	ldr	r2, [r3, #16]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	4904      	ldr	r1, [pc, #16]	; (8005774 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005764:	4313      	orrs	r3, r2
 8005766:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005768:	7bfb      	ldrb	r3, [r7, #15]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40021000 	.word	0x40021000

08005778 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005786:	4b6a      	ldr	r3, [pc, #424]	; (8005930 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f003 0303 	and.w	r3, r3, #3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d018      	beq.n	80057c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005792:	4b67      	ldr	r3, [pc, #412]	; (8005930 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f003 0203 	and.w	r2, r3, #3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d10d      	bne.n	80057be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
       ||
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d009      	beq.n	80057be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80057aa:	4b61      	ldr	r3, [pc, #388]	; (8005930 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	091b      	lsrs	r3, r3, #4
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
       ||
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d047      	beq.n	800584e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	73fb      	strb	r3, [r7, #15]
 80057c2:	e044      	b.n	800584e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	d018      	beq.n	80057fe <RCCEx_PLLSAI2_Config+0x86>
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d825      	bhi.n	800581c <RCCEx_PLLSAI2_Config+0xa4>
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d002      	beq.n	80057da <RCCEx_PLLSAI2_Config+0x62>
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d009      	beq.n	80057ec <RCCEx_PLLSAI2_Config+0x74>
 80057d8:	e020      	b.n	800581c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057da:	4b55      	ldr	r3, [pc, #340]	; (8005930 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d11d      	bne.n	8005822 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ea:	e01a      	b.n	8005822 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057ec:	4b50      	ldr	r3, [pc, #320]	; (8005930 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d116      	bne.n	8005826 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057fc:	e013      	b.n	8005826 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057fe:	4b4c      	ldr	r3, [pc, #304]	; (8005930 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10f      	bne.n	800582a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800580a:	4b49      	ldr	r3, [pc, #292]	; (8005930 <RCCEx_PLLSAI2_Config+0x1b8>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d109      	bne.n	800582a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800581a:	e006      	b.n	800582a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	73fb      	strb	r3, [r7, #15]
      break;
 8005820:	e004      	b.n	800582c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005822:	bf00      	nop
 8005824:	e002      	b.n	800582c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005826:	bf00      	nop
 8005828:	e000      	b.n	800582c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800582a:	bf00      	nop
    }

    if(status == HAL_OK)
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10d      	bne.n	800584e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005832:	4b3f      	ldr	r3, [pc, #252]	; (8005930 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6819      	ldr	r1, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	3b01      	subs	r3, #1
 8005844:	011b      	lsls	r3, r3, #4
 8005846:	430b      	orrs	r3, r1
 8005848:	4939      	ldr	r1, [pc, #228]	; (8005930 <RCCEx_PLLSAI2_Config+0x1b8>)
 800584a:	4313      	orrs	r3, r2
 800584c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800584e:	7bfb      	ldrb	r3, [r7, #15]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d167      	bne.n	8005924 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005854:	4b36      	ldr	r3, [pc, #216]	; (8005930 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a35      	ldr	r2, [pc, #212]	; (8005930 <RCCEx_PLLSAI2_Config+0x1b8>)
 800585a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800585e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005860:	f7fc ff64 	bl	800272c <HAL_GetTick>
 8005864:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005866:	e009      	b.n	800587c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005868:	f7fc ff60 	bl	800272c <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d902      	bls.n	800587c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	73fb      	strb	r3, [r7, #15]
        break;
 800587a:	e005      	b.n	8005888 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800587c:	4b2c      	ldr	r3, [pc, #176]	; (8005930 <RCCEx_PLLSAI2_Config+0x1b8>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1ef      	bne.n	8005868 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005888:	7bfb      	ldrb	r3, [r7, #15]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d14a      	bne.n	8005924 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d111      	bne.n	80058b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005894:	4b26      	ldr	r3, [pc, #152]	; (8005930 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800589c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6892      	ldr	r2, [r2, #8]
 80058a4:	0211      	lsls	r1, r2, #8
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	68d2      	ldr	r2, [r2, #12]
 80058aa:	0912      	lsrs	r2, r2, #4
 80058ac:	0452      	lsls	r2, r2, #17
 80058ae:	430a      	orrs	r2, r1
 80058b0:	491f      	ldr	r1, [pc, #124]	; (8005930 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	614b      	str	r3, [r1, #20]
 80058b6:	e011      	b.n	80058dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058b8:	4b1d      	ldr	r3, [pc, #116]	; (8005930 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80058c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6892      	ldr	r2, [r2, #8]
 80058c8:	0211      	lsls	r1, r2, #8
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	6912      	ldr	r2, [r2, #16]
 80058ce:	0852      	lsrs	r2, r2, #1
 80058d0:	3a01      	subs	r2, #1
 80058d2:	0652      	lsls	r2, r2, #25
 80058d4:	430a      	orrs	r2, r1
 80058d6:	4916      	ldr	r1, [pc, #88]	; (8005930 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80058dc:	4b14      	ldr	r3, [pc, #80]	; (8005930 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a13      	ldr	r2, [pc, #76]	; (8005930 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e8:	f7fc ff20 	bl	800272c <HAL_GetTick>
 80058ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058ee:	e009      	b.n	8005904 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058f0:	f7fc ff1c 	bl	800272c <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d902      	bls.n	8005904 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	73fb      	strb	r3, [r7, #15]
          break;
 8005902:	e005      	b.n	8005910 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005904:	4b0a      	ldr	r3, [pc, #40]	; (8005930 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0ef      	beq.n	80058f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d106      	bne.n	8005924 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005916:	4b06      	ldr	r3, [pc, #24]	; (8005930 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005918:	695a      	ldr	r2, [r3, #20]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	4904      	ldr	r1, [pc, #16]	; (8005930 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005920:	4313      	orrs	r3, r2
 8005922:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005924:	7bfb      	ldrb	r3, [r7, #15]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	40021000 	.word	0x40021000

08005934 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e095      	b.n	8005a72 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	2b00      	cmp	r3, #0
 800594c:	d108      	bne.n	8005960 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005956:	d009      	beq.n	800596c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	61da      	str	r2, [r3, #28]
 800595e:	e005      	b.n	800596c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d106      	bne.n	800598c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7fc f908 	bl	8001b9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059ac:	d902      	bls.n	80059b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059ae:	2300      	movs	r3, #0
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	e002      	b.n	80059ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80059c2:	d007      	beq.n	80059d4 <HAL_SPI_Init+0xa0>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059cc:	d002      	beq.n	80059d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	431a      	orrs	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	69db      	ldr	r3, [r3, #28]
 8005a08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a16:	ea42 0103 	orr.w	r1, r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	0c1b      	lsrs	r3, r3, #16
 8005a30:	f003 0204 	and.w	r2, r3, #4
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	f003 0310 	and.w	r3, r3, #16
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a50:	ea42 0103 	orr.w	r1, r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b082      	sub	sp, #8
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d101      	bne.n	8005a8c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e040      	b.n	8005b0e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d106      	bne.n	8005aa2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7fc f8c1 	bl	8001c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2224      	movs	r2, #36	; 0x24
 8005aa6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 0201 	bic.w	r2, r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fb6b 	bl	800619c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f8b0 	bl	8005c2c <UART_SetConfig>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d101      	bne.n	8005ad6 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e01b      	b.n	8005b0e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ae4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005af4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f042 0201 	orr.w	r2, r2, #1
 8005b04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fbea 	bl	80062e0 <UART_CheckIdleState>
 8005b0c:	4603      	mov	r3, r0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b08a      	sub	sp, #40	; 0x28
 8005b1a:	af02      	add	r7, sp, #8
 8005b1c:	60f8      	str	r0, [r7, #12]
 8005b1e:	60b9      	str	r1, [r7, #8]
 8005b20:	603b      	str	r3, [r7, #0]
 8005b22:	4613      	mov	r3, r2
 8005b24:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b2a:	2b20      	cmp	r3, #32
 8005b2c:	d178      	bne.n	8005c20 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <HAL_UART_Transmit+0x24>
 8005b34:	88fb      	ldrh	r3, [r7, #6]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e071      	b.n	8005c22 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2221      	movs	r2, #33	; 0x21
 8005b4a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b4c:	f7fc fdee 	bl	800272c <HAL_GetTick>
 8005b50:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	88fa      	ldrh	r2, [r7, #6]
 8005b56:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	88fa      	ldrh	r2, [r7, #6]
 8005b5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b6a:	d108      	bne.n	8005b7e <HAL_UART_Transmit+0x68>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d104      	bne.n	8005b7e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b74:	2300      	movs	r3, #0
 8005b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	61bb      	str	r3, [r7, #24]
 8005b7c:	e003      	b.n	8005b86 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b82:	2300      	movs	r3, #0
 8005b84:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b86:	e030      	b.n	8005bea <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2180      	movs	r1, #128	; 0x80
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 fc4c 	bl	8006430 <UART_WaitOnFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d004      	beq.n	8005ba8 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e03c      	b.n	8005c22 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10b      	bne.n	8005bc6 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	881a      	ldrh	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bba:	b292      	uxth	r2, r2
 8005bbc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	3302      	adds	r3, #2
 8005bc2:	61bb      	str	r3, [r7, #24]
 8005bc4:	e008      	b.n	8005bd8 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	781a      	ldrb	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	b292      	uxth	r2, r2
 8005bd0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1c8      	bne.n	8005b88 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2140      	movs	r1, #64	; 0x40
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 fc15 	bl	8006430 <UART_WaitOnFlagUntilTimeout>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d004      	beq.n	8005c16 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e005      	b.n	8005c22 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	e000      	b.n	8005c22 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005c20:	2302      	movs	r3, #2
  }
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3720      	adds	r7, #32
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c30:	b08a      	sub	sp, #40	; 0x28
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	431a      	orrs	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	4ba4      	ldr	r3, [pc, #656]	; (8005eec <UART_SetConfig+0x2c0>)
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	6812      	ldr	r2, [r2, #0]
 8005c62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c64:	430b      	orrs	r3, r1
 8005c66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a99      	ldr	r2, [pc, #612]	; (8005ef0 <UART_SetConfig+0x2c4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d004      	beq.n	8005c98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c94:	4313      	orrs	r3, r2
 8005c96:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a90      	ldr	r2, [pc, #576]	; (8005ef4 <UART_SetConfig+0x2c8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d126      	bne.n	8005d04 <UART_SetConfig+0xd8>
 8005cb6:	4b90      	ldr	r3, [pc, #576]	; (8005ef8 <UART_SetConfig+0x2cc>)
 8005cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cbc:	f003 0303 	and.w	r3, r3, #3
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d81b      	bhi.n	8005cfc <UART_SetConfig+0xd0>
 8005cc4:	a201      	add	r2, pc, #4	; (adr r2, 8005ccc <UART_SetConfig+0xa0>)
 8005cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cca:	bf00      	nop
 8005ccc:	08005cdd 	.word	0x08005cdd
 8005cd0:	08005ced 	.word	0x08005ced
 8005cd4:	08005ce5 	.word	0x08005ce5
 8005cd8:	08005cf5 	.word	0x08005cf5
 8005cdc:	2301      	movs	r3, #1
 8005cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ce2:	e116      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cea:	e112      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005cec:	2304      	movs	r3, #4
 8005cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cf2:	e10e      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005cf4:	2308      	movs	r3, #8
 8005cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cfa:	e10a      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d02:	e106      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a7c      	ldr	r2, [pc, #496]	; (8005efc <UART_SetConfig+0x2d0>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d138      	bne.n	8005d80 <UART_SetConfig+0x154>
 8005d0e:	4b7a      	ldr	r3, [pc, #488]	; (8005ef8 <UART_SetConfig+0x2cc>)
 8005d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d14:	f003 030c 	and.w	r3, r3, #12
 8005d18:	2b0c      	cmp	r3, #12
 8005d1a:	d82d      	bhi.n	8005d78 <UART_SetConfig+0x14c>
 8005d1c:	a201      	add	r2, pc, #4	; (adr r2, 8005d24 <UART_SetConfig+0xf8>)
 8005d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d22:	bf00      	nop
 8005d24:	08005d59 	.word	0x08005d59
 8005d28:	08005d79 	.word	0x08005d79
 8005d2c:	08005d79 	.word	0x08005d79
 8005d30:	08005d79 	.word	0x08005d79
 8005d34:	08005d69 	.word	0x08005d69
 8005d38:	08005d79 	.word	0x08005d79
 8005d3c:	08005d79 	.word	0x08005d79
 8005d40:	08005d79 	.word	0x08005d79
 8005d44:	08005d61 	.word	0x08005d61
 8005d48:	08005d79 	.word	0x08005d79
 8005d4c:	08005d79 	.word	0x08005d79
 8005d50:	08005d79 	.word	0x08005d79
 8005d54:	08005d71 	.word	0x08005d71
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d5e:	e0d8      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005d60:	2302      	movs	r3, #2
 8005d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d66:	e0d4      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005d68:	2304      	movs	r3, #4
 8005d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d6e:	e0d0      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005d70:	2308      	movs	r3, #8
 8005d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d76:	e0cc      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005d78:	2310      	movs	r3, #16
 8005d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d7e:	e0c8      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a5e      	ldr	r2, [pc, #376]	; (8005f00 <UART_SetConfig+0x2d4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d125      	bne.n	8005dd6 <UART_SetConfig+0x1aa>
 8005d8a:	4b5b      	ldr	r3, [pc, #364]	; (8005ef8 <UART_SetConfig+0x2cc>)
 8005d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d94:	2b30      	cmp	r3, #48	; 0x30
 8005d96:	d016      	beq.n	8005dc6 <UART_SetConfig+0x19a>
 8005d98:	2b30      	cmp	r3, #48	; 0x30
 8005d9a:	d818      	bhi.n	8005dce <UART_SetConfig+0x1a2>
 8005d9c:	2b20      	cmp	r3, #32
 8005d9e:	d00a      	beq.n	8005db6 <UART_SetConfig+0x18a>
 8005da0:	2b20      	cmp	r3, #32
 8005da2:	d814      	bhi.n	8005dce <UART_SetConfig+0x1a2>
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <UART_SetConfig+0x182>
 8005da8:	2b10      	cmp	r3, #16
 8005daa:	d008      	beq.n	8005dbe <UART_SetConfig+0x192>
 8005dac:	e00f      	b.n	8005dce <UART_SetConfig+0x1a2>
 8005dae:	2300      	movs	r3, #0
 8005db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005db4:	e0ad      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005db6:	2302      	movs	r3, #2
 8005db8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dbc:	e0a9      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005dbe:	2304      	movs	r3, #4
 8005dc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dc4:	e0a5      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005dc6:	2308      	movs	r3, #8
 8005dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dcc:	e0a1      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005dce:	2310      	movs	r3, #16
 8005dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dd4:	e09d      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a4a      	ldr	r2, [pc, #296]	; (8005f04 <UART_SetConfig+0x2d8>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d125      	bne.n	8005e2c <UART_SetConfig+0x200>
 8005de0:	4b45      	ldr	r3, [pc, #276]	; (8005ef8 <UART_SetConfig+0x2cc>)
 8005de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dea:	2bc0      	cmp	r3, #192	; 0xc0
 8005dec:	d016      	beq.n	8005e1c <UART_SetConfig+0x1f0>
 8005dee:	2bc0      	cmp	r3, #192	; 0xc0
 8005df0:	d818      	bhi.n	8005e24 <UART_SetConfig+0x1f8>
 8005df2:	2b80      	cmp	r3, #128	; 0x80
 8005df4:	d00a      	beq.n	8005e0c <UART_SetConfig+0x1e0>
 8005df6:	2b80      	cmp	r3, #128	; 0x80
 8005df8:	d814      	bhi.n	8005e24 <UART_SetConfig+0x1f8>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d002      	beq.n	8005e04 <UART_SetConfig+0x1d8>
 8005dfe:	2b40      	cmp	r3, #64	; 0x40
 8005e00:	d008      	beq.n	8005e14 <UART_SetConfig+0x1e8>
 8005e02:	e00f      	b.n	8005e24 <UART_SetConfig+0x1f8>
 8005e04:	2300      	movs	r3, #0
 8005e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e0a:	e082      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e12:	e07e      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005e14:	2304      	movs	r3, #4
 8005e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e1a:	e07a      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005e1c:	2308      	movs	r3, #8
 8005e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e22:	e076      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005e24:	2310      	movs	r3, #16
 8005e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e2a:	e072      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a35      	ldr	r2, [pc, #212]	; (8005f08 <UART_SetConfig+0x2dc>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d12a      	bne.n	8005e8c <UART_SetConfig+0x260>
 8005e36:	4b30      	ldr	r3, [pc, #192]	; (8005ef8 <UART_SetConfig+0x2cc>)
 8005e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e44:	d01a      	beq.n	8005e7c <UART_SetConfig+0x250>
 8005e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e4a:	d81b      	bhi.n	8005e84 <UART_SetConfig+0x258>
 8005e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e50:	d00c      	beq.n	8005e6c <UART_SetConfig+0x240>
 8005e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e56:	d815      	bhi.n	8005e84 <UART_SetConfig+0x258>
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <UART_SetConfig+0x238>
 8005e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e60:	d008      	beq.n	8005e74 <UART_SetConfig+0x248>
 8005e62:	e00f      	b.n	8005e84 <UART_SetConfig+0x258>
 8005e64:	2300      	movs	r3, #0
 8005e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e6a:	e052      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e72:	e04e      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005e74:	2304      	movs	r3, #4
 8005e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e7a:	e04a      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005e7c:	2308      	movs	r3, #8
 8005e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e82:	e046      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005e84:	2310      	movs	r3, #16
 8005e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e8a:	e042      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a17      	ldr	r2, [pc, #92]	; (8005ef0 <UART_SetConfig+0x2c4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d13a      	bne.n	8005f0c <UART_SetConfig+0x2e0>
 8005e96:	4b18      	ldr	r3, [pc, #96]	; (8005ef8 <UART_SetConfig+0x2cc>)
 8005e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ea0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ea4:	d01a      	beq.n	8005edc <UART_SetConfig+0x2b0>
 8005ea6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005eaa:	d81b      	bhi.n	8005ee4 <UART_SetConfig+0x2b8>
 8005eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb0:	d00c      	beq.n	8005ecc <UART_SetConfig+0x2a0>
 8005eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb6:	d815      	bhi.n	8005ee4 <UART_SetConfig+0x2b8>
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <UART_SetConfig+0x298>
 8005ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ec0:	d008      	beq.n	8005ed4 <UART_SetConfig+0x2a8>
 8005ec2:	e00f      	b.n	8005ee4 <UART_SetConfig+0x2b8>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eca:	e022      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ed2:	e01e      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005ed4:	2304      	movs	r3, #4
 8005ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eda:	e01a      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005edc:	2308      	movs	r3, #8
 8005ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ee2:	e016      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005ee4:	2310      	movs	r3, #16
 8005ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eea:	e012      	b.n	8005f12 <UART_SetConfig+0x2e6>
 8005eec:	efff69f3 	.word	0xefff69f3
 8005ef0:	40008000 	.word	0x40008000
 8005ef4:	40013800 	.word	0x40013800
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	40004400 	.word	0x40004400
 8005f00:	40004800 	.word	0x40004800
 8005f04:	40004c00 	.word	0x40004c00
 8005f08:	40005000 	.word	0x40005000
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a9f      	ldr	r2, [pc, #636]	; (8006194 <UART_SetConfig+0x568>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d17a      	bne.n	8006012 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	d824      	bhi.n	8005f6e <UART_SetConfig+0x342>
 8005f24:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <UART_SetConfig+0x300>)
 8005f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2a:	bf00      	nop
 8005f2c:	08005f51 	.word	0x08005f51
 8005f30:	08005f6f 	.word	0x08005f6f
 8005f34:	08005f59 	.word	0x08005f59
 8005f38:	08005f6f 	.word	0x08005f6f
 8005f3c:	08005f5f 	.word	0x08005f5f
 8005f40:	08005f6f 	.word	0x08005f6f
 8005f44:	08005f6f 	.word	0x08005f6f
 8005f48:	08005f6f 	.word	0x08005f6f
 8005f4c:	08005f67 	.word	0x08005f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f50:	f7fe ff98 	bl	8004e84 <HAL_RCC_GetPCLK1Freq>
 8005f54:	61f8      	str	r0, [r7, #28]
        break;
 8005f56:	e010      	b.n	8005f7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f58:	4b8f      	ldr	r3, [pc, #572]	; (8006198 <UART_SetConfig+0x56c>)
 8005f5a:	61fb      	str	r3, [r7, #28]
        break;
 8005f5c:	e00d      	b.n	8005f7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f5e:	f7fe fef9 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 8005f62:	61f8      	str	r0, [r7, #28]
        break;
 8005f64:	e009      	b.n	8005f7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f6a:	61fb      	str	r3, [r7, #28]
        break;
 8005f6c:	e005      	b.n	8005f7a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 80fb 	beq.w	8006178 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	4613      	mov	r3, r2
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	4413      	add	r3, r2
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d305      	bcc.n	8005f9e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f98:	69fa      	ldr	r2, [r7, #28]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d903      	bls.n	8005fa6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005fa4:	e0e8      	b.n	8006178 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	461c      	mov	r4, r3
 8005fac:	4615      	mov	r5, r2
 8005fae:	f04f 0200 	mov.w	r2, #0
 8005fb2:	f04f 0300 	mov.w	r3, #0
 8005fb6:	022b      	lsls	r3, r5, #8
 8005fb8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005fbc:	0222      	lsls	r2, r4, #8
 8005fbe:	68f9      	ldr	r1, [r7, #12]
 8005fc0:	6849      	ldr	r1, [r1, #4]
 8005fc2:	0849      	lsrs	r1, r1, #1
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	4688      	mov	r8, r1
 8005fc8:	4681      	mov	r9, r0
 8005fca:	eb12 0a08 	adds.w	sl, r2, r8
 8005fce:	eb43 0b09 	adc.w	fp, r3, r9
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	603b      	str	r3, [r7, #0]
 8005fda:	607a      	str	r2, [r7, #4]
 8005fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fe0:	4650      	mov	r0, sl
 8005fe2:	4659      	mov	r1, fp
 8005fe4:	f7fa fde0 	bl	8000ba8 <__aeabi_uldivmod>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	4613      	mov	r3, r2
 8005fee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ff6:	d308      	bcc.n	800600a <UART_SetConfig+0x3de>
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ffe:	d204      	bcs.n	800600a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	60da      	str	r2, [r3, #12]
 8006008:	e0b6      	b.n	8006178 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006010:	e0b2      	b.n	8006178 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800601a:	d15e      	bne.n	80060da <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800601c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006020:	2b08      	cmp	r3, #8
 8006022:	d828      	bhi.n	8006076 <UART_SetConfig+0x44a>
 8006024:	a201      	add	r2, pc, #4	; (adr r2, 800602c <UART_SetConfig+0x400>)
 8006026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602a:	bf00      	nop
 800602c:	08006051 	.word	0x08006051
 8006030:	08006059 	.word	0x08006059
 8006034:	08006061 	.word	0x08006061
 8006038:	08006077 	.word	0x08006077
 800603c:	08006067 	.word	0x08006067
 8006040:	08006077 	.word	0x08006077
 8006044:	08006077 	.word	0x08006077
 8006048:	08006077 	.word	0x08006077
 800604c:	0800606f 	.word	0x0800606f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006050:	f7fe ff18 	bl	8004e84 <HAL_RCC_GetPCLK1Freq>
 8006054:	61f8      	str	r0, [r7, #28]
        break;
 8006056:	e014      	b.n	8006082 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006058:	f7fe ff2a 	bl	8004eb0 <HAL_RCC_GetPCLK2Freq>
 800605c:	61f8      	str	r0, [r7, #28]
        break;
 800605e:	e010      	b.n	8006082 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006060:	4b4d      	ldr	r3, [pc, #308]	; (8006198 <UART_SetConfig+0x56c>)
 8006062:	61fb      	str	r3, [r7, #28]
        break;
 8006064:	e00d      	b.n	8006082 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006066:	f7fe fe75 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 800606a:	61f8      	str	r0, [r7, #28]
        break;
 800606c:	e009      	b.n	8006082 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800606e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006072:	61fb      	str	r3, [r7, #28]
        break;
 8006074:	e005      	b.n	8006082 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006080:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d077      	beq.n	8006178 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	005a      	lsls	r2, r3, #1
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	085b      	lsrs	r3, r3, #1
 8006092:	441a      	add	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	fbb2 f3f3 	udiv	r3, r2, r3
 800609c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	2b0f      	cmp	r3, #15
 80060a2:	d916      	bls.n	80060d2 <UART_SetConfig+0x4a6>
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060aa:	d212      	bcs.n	80060d2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	f023 030f 	bic.w	r3, r3, #15
 80060b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	085b      	lsrs	r3, r3, #1
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	8afb      	ldrh	r3, [r7, #22]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	8afa      	ldrh	r2, [r7, #22]
 80060ce:	60da      	str	r2, [r3, #12]
 80060d0:	e052      	b.n	8006178 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060d8:	e04e      	b.n	8006178 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060de:	2b08      	cmp	r3, #8
 80060e0:	d827      	bhi.n	8006132 <UART_SetConfig+0x506>
 80060e2:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <UART_SetConfig+0x4bc>)
 80060e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e8:	0800610d 	.word	0x0800610d
 80060ec:	08006115 	.word	0x08006115
 80060f0:	0800611d 	.word	0x0800611d
 80060f4:	08006133 	.word	0x08006133
 80060f8:	08006123 	.word	0x08006123
 80060fc:	08006133 	.word	0x08006133
 8006100:	08006133 	.word	0x08006133
 8006104:	08006133 	.word	0x08006133
 8006108:	0800612b 	.word	0x0800612b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800610c:	f7fe feba 	bl	8004e84 <HAL_RCC_GetPCLK1Freq>
 8006110:	61f8      	str	r0, [r7, #28]
        break;
 8006112:	e014      	b.n	800613e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006114:	f7fe fecc 	bl	8004eb0 <HAL_RCC_GetPCLK2Freq>
 8006118:	61f8      	str	r0, [r7, #28]
        break;
 800611a:	e010      	b.n	800613e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800611c:	4b1e      	ldr	r3, [pc, #120]	; (8006198 <UART_SetConfig+0x56c>)
 800611e:	61fb      	str	r3, [r7, #28]
        break;
 8006120:	e00d      	b.n	800613e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006122:	f7fe fe17 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 8006126:	61f8      	str	r0, [r7, #28]
        break;
 8006128:	e009      	b.n	800613e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800612a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800612e:	61fb      	str	r3, [r7, #28]
        break;
 8006130:	e005      	b.n	800613e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800613c:	bf00      	nop
    }

    if (pclk != 0U)
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d019      	beq.n	8006178 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	085a      	lsrs	r2, r3, #1
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	441a      	add	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	fbb2 f3f3 	udiv	r3, r2, r3
 8006156:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	2b0f      	cmp	r3, #15
 800615c:	d909      	bls.n	8006172 <UART_SetConfig+0x546>
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006164:	d205      	bcs.n	8006172 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	60da      	str	r2, [r3, #12]
 8006170:	e002      	b.n	8006178 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006184:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006188:	4618      	mov	r0, r3
 800618a:	3728      	adds	r7, #40	; 0x28
 800618c:	46bd      	mov	sp, r7
 800618e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006192:	bf00      	nop
 8006194:	40008000 	.word	0x40008000
 8006198:	00f42400 	.word	0x00f42400

0800619c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	f003 0308 	and.w	r3, r3, #8
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00a      	beq.n	80061c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00a      	beq.n	800620a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	f003 0310 	and.w	r3, r3, #16
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00a      	beq.n	800624e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	f003 0320 	and.w	r3, r3, #32
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01a      	beq.n	80062b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800629a:	d10a      	bne.n	80062b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	605a      	str	r2, [r3, #4]
  }
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b098      	sub	sp, #96	; 0x60
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062f0:	f7fc fa1c 	bl	800272c <HAL_GetTick>
 80062f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0308 	and.w	r3, r3, #8
 8006300:	2b08      	cmp	r3, #8
 8006302:	d12e      	bne.n	8006362 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006304:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800630c:	2200      	movs	r2, #0
 800630e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f88c 	bl	8006430 <UART_WaitOnFlagUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d021      	beq.n	8006362 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006326:	e853 3f00 	ldrex	r3, [r3]
 800632a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800632c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800632e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006332:	653b      	str	r3, [r7, #80]	; 0x50
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	461a      	mov	r2, r3
 800633a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800633c:	647b      	str	r3, [r7, #68]	; 0x44
 800633e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006344:	e841 2300 	strex	r3, r2, [r1]
 8006348:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800634a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1e6      	bne.n	800631e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2220      	movs	r2, #32
 8006354:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e062      	b.n	8006428 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0304 	and.w	r3, r3, #4
 800636c:	2b04      	cmp	r3, #4
 800636e:	d149      	bne.n	8006404 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006370:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006378:	2200      	movs	r2, #0
 800637a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f856 	bl	8006430 <UART_WaitOnFlagUntilTimeout>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d03c      	beq.n	8006404 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	623b      	str	r3, [r7, #32]
   return(result);
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800639e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	461a      	mov	r2, r3
 80063a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a8:	633b      	str	r3, [r7, #48]	; 0x30
 80063aa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b0:	e841 2300 	strex	r3, r2, [r1]
 80063b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1e6      	bne.n	800638a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3308      	adds	r3, #8
 80063c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	e853 3f00 	ldrex	r3, [r3]
 80063ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0301 	bic.w	r3, r3, #1
 80063d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3308      	adds	r3, #8
 80063da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063dc:	61fa      	str	r2, [r7, #28]
 80063de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	69b9      	ldr	r1, [r7, #24]
 80063e2:	69fa      	ldr	r2, [r7, #28]
 80063e4:	e841 2300 	strex	r3, r2, [r1]
 80063e8:	617b      	str	r3, [r7, #20]
   return(result);
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e5      	bne.n	80063bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e011      	b.n	8006428 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2220      	movs	r2, #32
 8006408:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2220      	movs	r2, #32
 800640e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3758      	adds	r7, #88	; 0x58
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	603b      	str	r3, [r7, #0]
 800643c:	4613      	mov	r3, r2
 800643e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006440:	e049      	b.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006448:	d045      	beq.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800644a:	f7fc f96f 	bl	800272c <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	429a      	cmp	r2, r3
 8006458:	d302      	bcc.n	8006460 <UART_WaitOnFlagUntilTimeout+0x30>
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e048      	b.n	80064f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0304 	and.w	r3, r3, #4
 800646e:	2b00      	cmp	r3, #0
 8006470:	d031      	beq.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	f003 0308 	and.w	r3, r3, #8
 800647c:	2b08      	cmp	r3, #8
 800647e:	d110      	bne.n	80064a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2208      	movs	r2, #8
 8006486:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 f838 	bl	80064fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2208      	movs	r2, #8
 8006492:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e029      	b.n	80064f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064b0:	d111      	bne.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 f81e 	bl	80064fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e00f      	b.n	80064f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69da      	ldr	r2, [r3, #28]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4013      	ands	r3, r2
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	bf0c      	ite	eq
 80064e6:	2301      	moveq	r3, #1
 80064e8:	2300      	movne	r3, #0
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	79fb      	ldrb	r3, [r7, #7]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d0a6      	beq.n	8006442 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064fe:	b480      	push	{r7}
 8006500:	b095      	sub	sp, #84	; 0x54
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650e:	e853 3f00 	ldrex	r3, [r3]
 8006512:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800651a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	461a      	mov	r2, r3
 8006522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006524:	643b      	str	r3, [r7, #64]	; 0x40
 8006526:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006528:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800652a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800652c:	e841 2300 	strex	r3, r2, [r1]
 8006530:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1e6      	bne.n	8006506 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3308      	adds	r3, #8
 800653e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	e853 3f00 	ldrex	r3, [r3]
 8006546:	61fb      	str	r3, [r7, #28]
   return(result);
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	f023 0301 	bic.w	r3, r3, #1
 800654e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3308      	adds	r3, #8
 8006556:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006558:	62fa      	str	r2, [r7, #44]	; 0x2c
 800655a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800655e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e5      	bne.n	8006538 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006570:	2b01      	cmp	r3, #1
 8006572:	d118      	bne.n	80065a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	60bb      	str	r3, [r7, #8]
   return(result);
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f023 0310 	bic.w	r3, r3, #16
 8006588:	647b      	str	r3, [r7, #68]	; 0x44
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006592:	61bb      	str	r3, [r7, #24]
 8006594:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	6979      	ldr	r1, [r7, #20]
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	613b      	str	r3, [r7, #16]
   return(result);
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e6      	bne.n	8006574 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80065ba:	bf00      	nop
 80065bc:	3754      	adds	r7, #84	; 0x54
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065c6:	b084      	sub	sp, #16
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	f107 001c 	add.w	r0, r7, #28
 80065d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fa65 	bl	8006ab4 <USB_CoreReset>
 80065ea:	4603      	mov	r3, r0
 80065ec:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80065ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d106      	bne.n	8006602 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	639a      	str	r2, [r3, #56]	; 0x38
 8006600:	e005      	b.n	800660e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006606:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800660e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800661a:	b004      	add	sp, #16
 800661c:	4770      	bx	lr

0800661e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f023 0201 	bic.w	r2, r3, #1
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d115      	bne.n	800668e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800666e:	2001      	movs	r0, #1
 8006670:	f7fc f868 	bl	8002744 <HAL_Delay>
      ms++;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3301      	adds	r3, #1
 8006678:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fa0c 	bl	8006a98 <USB_GetMode>
 8006680:	4603      	mov	r3, r0
 8006682:	2b01      	cmp	r3, #1
 8006684:	d01e      	beq.n	80066c4 <USB_SetCurrentMode+0x84>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2b31      	cmp	r3, #49	; 0x31
 800668a:	d9f0      	bls.n	800666e <USB_SetCurrentMode+0x2e>
 800668c:	e01a      	b.n	80066c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800668e:	78fb      	ldrb	r3, [r7, #3]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d115      	bne.n	80066c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066a0:	2001      	movs	r0, #1
 80066a2:	f7fc f84f 	bl	8002744 <HAL_Delay>
      ms++;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	3301      	adds	r3, #1
 80066aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f9f3 	bl	8006a98 <USB_GetMode>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d005      	beq.n	80066c4 <USB_SetCurrentMode+0x84>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b31      	cmp	r3, #49	; 0x31
 80066bc:	d9f0      	bls.n	80066a0 <USB_SetCurrentMode+0x60>
 80066be:	e001      	b.n	80066c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e005      	b.n	80066d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b32      	cmp	r3, #50	; 0x32
 80066c8:	d101      	bne.n	80066ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e000      	b.n	80066d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066d8:	b084      	sub	sp, #16
 80066da:	b580      	push	{r7, lr}
 80066dc:	b086      	sub	sp, #24
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80066e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066f2:	2300      	movs	r3, #0
 80066f4:	613b      	str	r3, [r7, #16]
 80066f6:	e009      	b.n	800670c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	3340      	adds	r3, #64	; 0x40
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	2200      	movs	r2, #0
 8006704:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	3301      	adds	r3, #1
 800670a:	613b      	str	r3, [r7, #16]
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	2b0e      	cmp	r3, #14
 8006710:	d9f2      	bls.n	80066f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006714:	2b00      	cmp	r3, #0
 8006716:	d11c      	bne.n	8006752 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006726:	f043 0302 	orr.w	r3, r3, #2
 800672a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	e005      	b.n	800675e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006756:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006764:	461a      	mov	r2, r3
 8006766:	2300      	movs	r3, #0
 8006768:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800676a:	2103      	movs	r1, #3
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f959 	bl	8006a24 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006772:	2110      	movs	r1, #16
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f8f1 	bl	800695c <USB_FlushTxFifo>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f91d 	bl	80069c4 <USB_FlushRxFifo>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800679a:	461a      	mov	r2, r3
 800679c:	2300      	movs	r3, #0
 800679e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a6:	461a      	mov	r2, r3
 80067a8:	2300      	movs	r3, #0
 80067aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b2:	461a      	mov	r2, r3
 80067b4:	2300      	movs	r3, #0
 80067b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067b8:	2300      	movs	r3, #0
 80067ba:	613b      	str	r3, [r7, #16]
 80067bc:	e043      	b.n	8006846 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067d4:	d118      	bne.n	8006808 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10a      	bne.n	80067f2 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e8:	461a      	mov	r2, r3
 80067ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067ee:	6013      	str	r3, [r2, #0]
 80067f0:	e013      	b.n	800681a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fe:	461a      	mov	r2, r3
 8006800:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006804:	6013      	str	r3, [r2, #0]
 8006806:	e008      	b.n	800681a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006814:	461a      	mov	r2, r3
 8006816:	2300      	movs	r3, #0
 8006818:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4413      	add	r3, r2
 8006822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006826:	461a      	mov	r2, r3
 8006828:	2300      	movs	r3, #0
 800682a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006838:	461a      	mov	r2, r3
 800683a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800683e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	3301      	adds	r3, #1
 8006844:	613b      	str	r3, [r7, #16]
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	429a      	cmp	r2, r3
 800684c:	d3b7      	bcc.n	80067be <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800684e:	2300      	movs	r3, #0
 8006850:	613b      	str	r3, [r7, #16]
 8006852:	e043      	b.n	80068dc <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006866:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800686a:	d118      	bne.n	800689e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10a      	bne.n	8006888 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687e:	461a      	mov	r2, r3
 8006880:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006884:	6013      	str	r3, [r2, #0]
 8006886:	e013      	b.n	80068b0 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4413      	add	r3, r2
 8006890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006894:	461a      	mov	r2, r3
 8006896:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	e008      	b.n	80068b0 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068aa:	461a      	mov	r2, r3
 80068ac:	2300      	movs	r3, #0
 80068ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068bc:	461a      	mov	r2, r3
 80068be:	2300      	movs	r3, #0
 80068c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ce:	461a      	mov	r2, r3
 80068d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	3301      	adds	r3, #1
 80068da:	613b      	str	r3, [r7, #16]
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d3b7      	bcc.n	8006854 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006904:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f043 0210 	orr.w	r2, r3, #16
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	4b10      	ldr	r3, [pc, #64]	; (8006958 <USB_DevInit+0x280>)
 8006918:	4313      	orrs	r3, r2
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800691e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006920:	2b00      	cmp	r3, #0
 8006922:	d005      	beq.n	8006930 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	f043 0208 	orr.w	r2, r3, #8
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006932:	2b01      	cmp	r3, #1
 8006934:	d107      	bne.n	8006946 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800693e:	f043 0304 	orr.w	r3, r3, #4
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006946:	7dfb      	ldrb	r3, [r7, #23]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3718      	adds	r7, #24
 800694c:	46bd      	mov	sp, r7
 800694e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006952:	b004      	add	sp, #16
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	803c3800 	.word	0x803c3800

0800695c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3301      	adds	r3, #1
 800696e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4a13      	ldr	r2, [pc, #76]	; (80069c0 <USB_FlushTxFifo+0x64>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d901      	bls.n	800697c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e01b      	b.n	80069b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	daf2      	bge.n	800696a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	019b      	lsls	r3, r3, #6
 800698c:	f043 0220 	orr.w	r2, r3, #32
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	3301      	adds	r3, #1
 8006998:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4a08      	ldr	r2, [pc, #32]	; (80069c0 <USB_FlushTxFifo+0x64>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d901      	bls.n	80069a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e006      	b.n	80069b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f003 0320 	and.w	r3, r3, #32
 80069ae:	2b20      	cmp	r3, #32
 80069b0:	d0f0      	beq.n	8006994 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	00030d40 	.word	0x00030d40

080069c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	3301      	adds	r3, #1
 80069d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4a11      	ldr	r2, [pc, #68]	; (8006a20 <USB_FlushRxFifo+0x5c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d901      	bls.n	80069e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e018      	b.n	8006a14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	daf2      	bge.n	80069d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2210      	movs	r2, #16
 80069f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	3301      	adds	r3, #1
 80069f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4a08      	ldr	r2, [pc, #32]	; (8006a20 <USB_FlushRxFifo+0x5c>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d901      	bls.n	8006a06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e006      	b.n	8006a14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	f003 0310 	and.w	r3, r3, #16
 8006a0e:	2b10      	cmp	r3, #16
 8006a10:	d0f0      	beq.n	80069f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	00030d40 	.word	0x00030d40

08006a24 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	78fb      	ldrb	r3, [r7, #3]
 8006a3e:	68f9      	ldr	r1, [r7, #12]
 8006a40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a44:	4313      	orrs	r3, r2
 8006a46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b085      	sub	sp, #20
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a70:	f023 0303 	bic.w	r3, r3, #3
 8006a74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a84:	f043 0302 	orr.w	r3, r3, #2
 8006a88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3714      	adds	r7, #20
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4a13      	ldr	r2, [pc, #76]	; (8006b18 <USB_CoreReset+0x64>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d901      	bls.n	8006ad2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e01b      	b.n	8006b0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	daf2      	bge.n	8006ac0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	f043 0201 	orr.w	r2, r3, #1
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3301      	adds	r3, #1
 8006aee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4a09      	ldr	r2, [pc, #36]	; (8006b18 <USB_CoreReset+0x64>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d901      	bls.n	8006afc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e006      	b.n	8006b0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d0f0      	beq.n	8006aea <USB_CoreReset+0x36>

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	00030d40 	.word	0x00030d40

08006b1c <__cvt>:
 8006b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b20:	ec55 4b10 	vmov	r4, r5, d0
 8006b24:	2d00      	cmp	r5, #0
 8006b26:	460e      	mov	r6, r1
 8006b28:	4619      	mov	r1, r3
 8006b2a:	462b      	mov	r3, r5
 8006b2c:	bfbb      	ittet	lt
 8006b2e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006b32:	461d      	movlt	r5, r3
 8006b34:	2300      	movge	r3, #0
 8006b36:	232d      	movlt	r3, #45	; 0x2d
 8006b38:	700b      	strb	r3, [r1, #0]
 8006b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006b40:	4691      	mov	r9, r2
 8006b42:	f023 0820 	bic.w	r8, r3, #32
 8006b46:	bfbc      	itt	lt
 8006b48:	4622      	movlt	r2, r4
 8006b4a:	4614      	movlt	r4, r2
 8006b4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b50:	d005      	beq.n	8006b5e <__cvt+0x42>
 8006b52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006b56:	d100      	bne.n	8006b5a <__cvt+0x3e>
 8006b58:	3601      	adds	r6, #1
 8006b5a:	2102      	movs	r1, #2
 8006b5c:	e000      	b.n	8006b60 <__cvt+0x44>
 8006b5e:	2103      	movs	r1, #3
 8006b60:	ab03      	add	r3, sp, #12
 8006b62:	9301      	str	r3, [sp, #4]
 8006b64:	ab02      	add	r3, sp, #8
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	ec45 4b10 	vmov	d0, r4, r5
 8006b6c:	4653      	mov	r3, sl
 8006b6e:	4632      	mov	r2, r6
 8006b70:	f000 fdee 	bl	8007750 <_dtoa_r>
 8006b74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006b78:	4607      	mov	r7, r0
 8006b7a:	d102      	bne.n	8006b82 <__cvt+0x66>
 8006b7c:	f019 0f01 	tst.w	r9, #1
 8006b80:	d022      	beq.n	8006bc8 <__cvt+0xac>
 8006b82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b86:	eb07 0906 	add.w	r9, r7, r6
 8006b8a:	d110      	bne.n	8006bae <__cvt+0x92>
 8006b8c:	783b      	ldrb	r3, [r7, #0]
 8006b8e:	2b30      	cmp	r3, #48	; 0x30
 8006b90:	d10a      	bne.n	8006ba8 <__cvt+0x8c>
 8006b92:	2200      	movs	r2, #0
 8006b94:	2300      	movs	r3, #0
 8006b96:	4620      	mov	r0, r4
 8006b98:	4629      	mov	r1, r5
 8006b9a:	f7f9 ff95 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b9e:	b918      	cbnz	r0, 8006ba8 <__cvt+0x8c>
 8006ba0:	f1c6 0601 	rsb	r6, r6, #1
 8006ba4:	f8ca 6000 	str.w	r6, [sl]
 8006ba8:	f8da 3000 	ldr.w	r3, [sl]
 8006bac:	4499      	add	r9, r3
 8006bae:	2200      	movs	r2, #0
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	f7f9 ff87 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bba:	b108      	cbz	r0, 8006bc0 <__cvt+0xa4>
 8006bbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006bc0:	2230      	movs	r2, #48	; 0x30
 8006bc2:	9b03      	ldr	r3, [sp, #12]
 8006bc4:	454b      	cmp	r3, r9
 8006bc6:	d307      	bcc.n	8006bd8 <__cvt+0xbc>
 8006bc8:	9b03      	ldr	r3, [sp, #12]
 8006bca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bcc:	1bdb      	subs	r3, r3, r7
 8006bce:	4638      	mov	r0, r7
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	b004      	add	sp, #16
 8006bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd8:	1c59      	adds	r1, r3, #1
 8006bda:	9103      	str	r1, [sp, #12]
 8006bdc:	701a      	strb	r2, [r3, #0]
 8006bde:	e7f0      	b.n	8006bc2 <__cvt+0xa6>

08006be0 <__exponent>:
 8006be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006be2:	4603      	mov	r3, r0
 8006be4:	2900      	cmp	r1, #0
 8006be6:	bfb8      	it	lt
 8006be8:	4249      	neglt	r1, r1
 8006bea:	f803 2b02 	strb.w	r2, [r3], #2
 8006bee:	bfb4      	ite	lt
 8006bf0:	222d      	movlt	r2, #45	; 0x2d
 8006bf2:	222b      	movge	r2, #43	; 0x2b
 8006bf4:	2909      	cmp	r1, #9
 8006bf6:	7042      	strb	r2, [r0, #1]
 8006bf8:	dd2a      	ble.n	8006c50 <__exponent+0x70>
 8006bfa:	f10d 0207 	add.w	r2, sp, #7
 8006bfe:	4617      	mov	r7, r2
 8006c00:	260a      	movs	r6, #10
 8006c02:	4694      	mov	ip, r2
 8006c04:	fb91 f5f6 	sdiv	r5, r1, r6
 8006c08:	fb06 1415 	mls	r4, r6, r5, r1
 8006c0c:	3430      	adds	r4, #48	; 0x30
 8006c0e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006c12:	460c      	mov	r4, r1
 8006c14:	2c63      	cmp	r4, #99	; 0x63
 8006c16:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	dcf1      	bgt.n	8006c02 <__exponent+0x22>
 8006c1e:	3130      	adds	r1, #48	; 0x30
 8006c20:	f1ac 0402 	sub.w	r4, ip, #2
 8006c24:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006c28:	1c41      	adds	r1, r0, #1
 8006c2a:	4622      	mov	r2, r4
 8006c2c:	42ba      	cmp	r2, r7
 8006c2e:	d30a      	bcc.n	8006c46 <__exponent+0x66>
 8006c30:	f10d 0209 	add.w	r2, sp, #9
 8006c34:	eba2 020c 	sub.w	r2, r2, ip
 8006c38:	42bc      	cmp	r4, r7
 8006c3a:	bf88      	it	hi
 8006c3c:	2200      	movhi	r2, #0
 8006c3e:	4413      	add	r3, r2
 8006c40:	1a18      	subs	r0, r3, r0
 8006c42:	b003      	add	sp, #12
 8006c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c46:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006c4a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006c4e:	e7ed      	b.n	8006c2c <__exponent+0x4c>
 8006c50:	2330      	movs	r3, #48	; 0x30
 8006c52:	3130      	adds	r1, #48	; 0x30
 8006c54:	7083      	strb	r3, [r0, #2]
 8006c56:	70c1      	strb	r1, [r0, #3]
 8006c58:	1d03      	adds	r3, r0, #4
 8006c5a:	e7f1      	b.n	8006c40 <__exponent+0x60>

08006c5c <_printf_float>:
 8006c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c60:	ed2d 8b02 	vpush	{d8}
 8006c64:	b08d      	sub	sp, #52	; 0x34
 8006c66:	460c      	mov	r4, r1
 8006c68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006c6c:	4616      	mov	r6, r2
 8006c6e:	461f      	mov	r7, r3
 8006c70:	4605      	mov	r5, r0
 8006c72:	f000 fca3 	bl	80075bc <_localeconv_r>
 8006c76:	f8d0 a000 	ldr.w	sl, [r0]
 8006c7a:	4650      	mov	r0, sl
 8006c7c:	f7f9 faf8 	bl	8000270 <strlen>
 8006c80:	2300      	movs	r3, #0
 8006c82:	930a      	str	r3, [sp, #40]	; 0x28
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	9305      	str	r3, [sp, #20]
 8006c88:	f8d8 3000 	ldr.w	r3, [r8]
 8006c8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006c90:	3307      	adds	r3, #7
 8006c92:	f023 0307 	bic.w	r3, r3, #7
 8006c96:	f103 0208 	add.w	r2, r3, #8
 8006c9a:	f8c8 2000 	str.w	r2, [r8]
 8006c9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ca2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ca6:	9307      	str	r3, [sp, #28]
 8006ca8:	f8cd 8018 	str.w	r8, [sp, #24]
 8006cac:	ee08 0a10 	vmov	s16, r0
 8006cb0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006cb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cb8:	4b9e      	ldr	r3, [pc, #632]	; (8006f34 <_printf_float+0x2d8>)
 8006cba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cbe:	f7f9 ff35 	bl	8000b2c <__aeabi_dcmpun>
 8006cc2:	bb88      	cbnz	r0, 8006d28 <_printf_float+0xcc>
 8006cc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cc8:	4b9a      	ldr	r3, [pc, #616]	; (8006f34 <_printf_float+0x2d8>)
 8006cca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cce:	f7f9 ff0f 	bl	8000af0 <__aeabi_dcmple>
 8006cd2:	bb48      	cbnz	r0, 8006d28 <_printf_float+0xcc>
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	4640      	mov	r0, r8
 8006cda:	4649      	mov	r1, r9
 8006cdc:	f7f9 fefe 	bl	8000adc <__aeabi_dcmplt>
 8006ce0:	b110      	cbz	r0, 8006ce8 <_printf_float+0x8c>
 8006ce2:	232d      	movs	r3, #45	; 0x2d
 8006ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ce8:	4a93      	ldr	r2, [pc, #588]	; (8006f38 <_printf_float+0x2dc>)
 8006cea:	4b94      	ldr	r3, [pc, #592]	; (8006f3c <_printf_float+0x2e0>)
 8006cec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006cf0:	bf94      	ite	ls
 8006cf2:	4690      	movls	r8, r2
 8006cf4:	4698      	movhi	r8, r3
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	6123      	str	r3, [r4, #16]
 8006cfa:	9b05      	ldr	r3, [sp, #20]
 8006cfc:	f023 0304 	bic.w	r3, r3, #4
 8006d00:	6023      	str	r3, [r4, #0]
 8006d02:	f04f 0900 	mov.w	r9, #0
 8006d06:	9700      	str	r7, [sp, #0]
 8006d08:	4633      	mov	r3, r6
 8006d0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d0c:	4621      	mov	r1, r4
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f000 f9da 	bl	80070c8 <_printf_common>
 8006d14:	3001      	adds	r0, #1
 8006d16:	f040 8090 	bne.w	8006e3a <_printf_float+0x1de>
 8006d1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d1e:	b00d      	add	sp, #52	; 0x34
 8006d20:	ecbd 8b02 	vpop	{d8}
 8006d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d28:	4642      	mov	r2, r8
 8006d2a:	464b      	mov	r3, r9
 8006d2c:	4640      	mov	r0, r8
 8006d2e:	4649      	mov	r1, r9
 8006d30:	f7f9 fefc 	bl	8000b2c <__aeabi_dcmpun>
 8006d34:	b140      	cbz	r0, 8006d48 <_printf_float+0xec>
 8006d36:	464b      	mov	r3, r9
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	bfbc      	itt	lt
 8006d3c:	232d      	movlt	r3, #45	; 0x2d
 8006d3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d42:	4a7f      	ldr	r2, [pc, #508]	; (8006f40 <_printf_float+0x2e4>)
 8006d44:	4b7f      	ldr	r3, [pc, #508]	; (8006f44 <_printf_float+0x2e8>)
 8006d46:	e7d1      	b.n	8006cec <_printf_float+0x90>
 8006d48:	6863      	ldr	r3, [r4, #4]
 8006d4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006d4e:	9206      	str	r2, [sp, #24]
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	d13f      	bne.n	8006dd4 <_printf_float+0x178>
 8006d54:	2306      	movs	r3, #6
 8006d56:	6063      	str	r3, [r4, #4]
 8006d58:	9b05      	ldr	r3, [sp, #20]
 8006d5a:	6861      	ldr	r1, [r4, #4]
 8006d5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006d60:	2300      	movs	r3, #0
 8006d62:	9303      	str	r3, [sp, #12]
 8006d64:	ab0a      	add	r3, sp, #40	; 0x28
 8006d66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006d6a:	ab09      	add	r3, sp, #36	; 0x24
 8006d6c:	ec49 8b10 	vmov	d0, r8, r9
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	6022      	str	r2, [r4, #0]
 8006d74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006d78:	4628      	mov	r0, r5
 8006d7a:	f7ff fecf 	bl	8006b1c <__cvt>
 8006d7e:	9b06      	ldr	r3, [sp, #24]
 8006d80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d82:	2b47      	cmp	r3, #71	; 0x47
 8006d84:	4680      	mov	r8, r0
 8006d86:	d108      	bne.n	8006d9a <_printf_float+0x13e>
 8006d88:	1cc8      	adds	r0, r1, #3
 8006d8a:	db02      	blt.n	8006d92 <_printf_float+0x136>
 8006d8c:	6863      	ldr	r3, [r4, #4]
 8006d8e:	4299      	cmp	r1, r3
 8006d90:	dd41      	ble.n	8006e16 <_printf_float+0x1ba>
 8006d92:	f1ab 0302 	sub.w	r3, fp, #2
 8006d96:	fa5f fb83 	uxtb.w	fp, r3
 8006d9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d9e:	d820      	bhi.n	8006de2 <_printf_float+0x186>
 8006da0:	3901      	subs	r1, #1
 8006da2:	465a      	mov	r2, fp
 8006da4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006da8:	9109      	str	r1, [sp, #36]	; 0x24
 8006daa:	f7ff ff19 	bl	8006be0 <__exponent>
 8006dae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006db0:	1813      	adds	r3, r2, r0
 8006db2:	2a01      	cmp	r2, #1
 8006db4:	4681      	mov	r9, r0
 8006db6:	6123      	str	r3, [r4, #16]
 8006db8:	dc02      	bgt.n	8006dc0 <_printf_float+0x164>
 8006dba:	6822      	ldr	r2, [r4, #0]
 8006dbc:	07d2      	lsls	r2, r2, #31
 8006dbe:	d501      	bpl.n	8006dc4 <_printf_float+0x168>
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	6123      	str	r3, [r4, #16]
 8006dc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d09c      	beq.n	8006d06 <_printf_float+0xaa>
 8006dcc:	232d      	movs	r3, #45	; 0x2d
 8006dce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dd2:	e798      	b.n	8006d06 <_printf_float+0xaa>
 8006dd4:	9a06      	ldr	r2, [sp, #24]
 8006dd6:	2a47      	cmp	r2, #71	; 0x47
 8006dd8:	d1be      	bne.n	8006d58 <_printf_float+0xfc>
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1bc      	bne.n	8006d58 <_printf_float+0xfc>
 8006dde:	2301      	movs	r3, #1
 8006de0:	e7b9      	b.n	8006d56 <_printf_float+0xfa>
 8006de2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006de6:	d118      	bne.n	8006e1a <_printf_float+0x1be>
 8006de8:	2900      	cmp	r1, #0
 8006dea:	6863      	ldr	r3, [r4, #4]
 8006dec:	dd0b      	ble.n	8006e06 <_printf_float+0x1aa>
 8006dee:	6121      	str	r1, [r4, #16]
 8006df0:	b913      	cbnz	r3, 8006df8 <_printf_float+0x19c>
 8006df2:	6822      	ldr	r2, [r4, #0]
 8006df4:	07d0      	lsls	r0, r2, #31
 8006df6:	d502      	bpl.n	8006dfe <_printf_float+0x1a2>
 8006df8:	3301      	adds	r3, #1
 8006dfa:	440b      	add	r3, r1
 8006dfc:	6123      	str	r3, [r4, #16]
 8006dfe:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e00:	f04f 0900 	mov.w	r9, #0
 8006e04:	e7de      	b.n	8006dc4 <_printf_float+0x168>
 8006e06:	b913      	cbnz	r3, 8006e0e <_printf_float+0x1b2>
 8006e08:	6822      	ldr	r2, [r4, #0]
 8006e0a:	07d2      	lsls	r2, r2, #31
 8006e0c:	d501      	bpl.n	8006e12 <_printf_float+0x1b6>
 8006e0e:	3302      	adds	r3, #2
 8006e10:	e7f4      	b.n	8006dfc <_printf_float+0x1a0>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e7f2      	b.n	8006dfc <_printf_float+0x1a0>
 8006e16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e1c:	4299      	cmp	r1, r3
 8006e1e:	db05      	blt.n	8006e2c <_printf_float+0x1d0>
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	6121      	str	r1, [r4, #16]
 8006e24:	07d8      	lsls	r0, r3, #31
 8006e26:	d5ea      	bpl.n	8006dfe <_printf_float+0x1a2>
 8006e28:	1c4b      	adds	r3, r1, #1
 8006e2a:	e7e7      	b.n	8006dfc <_printf_float+0x1a0>
 8006e2c:	2900      	cmp	r1, #0
 8006e2e:	bfd4      	ite	le
 8006e30:	f1c1 0202 	rsble	r2, r1, #2
 8006e34:	2201      	movgt	r2, #1
 8006e36:	4413      	add	r3, r2
 8006e38:	e7e0      	b.n	8006dfc <_printf_float+0x1a0>
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	055a      	lsls	r2, r3, #21
 8006e3e:	d407      	bmi.n	8006e50 <_printf_float+0x1f4>
 8006e40:	6923      	ldr	r3, [r4, #16]
 8006e42:	4642      	mov	r2, r8
 8006e44:	4631      	mov	r1, r6
 8006e46:	4628      	mov	r0, r5
 8006e48:	47b8      	blx	r7
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	d12c      	bne.n	8006ea8 <_printf_float+0x24c>
 8006e4e:	e764      	b.n	8006d1a <_printf_float+0xbe>
 8006e50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e54:	f240 80e0 	bls.w	8007018 <_printf_float+0x3bc>
 8006e58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	2300      	movs	r3, #0
 8006e60:	f7f9 fe32 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	d034      	beq.n	8006ed2 <_printf_float+0x276>
 8006e68:	4a37      	ldr	r2, [pc, #220]	; (8006f48 <_printf_float+0x2ec>)
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	4631      	mov	r1, r6
 8006e6e:	4628      	mov	r0, r5
 8006e70:	47b8      	blx	r7
 8006e72:	3001      	adds	r0, #1
 8006e74:	f43f af51 	beq.w	8006d1a <_printf_float+0xbe>
 8006e78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	db02      	blt.n	8006e86 <_printf_float+0x22a>
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	07d8      	lsls	r0, r3, #31
 8006e84:	d510      	bpl.n	8006ea8 <_printf_float+0x24c>
 8006e86:	ee18 3a10 	vmov	r3, s16
 8006e8a:	4652      	mov	r2, sl
 8006e8c:	4631      	mov	r1, r6
 8006e8e:	4628      	mov	r0, r5
 8006e90:	47b8      	blx	r7
 8006e92:	3001      	adds	r0, #1
 8006e94:	f43f af41 	beq.w	8006d1a <_printf_float+0xbe>
 8006e98:	f04f 0800 	mov.w	r8, #0
 8006e9c:	f104 091a 	add.w	r9, r4, #26
 8006ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	4543      	cmp	r3, r8
 8006ea6:	dc09      	bgt.n	8006ebc <_printf_float+0x260>
 8006ea8:	6823      	ldr	r3, [r4, #0]
 8006eaa:	079b      	lsls	r3, r3, #30
 8006eac:	f100 8107 	bmi.w	80070be <_printf_float+0x462>
 8006eb0:	68e0      	ldr	r0, [r4, #12]
 8006eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eb4:	4298      	cmp	r0, r3
 8006eb6:	bfb8      	it	lt
 8006eb8:	4618      	movlt	r0, r3
 8006eba:	e730      	b.n	8006d1e <_printf_float+0xc2>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	464a      	mov	r2, r9
 8006ec0:	4631      	mov	r1, r6
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	47b8      	blx	r7
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	f43f af27 	beq.w	8006d1a <_printf_float+0xbe>
 8006ecc:	f108 0801 	add.w	r8, r8, #1
 8006ed0:	e7e6      	b.n	8006ea0 <_printf_float+0x244>
 8006ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	dc39      	bgt.n	8006f4c <_printf_float+0x2f0>
 8006ed8:	4a1b      	ldr	r2, [pc, #108]	; (8006f48 <_printf_float+0x2ec>)
 8006eda:	2301      	movs	r3, #1
 8006edc:	4631      	mov	r1, r6
 8006ede:	4628      	mov	r0, r5
 8006ee0:	47b8      	blx	r7
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	f43f af19 	beq.w	8006d1a <_printf_float+0xbe>
 8006ee8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006eec:	4313      	orrs	r3, r2
 8006eee:	d102      	bne.n	8006ef6 <_printf_float+0x29a>
 8006ef0:	6823      	ldr	r3, [r4, #0]
 8006ef2:	07d9      	lsls	r1, r3, #31
 8006ef4:	d5d8      	bpl.n	8006ea8 <_printf_float+0x24c>
 8006ef6:	ee18 3a10 	vmov	r3, s16
 8006efa:	4652      	mov	r2, sl
 8006efc:	4631      	mov	r1, r6
 8006efe:	4628      	mov	r0, r5
 8006f00:	47b8      	blx	r7
 8006f02:	3001      	adds	r0, #1
 8006f04:	f43f af09 	beq.w	8006d1a <_printf_float+0xbe>
 8006f08:	f04f 0900 	mov.w	r9, #0
 8006f0c:	f104 0a1a 	add.w	sl, r4, #26
 8006f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f12:	425b      	negs	r3, r3
 8006f14:	454b      	cmp	r3, r9
 8006f16:	dc01      	bgt.n	8006f1c <_printf_float+0x2c0>
 8006f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f1a:	e792      	b.n	8006e42 <_printf_float+0x1e6>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	4652      	mov	r2, sl
 8006f20:	4631      	mov	r1, r6
 8006f22:	4628      	mov	r0, r5
 8006f24:	47b8      	blx	r7
 8006f26:	3001      	adds	r0, #1
 8006f28:	f43f aef7 	beq.w	8006d1a <_printf_float+0xbe>
 8006f2c:	f109 0901 	add.w	r9, r9, #1
 8006f30:	e7ee      	b.n	8006f10 <_printf_float+0x2b4>
 8006f32:	bf00      	nop
 8006f34:	7fefffff 	.word	0x7fefffff
 8006f38:	08009914 	.word	0x08009914
 8006f3c:	08009918 	.word	0x08009918
 8006f40:	0800991c 	.word	0x0800991c
 8006f44:	08009920 	.word	0x08009920
 8006f48:	08009924 	.word	0x08009924
 8006f4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f50:	429a      	cmp	r2, r3
 8006f52:	bfa8      	it	ge
 8006f54:	461a      	movge	r2, r3
 8006f56:	2a00      	cmp	r2, #0
 8006f58:	4691      	mov	r9, r2
 8006f5a:	dc37      	bgt.n	8006fcc <_printf_float+0x370>
 8006f5c:	f04f 0b00 	mov.w	fp, #0
 8006f60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f64:	f104 021a 	add.w	r2, r4, #26
 8006f68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f6a:	9305      	str	r3, [sp, #20]
 8006f6c:	eba3 0309 	sub.w	r3, r3, r9
 8006f70:	455b      	cmp	r3, fp
 8006f72:	dc33      	bgt.n	8006fdc <_printf_float+0x380>
 8006f74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	db3b      	blt.n	8006ff4 <_printf_float+0x398>
 8006f7c:	6823      	ldr	r3, [r4, #0]
 8006f7e:	07da      	lsls	r2, r3, #31
 8006f80:	d438      	bmi.n	8006ff4 <_printf_float+0x398>
 8006f82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006f86:	eba2 0903 	sub.w	r9, r2, r3
 8006f8a:	9b05      	ldr	r3, [sp, #20]
 8006f8c:	1ad2      	subs	r2, r2, r3
 8006f8e:	4591      	cmp	r9, r2
 8006f90:	bfa8      	it	ge
 8006f92:	4691      	movge	r9, r2
 8006f94:	f1b9 0f00 	cmp.w	r9, #0
 8006f98:	dc35      	bgt.n	8007006 <_printf_float+0x3aa>
 8006f9a:	f04f 0800 	mov.w	r8, #0
 8006f9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fa2:	f104 0a1a 	add.w	sl, r4, #26
 8006fa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006faa:	1a9b      	subs	r3, r3, r2
 8006fac:	eba3 0309 	sub.w	r3, r3, r9
 8006fb0:	4543      	cmp	r3, r8
 8006fb2:	f77f af79 	ble.w	8006ea8 <_printf_float+0x24c>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	4652      	mov	r2, sl
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	47b8      	blx	r7
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	f43f aeaa 	beq.w	8006d1a <_printf_float+0xbe>
 8006fc6:	f108 0801 	add.w	r8, r8, #1
 8006fca:	e7ec      	b.n	8006fa6 <_printf_float+0x34a>
 8006fcc:	4613      	mov	r3, r2
 8006fce:	4631      	mov	r1, r6
 8006fd0:	4642      	mov	r2, r8
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	47b8      	blx	r7
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	d1c0      	bne.n	8006f5c <_printf_float+0x300>
 8006fda:	e69e      	b.n	8006d1a <_printf_float+0xbe>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	4631      	mov	r1, r6
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	9205      	str	r2, [sp, #20]
 8006fe4:	47b8      	blx	r7
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	f43f ae97 	beq.w	8006d1a <_printf_float+0xbe>
 8006fec:	9a05      	ldr	r2, [sp, #20]
 8006fee:	f10b 0b01 	add.w	fp, fp, #1
 8006ff2:	e7b9      	b.n	8006f68 <_printf_float+0x30c>
 8006ff4:	ee18 3a10 	vmov	r3, s16
 8006ff8:	4652      	mov	r2, sl
 8006ffa:	4631      	mov	r1, r6
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	47b8      	blx	r7
 8007000:	3001      	adds	r0, #1
 8007002:	d1be      	bne.n	8006f82 <_printf_float+0x326>
 8007004:	e689      	b.n	8006d1a <_printf_float+0xbe>
 8007006:	9a05      	ldr	r2, [sp, #20]
 8007008:	464b      	mov	r3, r9
 800700a:	4442      	add	r2, r8
 800700c:	4631      	mov	r1, r6
 800700e:	4628      	mov	r0, r5
 8007010:	47b8      	blx	r7
 8007012:	3001      	adds	r0, #1
 8007014:	d1c1      	bne.n	8006f9a <_printf_float+0x33e>
 8007016:	e680      	b.n	8006d1a <_printf_float+0xbe>
 8007018:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800701a:	2a01      	cmp	r2, #1
 800701c:	dc01      	bgt.n	8007022 <_printf_float+0x3c6>
 800701e:	07db      	lsls	r3, r3, #31
 8007020:	d53a      	bpl.n	8007098 <_printf_float+0x43c>
 8007022:	2301      	movs	r3, #1
 8007024:	4642      	mov	r2, r8
 8007026:	4631      	mov	r1, r6
 8007028:	4628      	mov	r0, r5
 800702a:	47b8      	blx	r7
 800702c:	3001      	adds	r0, #1
 800702e:	f43f ae74 	beq.w	8006d1a <_printf_float+0xbe>
 8007032:	ee18 3a10 	vmov	r3, s16
 8007036:	4652      	mov	r2, sl
 8007038:	4631      	mov	r1, r6
 800703a:	4628      	mov	r0, r5
 800703c:	47b8      	blx	r7
 800703e:	3001      	adds	r0, #1
 8007040:	f43f ae6b 	beq.w	8006d1a <_printf_float+0xbe>
 8007044:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007048:	2200      	movs	r2, #0
 800704a:	2300      	movs	r3, #0
 800704c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007050:	f7f9 fd3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007054:	b9d8      	cbnz	r0, 800708e <_printf_float+0x432>
 8007056:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800705a:	f108 0201 	add.w	r2, r8, #1
 800705e:	4631      	mov	r1, r6
 8007060:	4628      	mov	r0, r5
 8007062:	47b8      	blx	r7
 8007064:	3001      	adds	r0, #1
 8007066:	d10e      	bne.n	8007086 <_printf_float+0x42a>
 8007068:	e657      	b.n	8006d1a <_printf_float+0xbe>
 800706a:	2301      	movs	r3, #1
 800706c:	4652      	mov	r2, sl
 800706e:	4631      	mov	r1, r6
 8007070:	4628      	mov	r0, r5
 8007072:	47b8      	blx	r7
 8007074:	3001      	adds	r0, #1
 8007076:	f43f ae50 	beq.w	8006d1a <_printf_float+0xbe>
 800707a:	f108 0801 	add.w	r8, r8, #1
 800707e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007080:	3b01      	subs	r3, #1
 8007082:	4543      	cmp	r3, r8
 8007084:	dcf1      	bgt.n	800706a <_printf_float+0x40e>
 8007086:	464b      	mov	r3, r9
 8007088:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800708c:	e6da      	b.n	8006e44 <_printf_float+0x1e8>
 800708e:	f04f 0800 	mov.w	r8, #0
 8007092:	f104 0a1a 	add.w	sl, r4, #26
 8007096:	e7f2      	b.n	800707e <_printf_float+0x422>
 8007098:	2301      	movs	r3, #1
 800709a:	4642      	mov	r2, r8
 800709c:	e7df      	b.n	800705e <_printf_float+0x402>
 800709e:	2301      	movs	r3, #1
 80070a0:	464a      	mov	r2, r9
 80070a2:	4631      	mov	r1, r6
 80070a4:	4628      	mov	r0, r5
 80070a6:	47b8      	blx	r7
 80070a8:	3001      	adds	r0, #1
 80070aa:	f43f ae36 	beq.w	8006d1a <_printf_float+0xbe>
 80070ae:	f108 0801 	add.w	r8, r8, #1
 80070b2:	68e3      	ldr	r3, [r4, #12]
 80070b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070b6:	1a5b      	subs	r3, r3, r1
 80070b8:	4543      	cmp	r3, r8
 80070ba:	dcf0      	bgt.n	800709e <_printf_float+0x442>
 80070bc:	e6f8      	b.n	8006eb0 <_printf_float+0x254>
 80070be:	f04f 0800 	mov.w	r8, #0
 80070c2:	f104 0919 	add.w	r9, r4, #25
 80070c6:	e7f4      	b.n	80070b2 <_printf_float+0x456>

080070c8 <_printf_common>:
 80070c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070cc:	4616      	mov	r6, r2
 80070ce:	4699      	mov	r9, r3
 80070d0:	688a      	ldr	r2, [r1, #8]
 80070d2:	690b      	ldr	r3, [r1, #16]
 80070d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070d8:	4293      	cmp	r3, r2
 80070da:	bfb8      	it	lt
 80070dc:	4613      	movlt	r3, r2
 80070de:	6033      	str	r3, [r6, #0]
 80070e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070e4:	4607      	mov	r7, r0
 80070e6:	460c      	mov	r4, r1
 80070e8:	b10a      	cbz	r2, 80070ee <_printf_common+0x26>
 80070ea:	3301      	adds	r3, #1
 80070ec:	6033      	str	r3, [r6, #0]
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	0699      	lsls	r1, r3, #26
 80070f2:	bf42      	ittt	mi
 80070f4:	6833      	ldrmi	r3, [r6, #0]
 80070f6:	3302      	addmi	r3, #2
 80070f8:	6033      	strmi	r3, [r6, #0]
 80070fa:	6825      	ldr	r5, [r4, #0]
 80070fc:	f015 0506 	ands.w	r5, r5, #6
 8007100:	d106      	bne.n	8007110 <_printf_common+0x48>
 8007102:	f104 0a19 	add.w	sl, r4, #25
 8007106:	68e3      	ldr	r3, [r4, #12]
 8007108:	6832      	ldr	r2, [r6, #0]
 800710a:	1a9b      	subs	r3, r3, r2
 800710c:	42ab      	cmp	r3, r5
 800710e:	dc26      	bgt.n	800715e <_printf_common+0x96>
 8007110:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007114:	1e13      	subs	r3, r2, #0
 8007116:	6822      	ldr	r2, [r4, #0]
 8007118:	bf18      	it	ne
 800711a:	2301      	movne	r3, #1
 800711c:	0692      	lsls	r2, r2, #26
 800711e:	d42b      	bmi.n	8007178 <_printf_common+0xb0>
 8007120:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007124:	4649      	mov	r1, r9
 8007126:	4638      	mov	r0, r7
 8007128:	47c0      	blx	r8
 800712a:	3001      	adds	r0, #1
 800712c:	d01e      	beq.n	800716c <_printf_common+0xa4>
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	6922      	ldr	r2, [r4, #16]
 8007132:	f003 0306 	and.w	r3, r3, #6
 8007136:	2b04      	cmp	r3, #4
 8007138:	bf02      	ittt	eq
 800713a:	68e5      	ldreq	r5, [r4, #12]
 800713c:	6833      	ldreq	r3, [r6, #0]
 800713e:	1aed      	subeq	r5, r5, r3
 8007140:	68a3      	ldr	r3, [r4, #8]
 8007142:	bf0c      	ite	eq
 8007144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007148:	2500      	movne	r5, #0
 800714a:	4293      	cmp	r3, r2
 800714c:	bfc4      	itt	gt
 800714e:	1a9b      	subgt	r3, r3, r2
 8007150:	18ed      	addgt	r5, r5, r3
 8007152:	2600      	movs	r6, #0
 8007154:	341a      	adds	r4, #26
 8007156:	42b5      	cmp	r5, r6
 8007158:	d11a      	bne.n	8007190 <_printf_common+0xc8>
 800715a:	2000      	movs	r0, #0
 800715c:	e008      	b.n	8007170 <_printf_common+0xa8>
 800715e:	2301      	movs	r3, #1
 8007160:	4652      	mov	r2, sl
 8007162:	4649      	mov	r1, r9
 8007164:	4638      	mov	r0, r7
 8007166:	47c0      	blx	r8
 8007168:	3001      	adds	r0, #1
 800716a:	d103      	bne.n	8007174 <_printf_common+0xac>
 800716c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007174:	3501      	adds	r5, #1
 8007176:	e7c6      	b.n	8007106 <_printf_common+0x3e>
 8007178:	18e1      	adds	r1, r4, r3
 800717a:	1c5a      	adds	r2, r3, #1
 800717c:	2030      	movs	r0, #48	; 0x30
 800717e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007182:	4422      	add	r2, r4
 8007184:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007188:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800718c:	3302      	adds	r3, #2
 800718e:	e7c7      	b.n	8007120 <_printf_common+0x58>
 8007190:	2301      	movs	r3, #1
 8007192:	4622      	mov	r2, r4
 8007194:	4649      	mov	r1, r9
 8007196:	4638      	mov	r0, r7
 8007198:	47c0      	blx	r8
 800719a:	3001      	adds	r0, #1
 800719c:	d0e6      	beq.n	800716c <_printf_common+0xa4>
 800719e:	3601      	adds	r6, #1
 80071a0:	e7d9      	b.n	8007156 <_printf_common+0x8e>
	...

080071a4 <_printf_i>:
 80071a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071a8:	7e0f      	ldrb	r7, [r1, #24]
 80071aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071ac:	2f78      	cmp	r7, #120	; 0x78
 80071ae:	4691      	mov	r9, r2
 80071b0:	4680      	mov	r8, r0
 80071b2:	460c      	mov	r4, r1
 80071b4:	469a      	mov	sl, r3
 80071b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071ba:	d807      	bhi.n	80071cc <_printf_i+0x28>
 80071bc:	2f62      	cmp	r7, #98	; 0x62
 80071be:	d80a      	bhi.n	80071d6 <_printf_i+0x32>
 80071c0:	2f00      	cmp	r7, #0
 80071c2:	f000 80d4 	beq.w	800736e <_printf_i+0x1ca>
 80071c6:	2f58      	cmp	r7, #88	; 0x58
 80071c8:	f000 80c0 	beq.w	800734c <_printf_i+0x1a8>
 80071cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071d4:	e03a      	b.n	800724c <_printf_i+0xa8>
 80071d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071da:	2b15      	cmp	r3, #21
 80071dc:	d8f6      	bhi.n	80071cc <_printf_i+0x28>
 80071de:	a101      	add	r1, pc, #4	; (adr r1, 80071e4 <_printf_i+0x40>)
 80071e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071e4:	0800723d 	.word	0x0800723d
 80071e8:	08007251 	.word	0x08007251
 80071ec:	080071cd 	.word	0x080071cd
 80071f0:	080071cd 	.word	0x080071cd
 80071f4:	080071cd 	.word	0x080071cd
 80071f8:	080071cd 	.word	0x080071cd
 80071fc:	08007251 	.word	0x08007251
 8007200:	080071cd 	.word	0x080071cd
 8007204:	080071cd 	.word	0x080071cd
 8007208:	080071cd 	.word	0x080071cd
 800720c:	080071cd 	.word	0x080071cd
 8007210:	08007355 	.word	0x08007355
 8007214:	0800727d 	.word	0x0800727d
 8007218:	0800730f 	.word	0x0800730f
 800721c:	080071cd 	.word	0x080071cd
 8007220:	080071cd 	.word	0x080071cd
 8007224:	08007377 	.word	0x08007377
 8007228:	080071cd 	.word	0x080071cd
 800722c:	0800727d 	.word	0x0800727d
 8007230:	080071cd 	.word	0x080071cd
 8007234:	080071cd 	.word	0x080071cd
 8007238:	08007317 	.word	0x08007317
 800723c:	682b      	ldr	r3, [r5, #0]
 800723e:	1d1a      	adds	r2, r3, #4
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	602a      	str	r2, [r5, #0]
 8007244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007248:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800724c:	2301      	movs	r3, #1
 800724e:	e09f      	b.n	8007390 <_printf_i+0x1ec>
 8007250:	6820      	ldr	r0, [r4, #0]
 8007252:	682b      	ldr	r3, [r5, #0]
 8007254:	0607      	lsls	r7, r0, #24
 8007256:	f103 0104 	add.w	r1, r3, #4
 800725a:	6029      	str	r1, [r5, #0]
 800725c:	d501      	bpl.n	8007262 <_printf_i+0xbe>
 800725e:	681e      	ldr	r6, [r3, #0]
 8007260:	e003      	b.n	800726a <_printf_i+0xc6>
 8007262:	0646      	lsls	r6, r0, #25
 8007264:	d5fb      	bpl.n	800725e <_printf_i+0xba>
 8007266:	f9b3 6000 	ldrsh.w	r6, [r3]
 800726a:	2e00      	cmp	r6, #0
 800726c:	da03      	bge.n	8007276 <_printf_i+0xd2>
 800726e:	232d      	movs	r3, #45	; 0x2d
 8007270:	4276      	negs	r6, r6
 8007272:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007276:	485a      	ldr	r0, [pc, #360]	; (80073e0 <_printf_i+0x23c>)
 8007278:	230a      	movs	r3, #10
 800727a:	e012      	b.n	80072a2 <_printf_i+0xfe>
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	6820      	ldr	r0, [r4, #0]
 8007280:	1d19      	adds	r1, r3, #4
 8007282:	6029      	str	r1, [r5, #0]
 8007284:	0605      	lsls	r5, r0, #24
 8007286:	d501      	bpl.n	800728c <_printf_i+0xe8>
 8007288:	681e      	ldr	r6, [r3, #0]
 800728a:	e002      	b.n	8007292 <_printf_i+0xee>
 800728c:	0641      	lsls	r1, r0, #25
 800728e:	d5fb      	bpl.n	8007288 <_printf_i+0xe4>
 8007290:	881e      	ldrh	r6, [r3, #0]
 8007292:	4853      	ldr	r0, [pc, #332]	; (80073e0 <_printf_i+0x23c>)
 8007294:	2f6f      	cmp	r7, #111	; 0x6f
 8007296:	bf0c      	ite	eq
 8007298:	2308      	moveq	r3, #8
 800729a:	230a      	movne	r3, #10
 800729c:	2100      	movs	r1, #0
 800729e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072a2:	6865      	ldr	r5, [r4, #4]
 80072a4:	60a5      	str	r5, [r4, #8]
 80072a6:	2d00      	cmp	r5, #0
 80072a8:	bfa2      	ittt	ge
 80072aa:	6821      	ldrge	r1, [r4, #0]
 80072ac:	f021 0104 	bicge.w	r1, r1, #4
 80072b0:	6021      	strge	r1, [r4, #0]
 80072b2:	b90e      	cbnz	r6, 80072b8 <_printf_i+0x114>
 80072b4:	2d00      	cmp	r5, #0
 80072b6:	d04b      	beq.n	8007350 <_printf_i+0x1ac>
 80072b8:	4615      	mov	r5, r2
 80072ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80072be:	fb03 6711 	mls	r7, r3, r1, r6
 80072c2:	5dc7      	ldrb	r7, [r0, r7]
 80072c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072c8:	4637      	mov	r7, r6
 80072ca:	42bb      	cmp	r3, r7
 80072cc:	460e      	mov	r6, r1
 80072ce:	d9f4      	bls.n	80072ba <_printf_i+0x116>
 80072d0:	2b08      	cmp	r3, #8
 80072d2:	d10b      	bne.n	80072ec <_printf_i+0x148>
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	07de      	lsls	r6, r3, #31
 80072d8:	d508      	bpl.n	80072ec <_printf_i+0x148>
 80072da:	6923      	ldr	r3, [r4, #16]
 80072dc:	6861      	ldr	r1, [r4, #4]
 80072de:	4299      	cmp	r1, r3
 80072e0:	bfde      	ittt	le
 80072e2:	2330      	movle	r3, #48	; 0x30
 80072e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80072ec:	1b52      	subs	r2, r2, r5
 80072ee:	6122      	str	r2, [r4, #16]
 80072f0:	f8cd a000 	str.w	sl, [sp]
 80072f4:	464b      	mov	r3, r9
 80072f6:	aa03      	add	r2, sp, #12
 80072f8:	4621      	mov	r1, r4
 80072fa:	4640      	mov	r0, r8
 80072fc:	f7ff fee4 	bl	80070c8 <_printf_common>
 8007300:	3001      	adds	r0, #1
 8007302:	d14a      	bne.n	800739a <_printf_i+0x1f6>
 8007304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007308:	b004      	add	sp, #16
 800730a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800730e:	6823      	ldr	r3, [r4, #0]
 8007310:	f043 0320 	orr.w	r3, r3, #32
 8007314:	6023      	str	r3, [r4, #0]
 8007316:	4833      	ldr	r0, [pc, #204]	; (80073e4 <_printf_i+0x240>)
 8007318:	2778      	movs	r7, #120	; 0x78
 800731a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	6829      	ldr	r1, [r5, #0]
 8007322:	061f      	lsls	r7, r3, #24
 8007324:	f851 6b04 	ldr.w	r6, [r1], #4
 8007328:	d402      	bmi.n	8007330 <_printf_i+0x18c>
 800732a:	065f      	lsls	r7, r3, #25
 800732c:	bf48      	it	mi
 800732e:	b2b6      	uxthmi	r6, r6
 8007330:	07df      	lsls	r7, r3, #31
 8007332:	bf48      	it	mi
 8007334:	f043 0320 	orrmi.w	r3, r3, #32
 8007338:	6029      	str	r1, [r5, #0]
 800733a:	bf48      	it	mi
 800733c:	6023      	strmi	r3, [r4, #0]
 800733e:	b91e      	cbnz	r6, 8007348 <_printf_i+0x1a4>
 8007340:	6823      	ldr	r3, [r4, #0]
 8007342:	f023 0320 	bic.w	r3, r3, #32
 8007346:	6023      	str	r3, [r4, #0]
 8007348:	2310      	movs	r3, #16
 800734a:	e7a7      	b.n	800729c <_printf_i+0xf8>
 800734c:	4824      	ldr	r0, [pc, #144]	; (80073e0 <_printf_i+0x23c>)
 800734e:	e7e4      	b.n	800731a <_printf_i+0x176>
 8007350:	4615      	mov	r5, r2
 8007352:	e7bd      	b.n	80072d0 <_printf_i+0x12c>
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	6826      	ldr	r6, [r4, #0]
 8007358:	6961      	ldr	r1, [r4, #20]
 800735a:	1d18      	adds	r0, r3, #4
 800735c:	6028      	str	r0, [r5, #0]
 800735e:	0635      	lsls	r5, r6, #24
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	d501      	bpl.n	8007368 <_printf_i+0x1c4>
 8007364:	6019      	str	r1, [r3, #0]
 8007366:	e002      	b.n	800736e <_printf_i+0x1ca>
 8007368:	0670      	lsls	r0, r6, #25
 800736a:	d5fb      	bpl.n	8007364 <_printf_i+0x1c0>
 800736c:	8019      	strh	r1, [r3, #0]
 800736e:	2300      	movs	r3, #0
 8007370:	6123      	str	r3, [r4, #16]
 8007372:	4615      	mov	r5, r2
 8007374:	e7bc      	b.n	80072f0 <_printf_i+0x14c>
 8007376:	682b      	ldr	r3, [r5, #0]
 8007378:	1d1a      	adds	r2, r3, #4
 800737a:	602a      	str	r2, [r5, #0]
 800737c:	681d      	ldr	r5, [r3, #0]
 800737e:	6862      	ldr	r2, [r4, #4]
 8007380:	2100      	movs	r1, #0
 8007382:	4628      	mov	r0, r5
 8007384:	f7f8 ff24 	bl	80001d0 <memchr>
 8007388:	b108      	cbz	r0, 800738e <_printf_i+0x1ea>
 800738a:	1b40      	subs	r0, r0, r5
 800738c:	6060      	str	r0, [r4, #4]
 800738e:	6863      	ldr	r3, [r4, #4]
 8007390:	6123      	str	r3, [r4, #16]
 8007392:	2300      	movs	r3, #0
 8007394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007398:	e7aa      	b.n	80072f0 <_printf_i+0x14c>
 800739a:	6923      	ldr	r3, [r4, #16]
 800739c:	462a      	mov	r2, r5
 800739e:	4649      	mov	r1, r9
 80073a0:	4640      	mov	r0, r8
 80073a2:	47d0      	blx	sl
 80073a4:	3001      	adds	r0, #1
 80073a6:	d0ad      	beq.n	8007304 <_printf_i+0x160>
 80073a8:	6823      	ldr	r3, [r4, #0]
 80073aa:	079b      	lsls	r3, r3, #30
 80073ac:	d413      	bmi.n	80073d6 <_printf_i+0x232>
 80073ae:	68e0      	ldr	r0, [r4, #12]
 80073b0:	9b03      	ldr	r3, [sp, #12]
 80073b2:	4298      	cmp	r0, r3
 80073b4:	bfb8      	it	lt
 80073b6:	4618      	movlt	r0, r3
 80073b8:	e7a6      	b.n	8007308 <_printf_i+0x164>
 80073ba:	2301      	movs	r3, #1
 80073bc:	4632      	mov	r2, r6
 80073be:	4649      	mov	r1, r9
 80073c0:	4640      	mov	r0, r8
 80073c2:	47d0      	blx	sl
 80073c4:	3001      	adds	r0, #1
 80073c6:	d09d      	beq.n	8007304 <_printf_i+0x160>
 80073c8:	3501      	adds	r5, #1
 80073ca:	68e3      	ldr	r3, [r4, #12]
 80073cc:	9903      	ldr	r1, [sp, #12]
 80073ce:	1a5b      	subs	r3, r3, r1
 80073d0:	42ab      	cmp	r3, r5
 80073d2:	dcf2      	bgt.n	80073ba <_printf_i+0x216>
 80073d4:	e7eb      	b.n	80073ae <_printf_i+0x20a>
 80073d6:	2500      	movs	r5, #0
 80073d8:	f104 0619 	add.w	r6, r4, #25
 80073dc:	e7f5      	b.n	80073ca <_printf_i+0x226>
 80073de:	bf00      	nop
 80073e0:	08009926 	.word	0x08009926
 80073e4:	08009937 	.word	0x08009937

080073e8 <siprintf>:
 80073e8:	b40e      	push	{r1, r2, r3}
 80073ea:	b500      	push	{lr}
 80073ec:	b09c      	sub	sp, #112	; 0x70
 80073ee:	ab1d      	add	r3, sp, #116	; 0x74
 80073f0:	9002      	str	r0, [sp, #8]
 80073f2:	9006      	str	r0, [sp, #24]
 80073f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073f8:	4809      	ldr	r0, [pc, #36]	; (8007420 <siprintf+0x38>)
 80073fa:	9107      	str	r1, [sp, #28]
 80073fc:	9104      	str	r1, [sp, #16]
 80073fe:	4909      	ldr	r1, [pc, #36]	; (8007424 <siprintf+0x3c>)
 8007400:	f853 2b04 	ldr.w	r2, [r3], #4
 8007404:	9105      	str	r1, [sp, #20]
 8007406:	6800      	ldr	r0, [r0, #0]
 8007408:	9301      	str	r3, [sp, #4]
 800740a:	a902      	add	r1, sp, #8
 800740c:	f000 ffec 	bl	80083e8 <_svfiprintf_r>
 8007410:	9b02      	ldr	r3, [sp, #8]
 8007412:	2200      	movs	r2, #0
 8007414:	701a      	strb	r2, [r3, #0]
 8007416:	b01c      	add	sp, #112	; 0x70
 8007418:	f85d eb04 	ldr.w	lr, [sp], #4
 800741c:	b003      	add	sp, #12
 800741e:	4770      	bx	lr
 8007420:	20000078 	.word	0x20000078
 8007424:	ffff0208 	.word	0xffff0208

08007428 <std>:
 8007428:	2300      	movs	r3, #0
 800742a:	b510      	push	{r4, lr}
 800742c:	4604      	mov	r4, r0
 800742e:	e9c0 3300 	strd	r3, r3, [r0]
 8007432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007436:	6083      	str	r3, [r0, #8]
 8007438:	8181      	strh	r1, [r0, #12]
 800743a:	6643      	str	r3, [r0, #100]	; 0x64
 800743c:	81c2      	strh	r2, [r0, #14]
 800743e:	6183      	str	r3, [r0, #24]
 8007440:	4619      	mov	r1, r3
 8007442:	2208      	movs	r2, #8
 8007444:	305c      	adds	r0, #92	; 0x5c
 8007446:	f000 f8b1 	bl	80075ac <memset>
 800744a:	4b0d      	ldr	r3, [pc, #52]	; (8007480 <std+0x58>)
 800744c:	6263      	str	r3, [r4, #36]	; 0x24
 800744e:	4b0d      	ldr	r3, [pc, #52]	; (8007484 <std+0x5c>)
 8007450:	62a3      	str	r3, [r4, #40]	; 0x28
 8007452:	4b0d      	ldr	r3, [pc, #52]	; (8007488 <std+0x60>)
 8007454:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007456:	4b0d      	ldr	r3, [pc, #52]	; (800748c <std+0x64>)
 8007458:	6323      	str	r3, [r4, #48]	; 0x30
 800745a:	4b0d      	ldr	r3, [pc, #52]	; (8007490 <std+0x68>)
 800745c:	6224      	str	r4, [r4, #32]
 800745e:	429c      	cmp	r4, r3
 8007460:	d006      	beq.n	8007470 <std+0x48>
 8007462:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007466:	4294      	cmp	r4, r2
 8007468:	d002      	beq.n	8007470 <std+0x48>
 800746a:	33d0      	adds	r3, #208	; 0xd0
 800746c:	429c      	cmp	r4, r3
 800746e:	d105      	bne.n	800747c <std+0x54>
 8007470:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007478:	f000 b8ce 	b.w	8007618 <__retarget_lock_init_recursive>
 800747c:	bd10      	pop	{r4, pc}
 800747e:	bf00      	nop
 8007480:	08008fa1 	.word	0x08008fa1
 8007484:	08008fc3 	.word	0x08008fc3
 8007488:	08008ffb 	.word	0x08008ffb
 800748c:	0800901f 	.word	0x0800901f
 8007490:	20000a70 	.word	0x20000a70

08007494 <stdio_exit_handler>:
 8007494:	4a02      	ldr	r2, [pc, #8]	; (80074a0 <stdio_exit_handler+0xc>)
 8007496:	4903      	ldr	r1, [pc, #12]	; (80074a4 <stdio_exit_handler+0x10>)
 8007498:	4803      	ldr	r0, [pc, #12]	; (80074a8 <stdio_exit_handler+0x14>)
 800749a:	f000 b869 	b.w	8007570 <_fwalk_sglue>
 800749e:	bf00      	nop
 80074a0:	20000020 	.word	0x20000020
 80074a4:	08008841 	.word	0x08008841
 80074a8:	2000002c 	.word	0x2000002c

080074ac <cleanup_stdio>:
 80074ac:	6841      	ldr	r1, [r0, #4]
 80074ae:	4b0c      	ldr	r3, [pc, #48]	; (80074e0 <cleanup_stdio+0x34>)
 80074b0:	4299      	cmp	r1, r3
 80074b2:	b510      	push	{r4, lr}
 80074b4:	4604      	mov	r4, r0
 80074b6:	d001      	beq.n	80074bc <cleanup_stdio+0x10>
 80074b8:	f001 f9c2 	bl	8008840 <_fflush_r>
 80074bc:	68a1      	ldr	r1, [r4, #8]
 80074be:	4b09      	ldr	r3, [pc, #36]	; (80074e4 <cleanup_stdio+0x38>)
 80074c0:	4299      	cmp	r1, r3
 80074c2:	d002      	beq.n	80074ca <cleanup_stdio+0x1e>
 80074c4:	4620      	mov	r0, r4
 80074c6:	f001 f9bb 	bl	8008840 <_fflush_r>
 80074ca:	68e1      	ldr	r1, [r4, #12]
 80074cc:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <cleanup_stdio+0x3c>)
 80074ce:	4299      	cmp	r1, r3
 80074d0:	d004      	beq.n	80074dc <cleanup_stdio+0x30>
 80074d2:	4620      	mov	r0, r4
 80074d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074d8:	f001 b9b2 	b.w	8008840 <_fflush_r>
 80074dc:	bd10      	pop	{r4, pc}
 80074de:	bf00      	nop
 80074e0:	20000a70 	.word	0x20000a70
 80074e4:	20000ad8 	.word	0x20000ad8
 80074e8:	20000b40 	.word	0x20000b40

080074ec <global_stdio_init.part.0>:
 80074ec:	b510      	push	{r4, lr}
 80074ee:	4b0b      	ldr	r3, [pc, #44]	; (800751c <global_stdio_init.part.0+0x30>)
 80074f0:	4c0b      	ldr	r4, [pc, #44]	; (8007520 <global_stdio_init.part.0+0x34>)
 80074f2:	4a0c      	ldr	r2, [pc, #48]	; (8007524 <global_stdio_init.part.0+0x38>)
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	4620      	mov	r0, r4
 80074f8:	2200      	movs	r2, #0
 80074fa:	2104      	movs	r1, #4
 80074fc:	f7ff ff94 	bl	8007428 <std>
 8007500:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007504:	2201      	movs	r2, #1
 8007506:	2109      	movs	r1, #9
 8007508:	f7ff ff8e 	bl	8007428 <std>
 800750c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007510:	2202      	movs	r2, #2
 8007512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007516:	2112      	movs	r1, #18
 8007518:	f7ff bf86 	b.w	8007428 <std>
 800751c:	20000ba8 	.word	0x20000ba8
 8007520:	20000a70 	.word	0x20000a70
 8007524:	08007495 	.word	0x08007495

08007528 <__sfp_lock_acquire>:
 8007528:	4801      	ldr	r0, [pc, #4]	; (8007530 <__sfp_lock_acquire+0x8>)
 800752a:	f000 b876 	b.w	800761a <__retarget_lock_acquire_recursive>
 800752e:	bf00      	nop
 8007530:	20000bad 	.word	0x20000bad

08007534 <__sfp_lock_release>:
 8007534:	4801      	ldr	r0, [pc, #4]	; (800753c <__sfp_lock_release+0x8>)
 8007536:	f000 b871 	b.w	800761c <__retarget_lock_release_recursive>
 800753a:	bf00      	nop
 800753c:	20000bad 	.word	0x20000bad

08007540 <__sinit>:
 8007540:	b510      	push	{r4, lr}
 8007542:	4604      	mov	r4, r0
 8007544:	f7ff fff0 	bl	8007528 <__sfp_lock_acquire>
 8007548:	6a23      	ldr	r3, [r4, #32]
 800754a:	b11b      	cbz	r3, 8007554 <__sinit+0x14>
 800754c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007550:	f7ff bff0 	b.w	8007534 <__sfp_lock_release>
 8007554:	4b04      	ldr	r3, [pc, #16]	; (8007568 <__sinit+0x28>)
 8007556:	6223      	str	r3, [r4, #32]
 8007558:	4b04      	ldr	r3, [pc, #16]	; (800756c <__sinit+0x2c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1f5      	bne.n	800754c <__sinit+0xc>
 8007560:	f7ff ffc4 	bl	80074ec <global_stdio_init.part.0>
 8007564:	e7f2      	b.n	800754c <__sinit+0xc>
 8007566:	bf00      	nop
 8007568:	080074ad 	.word	0x080074ad
 800756c:	20000ba8 	.word	0x20000ba8

08007570 <_fwalk_sglue>:
 8007570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007574:	4607      	mov	r7, r0
 8007576:	4688      	mov	r8, r1
 8007578:	4614      	mov	r4, r2
 800757a:	2600      	movs	r6, #0
 800757c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007580:	f1b9 0901 	subs.w	r9, r9, #1
 8007584:	d505      	bpl.n	8007592 <_fwalk_sglue+0x22>
 8007586:	6824      	ldr	r4, [r4, #0]
 8007588:	2c00      	cmp	r4, #0
 800758a:	d1f7      	bne.n	800757c <_fwalk_sglue+0xc>
 800758c:	4630      	mov	r0, r6
 800758e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007592:	89ab      	ldrh	r3, [r5, #12]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d907      	bls.n	80075a8 <_fwalk_sglue+0x38>
 8007598:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800759c:	3301      	adds	r3, #1
 800759e:	d003      	beq.n	80075a8 <_fwalk_sglue+0x38>
 80075a0:	4629      	mov	r1, r5
 80075a2:	4638      	mov	r0, r7
 80075a4:	47c0      	blx	r8
 80075a6:	4306      	orrs	r6, r0
 80075a8:	3568      	adds	r5, #104	; 0x68
 80075aa:	e7e9      	b.n	8007580 <_fwalk_sglue+0x10>

080075ac <memset>:
 80075ac:	4402      	add	r2, r0
 80075ae:	4603      	mov	r3, r0
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d100      	bne.n	80075b6 <memset+0xa>
 80075b4:	4770      	bx	lr
 80075b6:	f803 1b01 	strb.w	r1, [r3], #1
 80075ba:	e7f9      	b.n	80075b0 <memset+0x4>

080075bc <_localeconv_r>:
 80075bc:	4800      	ldr	r0, [pc, #0]	; (80075c0 <_localeconv_r+0x4>)
 80075be:	4770      	bx	lr
 80075c0:	2000016c 	.word	0x2000016c

080075c4 <__errno>:
 80075c4:	4b01      	ldr	r3, [pc, #4]	; (80075cc <__errno+0x8>)
 80075c6:	6818      	ldr	r0, [r3, #0]
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	20000078 	.word	0x20000078

080075d0 <__libc_init_array>:
 80075d0:	b570      	push	{r4, r5, r6, lr}
 80075d2:	4d0d      	ldr	r5, [pc, #52]	; (8007608 <__libc_init_array+0x38>)
 80075d4:	4c0d      	ldr	r4, [pc, #52]	; (800760c <__libc_init_array+0x3c>)
 80075d6:	1b64      	subs	r4, r4, r5
 80075d8:	10a4      	asrs	r4, r4, #2
 80075da:	2600      	movs	r6, #0
 80075dc:	42a6      	cmp	r6, r4
 80075de:	d109      	bne.n	80075f4 <__libc_init_array+0x24>
 80075e0:	4d0b      	ldr	r5, [pc, #44]	; (8007610 <__libc_init_array+0x40>)
 80075e2:	4c0c      	ldr	r4, [pc, #48]	; (8007614 <__libc_init_array+0x44>)
 80075e4:	f002 f920 	bl	8009828 <_init>
 80075e8:	1b64      	subs	r4, r4, r5
 80075ea:	10a4      	asrs	r4, r4, #2
 80075ec:	2600      	movs	r6, #0
 80075ee:	42a6      	cmp	r6, r4
 80075f0:	d105      	bne.n	80075fe <__libc_init_array+0x2e>
 80075f2:	bd70      	pop	{r4, r5, r6, pc}
 80075f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80075f8:	4798      	blx	r3
 80075fa:	3601      	adds	r6, #1
 80075fc:	e7ee      	b.n	80075dc <__libc_init_array+0xc>
 80075fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007602:	4798      	blx	r3
 8007604:	3601      	adds	r6, #1
 8007606:	e7f2      	b.n	80075ee <__libc_init_array+0x1e>
 8007608:	08009c8c 	.word	0x08009c8c
 800760c:	08009c8c 	.word	0x08009c8c
 8007610:	08009c8c 	.word	0x08009c8c
 8007614:	08009c90 	.word	0x08009c90

08007618 <__retarget_lock_init_recursive>:
 8007618:	4770      	bx	lr

0800761a <__retarget_lock_acquire_recursive>:
 800761a:	4770      	bx	lr

0800761c <__retarget_lock_release_recursive>:
 800761c:	4770      	bx	lr

0800761e <memcpy>:
 800761e:	440a      	add	r2, r1
 8007620:	4291      	cmp	r1, r2
 8007622:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007626:	d100      	bne.n	800762a <memcpy+0xc>
 8007628:	4770      	bx	lr
 800762a:	b510      	push	{r4, lr}
 800762c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007630:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007634:	4291      	cmp	r1, r2
 8007636:	d1f9      	bne.n	800762c <memcpy+0xe>
 8007638:	bd10      	pop	{r4, pc}

0800763a <quorem>:
 800763a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763e:	6903      	ldr	r3, [r0, #16]
 8007640:	690c      	ldr	r4, [r1, #16]
 8007642:	42a3      	cmp	r3, r4
 8007644:	4607      	mov	r7, r0
 8007646:	db7e      	blt.n	8007746 <quorem+0x10c>
 8007648:	3c01      	subs	r4, #1
 800764a:	f101 0814 	add.w	r8, r1, #20
 800764e:	f100 0514 	add.w	r5, r0, #20
 8007652:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007656:	9301      	str	r3, [sp, #4]
 8007658:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800765c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007660:	3301      	adds	r3, #1
 8007662:	429a      	cmp	r2, r3
 8007664:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007668:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800766c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007670:	d331      	bcc.n	80076d6 <quorem+0x9c>
 8007672:	f04f 0e00 	mov.w	lr, #0
 8007676:	4640      	mov	r0, r8
 8007678:	46ac      	mov	ip, r5
 800767a:	46f2      	mov	sl, lr
 800767c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007680:	b293      	uxth	r3, r2
 8007682:	fb06 e303 	mla	r3, r6, r3, lr
 8007686:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800768a:	0c1a      	lsrs	r2, r3, #16
 800768c:	b29b      	uxth	r3, r3
 800768e:	ebaa 0303 	sub.w	r3, sl, r3
 8007692:	f8dc a000 	ldr.w	sl, [ip]
 8007696:	fa13 f38a 	uxtah	r3, r3, sl
 800769a:	fb06 220e 	mla	r2, r6, lr, r2
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	9b00      	ldr	r3, [sp, #0]
 80076a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076a6:	b292      	uxth	r2, r2
 80076a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80076ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80076b4:	4581      	cmp	r9, r0
 80076b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076ba:	f84c 3b04 	str.w	r3, [ip], #4
 80076be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076c2:	d2db      	bcs.n	800767c <quorem+0x42>
 80076c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80076c8:	b92b      	cbnz	r3, 80076d6 <quorem+0x9c>
 80076ca:	9b01      	ldr	r3, [sp, #4]
 80076cc:	3b04      	subs	r3, #4
 80076ce:	429d      	cmp	r5, r3
 80076d0:	461a      	mov	r2, r3
 80076d2:	d32c      	bcc.n	800772e <quorem+0xf4>
 80076d4:	613c      	str	r4, [r7, #16]
 80076d6:	4638      	mov	r0, r7
 80076d8:	f001 fb62 	bl	8008da0 <__mcmp>
 80076dc:	2800      	cmp	r0, #0
 80076de:	db22      	blt.n	8007726 <quorem+0xec>
 80076e0:	3601      	adds	r6, #1
 80076e2:	4629      	mov	r1, r5
 80076e4:	2000      	movs	r0, #0
 80076e6:	f858 2b04 	ldr.w	r2, [r8], #4
 80076ea:	f8d1 c000 	ldr.w	ip, [r1]
 80076ee:	b293      	uxth	r3, r2
 80076f0:	1ac3      	subs	r3, r0, r3
 80076f2:	0c12      	lsrs	r2, r2, #16
 80076f4:	fa13 f38c 	uxtah	r3, r3, ip
 80076f8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80076fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007700:	b29b      	uxth	r3, r3
 8007702:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007706:	45c1      	cmp	r9, r8
 8007708:	f841 3b04 	str.w	r3, [r1], #4
 800770c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007710:	d2e9      	bcs.n	80076e6 <quorem+0xac>
 8007712:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007716:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800771a:	b922      	cbnz	r2, 8007726 <quorem+0xec>
 800771c:	3b04      	subs	r3, #4
 800771e:	429d      	cmp	r5, r3
 8007720:	461a      	mov	r2, r3
 8007722:	d30a      	bcc.n	800773a <quorem+0x100>
 8007724:	613c      	str	r4, [r7, #16]
 8007726:	4630      	mov	r0, r6
 8007728:	b003      	add	sp, #12
 800772a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800772e:	6812      	ldr	r2, [r2, #0]
 8007730:	3b04      	subs	r3, #4
 8007732:	2a00      	cmp	r2, #0
 8007734:	d1ce      	bne.n	80076d4 <quorem+0x9a>
 8007736:	3c01      	subs	r4, #1
 8007738:	e7c9      	b.n	80076ce <quorem+0x94>
 800773a:	6812      	ldr	r2, [r2, #0]
 800773c:	3b04      	subs	r3, #4
 800773e:	2a00      	cmp	r2, #0
 8007740:	d1f0      	bne.n	8007724 <quorem+0xea>
 8007742:	3c01      	subs	r4, #1
 8007744:	e7eb      	b.n	800771e <quorem+0xe4>
 8007746:	2000      	movs	r0, #0
 8007748:	e7ee      	b.n	8007728 <quorem+0xee>
 800774a:	0000      	movs	r0, r0
 800774c:	0000      	movs	r0, r0
	...

08007750 <_dtoa_r>:
 8007750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007754:	ed2d 8b04 	vpush	{d8-d9}
 8007758:	69c5      	ldr	r5, [r0, #28]
 800775a:	b093      	sub	sp, #76	; 0x4c
 800775c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007760:	ec57 6b10 	vmov	r6, r7, d0
 8007764:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007768:	9107      	str	r1, [sp, #28]
 800776a:	4604      	mov	r4, r0
 800776c:	920a      	str	r2, [sp, #40]	; 0x28
 800776e:	930d      	str	r3, [sp, #52]	; 0x34
 8007770:	b975      	cbnz	r5, 8007790 <_dtoa_r+0x40>
 8007772:	2010      	movs	r0, #16
 8007774:	f000 ff36 	bl	80085e4 <malloc>
 8007778:	4602      	mov	r2, r0
 800777a:	61e0      	str	r0, [r4, #28]
 800777c:	b920      	cbnz	r0, 8007788 <_dtoa_r+0x38>
 800777e:	4bae      	ldr	r3, [pc, #696]	; (8007a38 <_dtoa_r+0x2e8>)
 8007780:	21ef      	movs	r1, #239	; 0xef
 8007782:	48ae      	ldr	r0, [pc, #696]	; (8007a3c <_dtoa_r+0x2ec>)
 8007784:	f001 fcee 	bl	8009164 <__assert_func>
 8007788:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800778c:	6005      	str	r5, [r0, #0]
 800778e:	60c5      	str	r5, [r0, #12]
 8007790:	69e3      	ldr	r3, [r4, #28]
 8007792:	6819      	ldr	r1, [r3, #0]
 8007794:	b151      	cbz	r1, 80077ac <_dtoa_r+0x5c>
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	604a      	str	r2, [r1, #4]
 800779a:	2301      	movs	r3, #1
 800779c:	4093      	lsls	r3, r2
 800779e:	608b      	str	r3, [r1, #8]
 80077a0:	4620      	mov	r0, r4
 80077a2:	f001 f8c1 	bl	8008928 <_Bfree>
 80077a6:	69e3      	ldr	r3, [r4, #28]
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	1e3b      	subs	r3, r7, #0
 80077ae:	bfbb      	ittet	lt
 80077b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80077b4:	9303      	strlt	r3, [sp, #12]
 80077b6:	2300      	movge	r3, #0
 80077b8:	2201      	movlt	r2, #1
 80077ba:	bfac      	ite	ge
 80077bc:	f8c8 3000 	strge.w	r3, [r8]
 80077c0:	f8c8 2000 	strlt.w	r2, [r8]
 80077c4:	4b9e      	ldr	r3, [pc, #632]	; (8007a40 <_dtoa_r+0x2f0>)
 80077c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80077ca:	ea33 0308 	bics.w	r3, r3, r8
 80077ce:	d11b      	bne.n	8007808 <_dtoa_r+0xb8>
 80077d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80077d6:	6013      	str	r3, [r2, #0]
 80077d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80077dc:	4333      	orrs	r3, r6
 80077de:	f000 8593 	beq.w	8008308 <_dtoa_r+0xbb8>
 80077e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077e4:	b963      	cbnz	r3, 8007800 <_dtoa_r+0xb0>
 80077e6:	4b97      	ldr	r3, [pc, #604]	; (8007a44 <_dtoa_r+0x2f4>)
 80077e8:	e027      	b.n	800783a <_dtoa_r+0xea>
 80077ea:	4b97      	ldr	r3, [pc, #604]	; (8007a48 <_dtoa_r+0x2f8>)
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	3308      	adds	r3, #8
 80077f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077f2:	6013      	str	r3, [r2, #0]
 80077f4:	9800      	ldr	r0, [sp, #0]
 80077f6:	b013      	add	sp, #76	; 0x4c
 80077f8:	ecbd 8b04 	vpop	{d8-d9}
 80077fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007800:	4b90      	ldr	r3, [pc, #576]	; (8007a44 <_dtoa_r+0x2f4>)
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	3303      	adds	r3, #3
 8007806:	e7f3      	b.n	80077f0 <_dtoa_r+0xa0>
 8007808:	ed9d 7b02 	vldr	d7, [sp, #8]
 800780c:	2200      	movs	r2, #0
 800780e:	ec51 0b17 	vmov	r0, r1, d7
 8007812:	eeb0 8a47 	vmov.f32	s16, s14
 8007816:	eef0 8a67 	vmov.f32	s17, s15
 800781a:	2300      	movs	r3, #0
 800781c:	f7f9 f954 	bl	8000ac8 <__aeabi_dcmpeq>
 8007820:	4681      	mov	r9, r0
 8007822:	b160      	cbz	r0, 800783e <_dtoa_r+0xee>
 8007824:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007826:	2301      	movs	r3, #1
 8007828:	6013      	str	r3, [r2, #0]
 800782a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 8568 	beq.w	8008302 <_dtoa_r+0xbb2>
 8007832:	4b86      	ldr	r3, [pc, #536]	; (8007a4c <_dtoa_r+0x2fc>)
 8007834:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007836:	6013      	str	r3, [r2, #0]
 8007838:	3b01      	subs	r3, #1
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	e7da      	b.n	80077f4 <_dtoa_r+0xa4>
 800783e:	aa10      	add	r2, sp, #64	; 0x40
 8007840:	a911      	add	r1, sp, #68	; 0x44
 8007842:	4620      	mov	r0, r4
 8007844:	eeb0 0a48 	vmov.f32	s0, s16
 8007848:	eef0 0a68 	vmov.f32	s1, s17
 800784c:	f001 fb4e 	bl	8008eec <__d2b>
 8007850:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007854:	4682      	mov	sl, r0
 8007856:	2d00      	cmp	r5, #0
 8007858:	d07f      	beq.n	800795a <_dtoa_r+0x20a>
 800785a:	ee18 3a90 	vmov	r3, s17
 800785e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007862:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007866:	ec51 0b18 	vmov	r0, r1, d8
 800786a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800786e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007872:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007876:	4619      	mov	r1, r3
 8007878:	2200      	movs	r2, #0
 800787a:	4b75      	ldr	r3, [pc, #468]	; (8007a50 <_dtoa_r+0x300>)
 800787c:	f7f8 fd04 	bl	8000288 <__aeabi_dsub>
 8007880:	a367      	add	r3, pc, #412	; (adr r3, 8007a20 <_dtoa_r+0x2d0>)
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	f7f8 feb7 	bl	80005f8 <__aeabi_dmul>
 800788a:	a367      	add	r3, pc, #412	; (adr r3, 8007a28 <_dtoa_r+0x2d8>)
 800788c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007890:	f7f8 fcfc 	bl	800028c <__adddf3>
 8007894:	4606      	mov	r6, r0
 8007896:	4628      	mov	r0, r5
 8007898:	460f      	mov	r7, r1
 800789a:	f7f8 fe43 	bl	8000524 <__aeabi_i2d>
 800789e:	a364      	add	r3, pc, #400	; (adr r3, 8007a30 <_dtoa_r+0x2e0>)
 80078a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a4:	f7f8 fea8 	bl	80005f8 <__aeabi_dmul>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4630      	mov	r0, r6
 80078ae:	4639      	mov	r1, r7
 80078b0:	f7f8 fcec 	bl	800028c <__adddf3>
 80078b4:	4606      	mov	r6, r0
 80078b6:	460f      	mov	r7, r1
 80078b8:	f7f9 f94e 	bl	8000b58 <__aeabi_d2iz>
 80078bc:	2200      	movs	r2, #0
 80078be:	4683      	mov	fp, r0
 80078c0:	2300      	movs	r3, #0
 80078c2:	4630      	mov	r0, r6
 80078c4:	4639      	mov	r1, r7
 80078c6:	f7f9 f909 	bl	8000adc <__aeabi_dcmplt>
 80078ca:	b148      	cbz	r0, 80078e0 <_dtoa_r+0x190>
 80078cc:	4658      	mov	r0, fp
 80078ce:	f7f8 fe29 	bl	8000524 <__aeabi_i2d>
 80078d2:	4632      	mov	r2, r6
 80078d4:	463b      	mov	r3, r7
 80078d6:	f7f9 f8f7 	bl	8000ac8 <__aeabi_dcmpeq>
 80078da:	b908      	cbnz	r0, 80078e0 <_dtoa_r+0x190>
 80078dc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80078e0:	f1bb 0f16 	cmp.w	fp, #22
 80078e4:	d857      	bhi.n	8007996 <_dtoa_r+0x246>
 80078e6:	4b5b      	ldr	r3, [pc, #364]	; (8007a54 <_dtoa_r+0x304>)
 80078e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80078ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f0:	ec51 0b18 	vmov	r0, r1, d8
 80078f4:	f7f9 f8f2 	bl	8000adc <__aeabi_dcmplt>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d04e      	beq.n	800799a <_dtoa_r+0x24a>
 80078fc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007900:	2300      	movs	r3, #0
 8007902:	930c      	str	r3, [sp, #48]	; 0x30
 8007904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007906:	1b5b      	subs	r3, r3, r5
 8007908:	1e5a      	subs	r2, r3, #1
 800790a:	bf45      	ittet	mi
 800790c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007910:	9305      	strmi	r3, [sp, #20]
 8007912:	2300      	movpl	r3, #0
 8007914:	2300      	movmi	r3, #0
 8007916:	9206      	str	r2, [sp, #24]
 8007918:	bf54      	ite	pl
 800791a:	9305      	strpl	r3, [sp, #20]
 800791c:	9306      	strmi	r3, [sp, #24]
 800791e:	f1bb 0f00 	cmp.w	fp, #0
 8007922:	db3c      	blt.n	800799e <_dtoa_r+0x24e>
 8007924:	9b06      	ldr	r3, [sp, #24]
 8007926:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800792a:	445b      	add	r3, fp
 800792c:	9306      	str	r3, [sp, #24]
 800792e:	2300      	movs	r3, #0
 8007930:	9308      	str	r3, [sp, #32]
 8007932:	9b07      	ldr	r3, [sp, #28]
 8007934:	2b09      	cmp	r3, #9
 8007936:	d868      	bhi.n	8007a0a <_dtoa_r+0x2ba>
 8007938:	2b05      	cmp	r3, #5
 800793a:	bfc4      	itt	gt
 800793c:	3b04      	subgt	r3, #4
 800793e:	9307      	strgt	r3, [sp, #28]
 8007940:	9b07      	ldr	r3, [sp, #28]
 8007942:	f1a3 0302 	sub.w	r3, r3, #2
 8007946:	bfcc      	ite	gt
 8007948:	2500      	movgt	r5, #0
 800794a:	2501      	movle	r5, #1
 800794c:	2b03      	cmp	r3, #3
 800794e:	f200 8085 	bhi.w	8007a5c <_dtoa_r+0x30c>
 8007952:	e8df f003 	tbb	[pc, r3]
 8007956:	3b2e      	.short	0x3b2e
 8007958:	5839      	.short	0x5839
 800795a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800795e:	441d      	add	r5, r3
 8007960:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007964:	2b20      	cmp	r3, #32
 8007966:	bfc1      	itttt	gt
 8007968:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800796c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007970:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007974:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007978:	bfd6      	itet	le
 800797a:	f1c3 0320 	rsble	r3, r3, #32
 800797e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007982:	fa06 f003 	lslle.w	r0, r6, r3
 8007986:	f7f8 fdbd 	bl	8000504 <__aeabi_ui2d>
 800798a:	2201      	movs	r2, #1
 800798c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007990:	3d01      	subs	r5, #1
 8007992:	920e      	str	r2, [sp, #56]	; 0x38
 8007994:	e76f      	b.n	8007876 <_dtoa_r+0x126>
 8007996:	2301      	movs	r3, #1
 8007998:	e7b3      	b.n	8007902 <_dtoa_r+0x1b2>
 800799a:	900c      	str	r0, [sp, #48]	; 0x30
 800799c:	e7b2      	b.n	8007904 <_dtoa_r+0x1b4>
 800799e:	9b05      	ldr	r3, [sp, #20]
 80079a0:	eba3 030b 	sub.w	r3, r3, fp
 80079a4:	9305      	str	r3, [sp, #20]
 80079a6:	f1cb 0300 	rsb	r3, fp, #0
 80079aa:	9308      	str	r3, [sp, #32]
 80079ac:	2300      	movs	r3, #0
 80079ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80079b0:	e7bf      	b.n	8007932 <_dtoa_r+0x1e2>
 80079b2:	2300      	movs	r3, #0
 80079b4:	9309      	str	r3, [sp, #36]	; 0x24
 80079b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	dc52      	bgt.n	8007a62 <_dtoa_r+0x312>
 80079bc:	2301      	movs	r3, #1
 80079be:	9301      	str	r3, [sp, #4]
 80079c0:	9304      	str	r3, [sp, #16]
 80079c2:	461a      	mov	r2, r3
 80079c4:	920a      	str	r2, [sp, #40]	; 0x28
 80079c6:	e00b      	b.n	80079e0 <_dtoa_r+0x290>
 80079c8:	2301      	movs	r3, #1
 80079ca:	e7f3      	b.n	80079b4 <_dtoa_r+0x264>
 80079cc:	2300      	movs	r3, #0
 80079ce:	9309      	str	r3, [sp, #36]	; 0x24
 80079d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079d2:	445b      	add	r3, fp
 80079d4:	9301      	str	r3, [sp, #4]
 80079d6:	3301      	adds	r3, #1
 80079d8:	2b01      	cmp	r3, #1
 80079da:	9304      	str	r3, [sp, #16]
 80079dc:	bfb8      	it	lt
 80079de:	2301      	movlt	r3, #1
 80079e0:	69e0      	ldr	r0, [r4, #28]
 80079e2:	2100      	movs	r1, #0
 80079e4:	2204      	movs	r2, #4
 80079e6:	f102 0614 	add.w	r6, r2, #20
 80079ea:	429e      	cmp	r6, r3
 80079ec:	d93d      	bls.n	8007a6a <_dtoa_r+0x31a>
 80079ee:	6041      	str	r1, [r0, #4]
 80079f0:	4620      	mov	r0, r4
 80079f2:	f000 ff59 	bl	80088a8 <_Balloc>
 80079f6:	9000      	str	r0, [sp, #0]
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d139      	bne.n	8007a70 <_dtoa_r+0x320>
 80079fc:	4b16      	ldr	r3, [pc, #88]	; (8007a58 <_dtoa_r+0x308>)
 80079fe:	4602      	mov	r2, r0
 8007a00:	f240 11af 	movw	r1, #431	; 0x1af
 8007a04:	e6bd      	b.n	8007782 <_dtoa_r+0x32>
 8007a06:	2301      	movs	r3, #1
 8007a08:	e7e1      	b.n	80079ce <_dtoa_r+0x27e>
 8007a0a:	2501      	movs	r5, #1
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	9307      	str	r3, [sp, #28]
 8007a10:	9509      	str	r5, [sp, #36]	; 0x24
 8007a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a16:	9301      	str	r3, [sp, #4]
 8007a18:	9304      	str	r3, [sp, #16]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	2312      	movs	r3, #18
 8007a1e:	e7d1      	b.n	80079c4 <_dtoa_r+0x274>
 8007a20:	636f4361 	.word	0x636f4361
 8007a24:	3fd287a7 	.word	0x3fd287a7
 8007a28:	8b60c8b3 	.word	0x8b60c8b3
 8007a2c:	3fc68a28 	.word	0x3fc68a28
 8007a30:	509f79fb 	.word	0x509f79fb
 8007a34:	3fd34413 	.word	0x3fd34413
 8007a38:	08009955 	.word	0x08009955
 8007a3c:	0800996c 	.word	0x0800996c
 8007a40:	7ff00000 	.word	0x7ff00000
 8007a44:	08009951 	.word	0x08009951
 8007a48:	08009948 	.word	0x08009948
 8007a4c:	08009925 	.word	0x08009925
 8007a50:	3ff80000 	.word	0x3ff80000
 8007a54:	08009a68 	.word	0x08009a68
 8007a58:	080099c4 	.word	0x080099c4
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a60:	e7d7      	b.n	8007a12 <_dtoa_r+0x2c2>
 8007a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a64:	9301      	str	r3, [sp, #4]
 8007a66:	9304      	str	r3, [sp, #16]
 8007a68:	e7ba      	b.n	80079e0 <_dtoa_r+0x290>
 8007a6a:	3101      	adds	r1, #1
 8007a6c:	0052      	lsls	r2, r2, #1
 8007a6e:	e7ba      	b.n	80079e6 <_dtoa_r+0x296>
 8007a70:	69e3      	ldr	r3, [r4, #28]
 8007a72:	9a00      	ldr	r2, [sp, #0]
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	9b04      	ldr	r3, [sp, #16]
 8007a78:	2b0e      	cmp	r3, #14
 8007a7a:	f200 80a8 	bhi.w	8007bce <_dtoa_r+0x47e>
 8007a7e:	2d00      	cmp	r5, #0
 8007a80:	f000 80a5 	beq.w	8007bce <_dtoa_r+0x47e>
 8007a84:	f1bb 0f00 	cmp.w	fp, #0
 8007a88:	dd38      	ble.n	8007afc <_dtoa_r+0x3ac>
 8007a8a:	4bc0      	ldr	r3, [pc, #768]	; (8007d8c <_dtoa_r+0x63c>)
 8007a8c:	f00b 020f 	and.w	r2, fp, #15
 8007a90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007a98:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007a9c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007aa0:	d019      	beq.n	8007ad6 <_dtoa_r+0x386>
 8007aa2:	4bbb      	ldr	r3, [pc, #748]	; (8007d90 <_dtoa_r+0x640>)
 8007aa4:	ec51 0b18 	vmov	r0, r1, d8
 8007aa8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007aac:	f7f8 fece 	bl	800084c <__aeabi_ddiv>
 8007ab0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ab4:	f008 080f 	and.w	r8, r8, #15
 8007ab8:	2503      	movs	r5, #3
 8007aba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007d90 <_dtoa_r+0x640>
 8007abe:	f1b8 0f00 	cmp.w	r8, #0
 8007ac2:	d10a      	bne.n	8007ada <_dtoa_r+0x38a>
 8007ac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ac8:	4632      	mov	r2, r6
 8007aca:	463b      	mov	r3, r7
 8007acc:	f7f8 febe 	bl	800084c <__aeabi_ddiv>
 8007ad0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ad4:	e02b      	b.n	8007b2e <_dtoa_r+0x3de>
 8007ad6:	2502      	movs	r5, #2
 8007ad8:	e7ef      	b.n	8007aba <_dtoa_r+0x36a>
 8007ada:	f018 0f01 	tst.w	r8, #1
 8007ade:	d008      	beq.n	8007af2 <_dtoa_r+0x3a2>
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	4639      	mov	r1, r7
 8007ae4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007ae8:	f7f8 fd86 	bl	80005f8 <__aeabi_dmul>
 8007aec:	3501      	adds	r5, #1
 8007aee:	4606      	mov	r6, r0
 8007af0:	460f      	mov	r7, r1
 8007af2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007af6:	f109 0908 	add.w	r9, r9, #8
 8007afa:	e7e0      	b.n	8007abe <_dtoa_r+0x36e>
 8007afc:	f000 809f 	beq.w	8007c3e <_dtoa_r+0x4ee>
 8007b00:	f1cb 0600 	rsb	r6, fp, #0
 8007b04:	4ba1      	ldr	r3, [pc, #644]	; (8007d8c <_dtoa_r+0x63c>)
 8007b06:	4fa2      	ldr	r7, [pc, #648]	; (8007d90 <_dtoa_r+0x640>)
 8007b08:	f006 020f 	and.w	r2, r6, #15
 8007b0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b14:	ec51 0b18 	vmov	r0, r1, d8
 8007b18:	f7f8 fd6e 	bl	80005f8 <__aeabi_dmul>
 8007b1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b20:	1136      	asrs	r6, r6, #4
 8007b22:	2300      	movs	r3, #0
 8007b24:	2502      	movs	r5, #2
 8007b26:	2e00      	cmp	r6, #0
 8007b28:	d17e      	bne.n	8007c28 <_dtoa_r+0x4d8>
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1d0      	bne.n	8007ad0 <_dtoa_r+0x380>
 8007b2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b30:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 8084 	beq.w	8007c42 <_dtoa_r+0x4f2>
 8007b3a:	4b96      	ldr	r3, [pc, #600]	; (8007d94 <_dtoa_r+0x644>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	4640      	mov	r0, r8
 8007b40:	4649      	mov	r1, r9
 8007b42:	f7f8 ffcb 	bl	8000adc <__aeabi_dcmplt>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d07b      	beq.n	8007c42 <_dtoa_r+0x4f2>
 8007b4a:	9b04      	ldr	r3, [sp, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d078      	beq.n	8007c42 <_dtoa_r+0x4f2>
 8007b50:	9b01      	ldr	r3, [sp, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	dd39      	ble.n	8007bca <_dtoa_r+0x47a>
 8007b56:	4b90      	ldr	r3, [pc, #576]	; (8007d98 <_dtoa_r+0x648>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	4640      	mov	r0, r8
 8007b5c:	4649      	mov	r1, r9
 8007b5e:	f7f8 fd4b 	bl	80005f8 <__aeabi_dmul>
 8007b62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b66:	9e01      	ldr	r6, [sp, #4]
 8007b68:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8007b6c:	3501      	adds	r5, #1
 8007b6e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b72:	4628      	mov	r0, r5
 8007b74:	f7f8 fcd6 	bl	8000524 <__aeabi_i2d>
 8007b78:	4642      	mov	r2, r8
 8007b7a:	464b      	mov	r3, r9
 8007b7c:	f7f8 fd3c 	bl	80005f8 <__aeabi_dmul>
 8007b80:	4b86      	ldr	r3, [pc, #536]	; (8007d9c <_dtoa_r+0x64c>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	f7f8 fb82 	bl	800028c <__adddf3>
 8007b88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b90:	9303      	str	r3, [sp, #12]
 8007b92:	2e00      	cmp	r6, #0
 8007b94:	d158      	bne.n	8007c48 <_dtoa_r+0x4f8>
 8007b96:	4b82      	ldr	r3, [pc, #520]	; (8007da0 <_dtoa_r+0x650>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	4640      	mov	r0, r8
 8007b9c:	4649      	mov	r1, r9
 8007b9e:	f7f8 fb73 	bl	8000288 <__aeabi_dsub>
 8007ba2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ba6:	4680      	mov	r8, r0
 8007ba8:	4689      	mov	r9, r1
 8007baa:	f7f8 ffb5 	bl	8000b18 <__aeabi_dcmpgt>
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	f040 8296 	bne.w	80080e0 <_dtoa_r+0x990>
 8007bb4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007bb8:	4640      	mov	r0, r8
 8007bba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bbe:	4649      	mov	r1, r9
 8007bc0:	f7f8 ff8c 	bl	8000adc <__aeabi_dcmplt>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	f040 8289 	bne.w	80080dc <_dtoa_r+0x98c>
 8007bca:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007bce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f2c0 814e 	blt.w	8007e72 <_dtoa_r+0x722>
 8007bd6:	f1bb 0f0e 	cmp.w	fp, #14
 8007bda:	f300 814a 	bgt.w	8007e72 <_dtoa_r+0x722>
 8007bde:	4b6b      	ldr	r3, [pc, #428]	; (8007d8c <_dtoa_r+0x63c>)
 8007be0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007be4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f280 80dc 	bge.w	8007da8 <_dtoa_r+0x658>
 8007bf0:	9b04      	ldr	r3, [sp, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f300 80d8 	bgt.w	8007da8 <_dtoa_r+0x658>
 8007bf8:	f040 826f 	bne.w	80080da <_dtoa_r+0x98a>
 8007bfc:	4b68      	ldr	r3, [pc, #416]	; (8007da0 <_dtoa_r+0x650>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	4640      	mov	r0, r8
 8007c02:	4649      	mov	r1, r9
 8007c04:	f7f8 fcf8 	bl	80005f8 <__aeabi_dmul>
 8007c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c0c:	f7f8 ff7a 	bl	8000b04 <__aeabi_dcmpge>
 8007c10:	9e04      	ldr	r6, [sp, #16]
 8007c12:	4637      	mov	r7, r6
 8007c14:	2800      	cmp	r0, #0
 8007c16:	f040 8245 	bne.w	80080a4 <_dtoa_r+0x954>
 8007c1a:	9d00      	ldr	r5, [sp, #0]
 8007c1c:	2331      	movs	r3, #49	; 0x31
 8007c1e:	f805 3b01 	strb.w	r3, [r5], #1
 8007c22:	f10b 0b01 	add.w	fp, fp, #1
 8007c26:	e241      	b.n	80080ac <_dtoa_r+0x95c>
 8007c28:	07f2      	lsls	r2, r6, #31
 8007c2a:	d505      	bpl.n	8007c38 <_dtoa_r+0x4e8>
 8007c2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c30:	f7f8 fce2 	bl	80005f8 <__aeabi_dmul>
 8007c34:	3501      	adds	r5, #1
 8007c36:	2301      	movs	r3, #1
 8007c38:	1076      	asrs	r6, r6, #1
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	e773      	b.n	8007b26 <_dtoa_r+0x3d6>
 8007c3e:	2502      	movs	r5, #2
 8007c40:	e775      	b.n	8007b2e <_dtoa_r+0x3de>
 8007c42:	9e04      	ldr	r6, [sp, #16]
 8007c44:	465f      	mov	r7, fp
 8007c46:	e792      	b.n	8007b6e <_dtoa_r+0x41e>
 8007c48:	9900      	ldr	r1, [sp, #0]
 8007c4a:	4b50      	ldr	r3, [pc, #320]	; (8007d8c <_dtoa_r+0x63c>)
 8007c4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c50:	4431      	add	r1, r6
 8007c52:	9102      	str	r1, [sp, #8]
 8007c54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c56:	eeb0 9a47 	vmov.f32	s18, s14
 8007c5a:	eef0 9a67 	vmov.f32	s19, s15
 8007c5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c66:	2900      	cmp	r1, #0
 8007c68:	d044      	beq.n	8007cf4 <_dtoa_r+0x5a4>
 8007c6a:	494e      	ldr	r1, [pc, #312]	; (8007da4 <_dtoa_r+0x654>)
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	f7f8 fded 	bl	800084c <__aeabi_ddiv>
 8007c72:	ec53 2b19 	vmov	r2, r3, d9
 8007c76:	f7f8 fb07 	bl	8000288 <__aeabi_dsub>
 8007c7a:	9d00      	ldr	r5, [sp, #0]
 8007c7c:	ec41 0b19 	vmov	d9, r0, r1
 8007c80:	4649      	mov	r1, r9
 8007c82:	4640      	mov	r0, r8
 8007c84:	f7f8 ff68 	bl	8000b58 <__aeabi_d2iz>
 8007c88:	4606      	mov	r6, r0
 8007c8a:	f7f8 fc4b 	bl	8000524 <__aeabi_i2d>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	4640      	mov	r0, r8
 8007c94:	4649      	mov	r1, r9
 8007c96:	f7f8 faf7 	bl	8000288 <__aeabi_dsub>
 8007c9a:	3630      	adds	r6, #48	; 0x30
 8007c9c:	f805 6b01 	strb.w	r6, [r5], #1
 8007ca0:	ec53 2b19 	vmov	r2, r3, d9
 8007ca4:	4680      	mov	r8, r0
 8007ca6:	4689      	mov	r9, r1
 8007ca8:	f7f8 ff18 	bl	8000adc <__aeabi_dcmplt>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d164      	bne.n	8007d7a <_dtoa_r+0x62a>
 8007cb0:	4642      	mov	r2, r8
 8007cb2:	464b      	mov	r3, r9
 8007cb4:	4937      	ldr	r1, [pc, #220]	; (8007d94 <_dtoa_r+0x644>)
 8007cb6:	2000      	movs	r0, #0
 8007cb8:	f7f8 fae6 	bl	8000288 <__aeabi_dsub>
 8007cbc:	ec53 2b19 	vmov	r2, r3, d9
 8007cc0:	f7f8 ff0c 	bl	8000adc <__aeabi_dcmplt>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	f040 80b6 	bne.w	8007e36 <_dtoa_r+0x6e6>
 8007cca:	9b02      	ldr	r3, [sp, #8]
 8007ccc:	429d      	cmp	r5, r3
 8007cce:	f43f af7c 	beq.w	8007bca <_dtoa_r+0x47a>
 8007cd2:	4b31      	ldr	r3, [pc, #196]	; (8007d98 <_dtoa_r+0x648>)
 8007cd4:	ec51 0b19 	vmov	r0, r1, d9
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f7f8 fc8d 	bl	80005f8 <__aeabi_dmul>
 8007cde:	4b2e      	ldr	r3, [pc, #184]	; (8007d98 <_dtoa_r+0x648>)
 8007ce0:	ec41 0b19 	vmov	d9, r0, r1
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	4640      	mov	r0, r8
 8007ce8:	4649      	mov	r1, r9
 8007cea:	f7f8 fc85 	bl	80005f8 <__aeabi_dmul>
 8007cee:	4680      	mov	r8, r0
 8007cf0:	4689      	mov	r9, r1
 8007cf2:	e7c5      	b.n	8007c80 <_dtoa_r+0x530>
 8007cf4:	ec51 0b17 	vmov	r0, r1, d7
 8007cf8:	f7f8 fc7e 	bl	80005f8 <__aeabi_dmul>
 8007cfc:	9b02      	ldr	r3, [sp, #8]
 8007cfe:	9d00      	ldr	r5, [sp, #0]
 8007d00:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d02:	ec41 0b19 	vmov	d9, r0, r1
 8007d06:	4649      	mov	r1, r9
 8007d08:	4640      	mov	r0, r8
 8007d0a:	f7f8 ff25 	bl	8000b58 <__aeabi_d2iz>
 8007d0e:	4606      	mov	r6, r0
 8007d10:	f7f8 fc08 	bl	8000524 <__aeabi_i2d>
 8007d14:	3630      	adds	r6, #48	; 0x30
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4640      	mov	r0, r8
 8007d1c:	4649      	mov	r1, r9
 8007d1e:	f7f8 fab3 	bl	8000288 <__aeabi_dsub>
 8007d22:	f805 6b01 	strb.w	r6, [r5], #1
 8007d26:	9b02      	ldr	r3, [sp, #8]
 8007d28:	429d      	cmp	r5, r3
 8007d2a:	4680      	mov	r8, r0
 8007d2c:	4689      	mov	r9, r1
 8007d2e:	f04f 0200 	mov.w	r2, #0
 8007d32:	d124      	bne.n	8007d7e <_dtoa_r+0x62e>
 8007d34:	4b1b      	ldr	r3, [pc, #108]	; (8007da4 <_dtoa_r+0x654>)
 8007d36:	ec51 0b19 	vmov	r0, r1, d9
 8007d3a:	f7f8 faa7 	bl	800028c <__adddf3>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4640      	mov	r0, r8
 8007d44:	4649      	mov	r1, r9
 8007d46:	f7f8 fee7 	bl	8000b18 <__aeabi_dcmpgt>
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	d173      	bne.n	8007e36 <_dtoa_r+0x6e6>
 8007d4e:	ec53 2b19 	vmov	r2, r3, d9
 8007d52:	4914      	ldr	r1, [pc, #80]	; (8007da4 <_dtoa_r+0x654>)
 8007d54:	2000      	movs	r0, #0
 8007d56:	f7f8 fa97 	bl	8000288 <__aeabi_dsub>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4640      	mov	r0, r8
 8007d60:	4649      	mov	r1, r9
 8007d62:	f7f8 febb 	bl	8000adc <__aeabi_dcmplt>
 8007d66:	2800      	cmp	r0, #0
 8007d68:	f43f af2f 	beq.w	8007bca <_dtoa_r+0x47a>
 8007d6c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d6e:	1e6b      	subs	r3, r5, #1
 8007d70:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d76:	2b30      	cmp	r3, #48	; 0x30
 8007d78:	d0f8      	beq.n	8007d6c <_dtoa_r+0x61c>
 8007d7a:	46bb      	mov	fp, r7
 8007d7c:	e04a      	b.n	8007e14 <_dtoa_r+0x6c4>
 8007d7e:	4b06      	ldr	r3, [pc, #24]	; (8007d98 <_dtoa_r+0x648>)
 8007d80:	f7f8 fc3a 	bl	80005f8 <__aeabi_dmul>
 8007d84:	4680      	mov	r8, r0
 8007d86:	4689      	mov	r9, r1
 8007d88:	e7bd      	b.n	8007d06 <_dtoa_r+0x5b6>
 8007d8a:	bf00      	nop
 8007d8c:	08009a68 	.word	0x08009a68
 8007d90:	08009a40 	.word	0x08009a40
 8007d94:	3ff00000 	.word	0x3ff00000
 8007d98:	40240000 	.word	0x40240000
 8007d9c:	401c0000 	.word	0x401c0000
 8007da0:	40140000 	.word	0x40140000
 8007da4:	3fe00000 	.word	0x3fe00000
 8007da8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007dac:	9d00      	ldr	r5, [sp, #0]
 8007dae:	4642      	mov	r2, r8
 8007db0:	464b      	mov	r3, r9
 8007db2:	4630      	mov	r0, r6
 8007db4:	4639      	mov	r1, r7
 8007db6:	f7f8 fd49 	bl	800084c <__aeabi_ddiv>
 8007dba:	f7f8 fecd 	bl	8000b58 <__aeabi_d2iz>
 8007dbe:	9001      	str	r0, [sp, #4]
 8007dc0:	f7f8 fbb0 	bl	8000524 <__aeabi_i2d>
 8007dc4:	4642      	mov	r2, r8
 8007dc6:	464b      	mov	r3, r9
 8007dc8:	f7f8 fc16 	bl	80005f8 <__aeabi_dmul>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	4639      	mov	r1, r7
 8007dd4:	f7f8 fa58 	bl	8000288 <__aeabi_dsub>
 8007dd8:	9e01      	ldr	r6, [sp, #4]
 8007dda:	9f04      	ldr	r7, [sp, #16]
 8007ddc:	3630      	adds	r6, #48	; 0x30
 8007dde:	f805 6b01 	strb.w	r6, [r5], #1
 8007de2:	9e00      	ldr	r6, [sp, #0]
 8007de4:	1bae      	subs	r6, r5, r6
 8007de6:	42b7      	cmp	r7, r6
 8007de8:	4602      	mov	r2, r0
 8007dea:	460b      	mov	r3, r1
 8007dec:	d134      	bne.n	8007e58 <_dtoa_r+0x708>
 8007dee:	f7f8 fa4d 	bl	800028c <__adddf3>
 8007df2:	4642      	mov	r2, r8
 8007df4:	464b      	mov	r3, r9
 8007df6:	4606      	mov	r6, r0
 8007df8:	460f      	mov	r7, r1
 8007dfa:	f7f8 fe8d 	bl	8000b18 <__aeabi_dcmpgt>
 8007dfe:	b9c8      	cbnz	r0, 8007e34 <_dtoa_r+0x6e4>
 8007e00:	4642      	mov	r2, r8
 8007e02:	464b      	mov	r3, r9
 8007e04:	4630      	mov	r0, r6
 8007e06:	4639      	mov	r1, r7
 8007e08:	f7f8 fe5e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e0c:	b110      	cbz	r0, 8007e14 <_dtoa_r+0x6c4>
 8007e0e:	9b01      	ldr	r3, [sp, #4]
 8007e10:	07db      	lsls	r3, r3, #31
 8007e12:	d40f      	bmi.n	8007e34 <_dtoa_r+0x6e4>
 8007e14:	4651      	mov	r1, sl
 8007e16:	4620      	mov	r0, r4
 8007e18:	f000 fd86 	bl	8008928 <_Bfree>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e20:	702b      	strb	r3, [r5, #0]
 8007e22:	f10b 0301 	add.w	r3, fp, #1
 8007e26:	6013      	str	r3, [r2, #0]
 8007e28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f43f ace2 	beq.w	80077f4 <_dtoa_r+0xa4>
 8007e30:	601d      	str	r5, [r3, #0]
 8007e32:	e4df      	b.n	80077f4 <_dtoa_r+0xa4>
 8007e34:	465f      	mov	r7, fp
 8007e36:	462b      	mov	r3, r5
 8007e38:	461d      	mov	r5, r3
 8007e3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e3e:	2a39      	cmp	r2, #57	; 0x39
 8007e40:	d106      	bne.n	8007e50 <_dtoa_r+0x700>
 8007e42:	9a00      	ldr	r2, [sp, #0]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d1f7      	bne.n	8007e38 <_dtoa_r+0x6e8>
 8007e48:	9900      	ldr	r1, [sp, #0]
 8007e4a:	2230      	movs	r2, #48	; 0x30
 8007e4c:	3701      	adds	r7, #1
 8007e4e:	700a      	strb	r2, [r1, #0]
 8007e50:	781a      	ldrb	r2, [r3, #0]
 8007e52:	3201      	adds	r2, #1
 8007e54:	701a      	strb	r2, [r3, #0]
 8007e56:	e790      	b.n	8007d7a <_dtoa_r+0x62a>
 8007e58:	4ba3      	ldr	r3, [pc, #652]	; (80080e8 <_dtoa_r+0x998>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f7f8 fbcc 	bl	80005f8 <__aeabi_dmul>
 8007e60:	2200      	movs	r2, #0
 8007e62:	2300      	movs	r3, #0
 8007e64:	4606      	mov	r6, r0
 8007e66:	460f      	mov	r7, r1
 8007e68:	f7f8 fe2e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d09e      	beq.n	8007dae <_dtoa_r+0x65e>
 8007e70:	e7d0      	b.n	8007e14 <_dtoa_r+0x6c4>
 8007e72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e74:	2a00      	cmp	r2, #0
 8007e76:	f000 80ca 	beq.w	800800e <_dtoa_r+0x8be>
 8007e7a:	9a07      	ldr	r2, [sp, #28]
 8007e7c:	2a01      	cmp	r2, #1
 8007e7e:	f300 80ad 	bgt.w	8007fdc <_dtoa_r+0x88c>
 8007e82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e84:	2a00      	cmp	r2, #0
 8007e86:	f000 80a5 	beq.w	8007fd4 <_dtoa_r+0x884>
 8007e8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e8e:	9e08      	ldr	r6, [sp, #32]
 8007e90:	9d05      	ldr	r5, [sp, #20]
 8007e92:	9a05      	ldr	r2, [sp, #20]
 8007e94:	441a      	add	r2, r3
 8007e96:	9205      	str	r2, [sp, #20]
 8007e98:	9a06      	ldr	r2, [sp, #24]
 8007e9a:	2101      	movs	r1, #1
 8007e9c:	441a      	add	r2, r3
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	9206      	str	r2, [sp, #24]
 8007ea2:	f000 fdf7 	bl	8008a94 <__i2b>
 8007ea6:	4607      	mov	r7, r0
 8007ea8:	b165      	cbz	r5, 8007ec4 <_dtoa_r+0x774>
 8007eaa:	9b06      	ldr	r3, [sp, #24]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	dd09      	ble.n	8007ec4 <_dtoa_r+0x774>
 8007eb0:	42ab      	cmp	r3, r5
 8007eb2:	9a05      	ldr	r2, [sp, #20]
 8007eb4:	bfa8      	it	ge
 8007eb6:	462b      	movge	r3, r5
 8007eb8:	1ad2      	subs	r2, r2, r3
 8007eba:	9205      	str	r2, [sp, #20]
 8007ebc:	9a06      	ldr	r2, [sp, #24]
 8007ebe:	1aed      	subs	r5, r5, r3
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	9306      	str	r3, [sp, #24]
 8007ec4:	9b08      	ldr	r3, [sp, #32]
 8007ec6:	b1f3      	cbz	r3, 8007f06 <_dtoa_r+0x7b6>
 8007ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 80a3 	beq.w	8008016 <_dtoa_r+0x8c6>
 8007ed0:	2e00      	cmp	r6, #0
 8007ed2:	dd10      	ble.n	8007ef6 <_dtoa_r+0x7a6>
 8007ed4:	4639      	mov	r1, r7
 8007ed6:	4632      	mov	r2, r6
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f000 fe9b 	bl	8008c14 <__pow5mult>
 8007ede:	4652      	mov	r2, sl
 8007ee0:	4601      	mov	r1, r0
 8007ee2:	4607      	mov	r7, r0
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f000 fdeb 	bl	8008ac0 <__multiply>
 8007eea:	4651      	mov	r1, sl
 8007eec:	4680      	mov	r8, r0
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f000 fd1a 	bl	8008928 <_Bfree>
 8007ef4:	46c2      	mov	sl, r8
 8007ef6:	9b08      	ldr	r3, [sp, #32]
 8007ef8:	1b9a      	subs	r2, r3, r6
 8007efa:	d004      	beq.n	8007f06 <_dtoa_r+0x7b6>
 8007efc:	4651      	mov	r1, sl
 8007efe:	4620      	mov	r0, r4
 8007f00:	f000 fe88 	bl	8008c14 <__pow5mult>
 8007f04:	4682      	mov	sl, r0
 8007f06:	2101      	movs	r1, #1
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f000 fdc3 	bl	8008a94 <__i2b>
 8007f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	4606      	mov	r6, r0
 8007f14:	f340 8081 	ble.w	800801a <_dtoa_r+0x8ca>
 8007f18:	461a      	mov	r2, r3
 8007f1a:	4601      	mov	r1, r0
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f000 fe79 	bl	8008c14 <__pow5mult>
 8007f22:	9b07      	ldr	r3, [sp, #28]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	4606      	mov	r6, r0
 8007f28:	dd7a      	ble.n	8008020 <_dtoa_r+0x8d0>
 8007f2a:	f04f 0800 	mov.w	r8, #0
 8007f2e:	6933      	ldr	r3, [r6, #16]
 8007f30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f34:	6918      	ldr	r0, [r3, #16]
 8007f36:	f000 fd5f 	bl	80089f8 <__hi0bits>
 8007f3a:	f1c0 0020 	rsb	r0, r0, #32
 8007f3e:	9b06      	ldr	r3, [sp, #24]
 8007f40:	4418      	add	r0, r3
 8007f42:	f010 001f 	ands.w	r0, r0, #31
 8007f46:	f000 8094 	beq.w	8008072 <_dtoa_r+0x922>
 8007f4a:	f1c0 0320 	rsb	r3, r0, #32
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	f340 8085 	ble.w	800805e <_dtoa_r+0x90e>
 8007f54:	9b05      	ldr	r3, [sp, #20]
 8007f56:	f1c0 001c 	rsb	r0, r0, #28
 8007f5a:	4403      	add	r3, r0
 8007f5c:	9305      	str	r3, [sp, #20]
 8007f5e:	9b06      	ldr	r3, [sp, #24]
 8007f60:	4403      	add	r3, r0
 8007f62:	4405      	add	r5, r0
 8007f64:	9306      	str	r3, [sp, #24]
 8007f66:	9b05      	ldr	r3, [sp, #20]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	dd05      	ble.n	8007f78 <_dtoa_r+0x828>
 8007f6c:	4651      	mov	r1, sl
 8007f6e:	461a      	mov	r2, r3
 8007f70:	4620      	mov	r0, r4
 8007f72:	f000 fea9 	bl	8008cc8 <__lshift>
 8007f76:	4682      	mov	sl, r0
 8007f78:	9b06      	ldr	r3, [sp, #24]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	dd05      	ble.n	8007f8a <_dtoa_r+0x83a>
 8007f7e:	4631      	mov	r1, r6
 8007f80:	461a      	mov	r2, r3
 8007f82:	4620      	mov	r0, r4
 8007f84:	f000 fea0 	bl	8008cc8 <__lshift>
 8007f88:	4606      	mov	r6, r0
 8007f8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d072      	beq.n	8008076 <_dtoa_r+0x926>
 8007f90:	4631      	mov	r1, r6
 8007f92:	4650      	mov	r0, sl
 8007f94:	f000 ff04 	bl	8008da0 <__mcmp>
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	da6c      	bge.n	8008076 <_dtoa_r+0x926>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	4651      	mov	r1, sl
 8007fa0:	220a      	movs	r2, #10
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f000 fce2 	bl	800896c <__multadd>
 8007fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007faa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007fae:	4682      	mov	sl, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 81b0 	beq.w	8008316 <_dtoa_r+0xbc6>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	4639      	mov	r1, r7
 8007fba:	220a      	movs	r2, #10
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	f000 fcd5 	bl	800896c <__multadd>
 8007fc2:	9b01      	ldr	r3, [sp, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	4607      	mov	r7, r0
 8007fc8:	f300 8096 	bgt.w	80080f8 <_dtoa_r+0x9a8>
 8007fcc:	9b07      	ldr	r3, [sp, #28]
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	dc59      	bgt.n	8008086 <_dtoa_r+0x936>
 8007fd2:	e091      	b.n	80080f8 <_dtoa_r+0x9a8>
 8007fd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007fda:	e758      	b.n	8007e8e <_dtoa_r+0x73e>
 8007fdc:	9b04      	ldr	r3, [sp, #16]
 8007fde:	1e5e      	subs	r6, r3, #1
 8007fe0:	9b08      	ldr	r3, [sp, #32]
 8007fe2:	42b3      	cmp	r3, r6
 8007fe4:	bfbf      	itttt	lt
 8007fe6:	9b08      	ldrlt	r3, [sp, #32]
 8007fe8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007fea:	9608      	strlt	r6, [sp, #32]
 8007fec:	1af3      	sublt	r3, r6, r3
 8007fee:	bfb4      	ite	lt
 8007ff0:	18d2      	addlt	r2, r2, r3
 8007ff2:	1b9e      	subge	r6, r3, r6
 8007ff4:	9b04      	ldr	r3, [sp, #16]
 8007ff6:	bfbc      	itt	lt
 8007ff8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007ffa:	2600      	movlt	r6, #0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	bfb7      	itett	lt
 8008000:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008004:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008008:	1a9d      	sublt	r5, r3, r2
 800800a:	2300      	movlt	r3, #0
 800800c:	e741      	b.n	8007e92 <_dtoa_r+0x742>
 800800e:	9e08      	ldr	r6, [sp, #32]
 8008010:	9d05      	ldr	r5, [sp, #20]
 8008012:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008014:	e748      	b.n	8007ea8 <_dtoa_r+0x758>
 8008016:	9a08      	ldr	r2, [sp, #32]
 8008018:	e770      	b.n	8007efc <_dtoa_r+0x7ac>
 800801a:	9b07      	ldr	r3, [sp, #28]
 800801c:	2b01      	cmp	r3, #1
 800801e:	dc19      	bgt.n	8008054 <_dtoa_r+0x904>
 8008020:	9b02      	ldr	r3, [sp, #8]
 8008022:	b9bb      	cbnz	r3, 8008054 <_dtoa_r+0x904>
 8008024:	9b03      	ldr	r3, [sp, #12]
 8008026:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800802a:	b99b      	cbnz	r3, 8008054 <_dtoa_r+0x904>
 800802c:	9b03      	ldr	r3, [sp, #12]
 800802e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008032:	0d1b      	lsrs	r3, r3, #20
 8008034:	051b      	lsls	r3, r3, #20
 8008036:	b183      	cbz	r3, 800805a <_dtoa_r+0x90a>
 8008038:	9b05      	ldr	r3, [sp, #20]
 800803a:	3301      	adds	r3, #1
 800803c:	9305      	str	r3, [sp, #20]
 800803e:	9b06      	ldr	r3, [sp, #24]
 8008040:	3301      	adds	r3, #1
 8008042:	9306      	str	r3, [sp, #24]
 8008044:	f04f 0801 	mov.w	r8, #1
 8008048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800804a:	2b00      	cmp	r3, #0
 800804c:	f47f af6f 	bne.w	8007f2e <_dtoa_r+0x7de>
 8008050:	2001      	movs	r0, #1
 8008052:	e774      	b.n	8007f3e <_dtoa_r+0x7ee>
 8008054:	f04f 0800 	mov.w	r8, #0
 8008058:	e7f6      	b.n	8008048 <_dtoa_r+0x8f8>
 800805a:	4698      	mov	r8, r3
 800805c:	e7f4      	b.n	8008048 <_dtoa_r+0x8f8>
 800805e:	d082      	beq.n	8007f66 <_dtoa_r+0x816>
 8008060:	9a05      	ldr	r2, [sp, #20]
 8008062:	331c      	adds	r3, #28
 8008064:	441a      	add	r2, r3
 8008066:	9205      	str	r2, [sp, #20]
 8008068:	9a06      	ldr	r2, [sp, #24]
 800806a:	441a      	add	r2, r3
 800806c:	441d      	add	r5, r3
 800806e:	9206      	str	r2, [sp, #24]
 8008070:	e779      	b.n	8007f66 <_dtoa_r+0x816>
 8008072:	4603      	mov	r3, r0
 8008074:	e7f4      	b.n	8008060 <_dtoa_r+0x910>
 8008076:	9b04      	ldr	r3, [sp, #16]
 8008078:	2b00      	cmp	r3, #0
 800807a:	dc37      	bgt.n	80080ec <_dtoa_r+0x99c>
 800807c:	9b07      	ldr	r3, [sp, #28]
 800807e:	2b02      	cmp	r3, #2
 8008080:	dd34      	ble.n	80080ec <_dtoa_r+0x99c>
 8008082:	9b04      	ldr	r3, [sp, #16]
 8008084:	9301      	str	r3, [sp, #4]
 8008086:	9b01      	ldr	r3, [sp, #4]
 8008088:	b963      	cbnz	r3, 80080a4 <_dtoa_r+0x954>
 800808a:	4631      	mov	r1, r6
 800808c:	2205      	movs	r2, #5
 800808e:	4620      	mov	r0, r4
 8008090:	f000 fc6c 	bl	800896c <__multadd>
 8008094:	4601      	mov	r1, r0
 8008096:	4606      	mov	r6, r0
 8008098:	4650      	mov	r0, sl
 800809a:	f000 fe81 	bl	8008da0 <__mcmp>
 800809e:	2800      	cmp	r0, #0
 80080a0:	f73f adbb 	bgt.w	8007c1a <_dtoa_r+0x4ca>
 80080a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080a6:	9d00      	ldr	r5, [sp, #0]
 80080a8:	ea6f 0b03 	mvn.w	fp, r3
 80080ac:	f04f 0800 	mov.w	r8, #0
 80080b0:	4631      	mov	r1, r6
 80080b2:	4620      	mov	r0, r4
 80080b4:	f000 fc38 	bl	8008928 <_Bfree>
 80080b8:	2f00      	cmp	r7, #0
 80080ba:	f43f aeab 	beq.w	8007e14 <_dtoa_r+0x6c4>
 80080be:	f1b8 0f00 	cmp.w	r8, #0
 80080c2:	d005      	beq.n	80080d0 <_dtoa_r+0x980>
 80080c4:	45b8      	cmp	r8, r7
 80080c6:	d003      	beq.n	80080d0 <_dtoa_r+0x980>
 80080c8:	4641      	mov	r1, r8
 80080ca:	4620      	mov	r0, r4
 80080cc:	f000 fc2c 	bl	8008928 <_Bfree>
 80080d0:	4639      	mov	r1, r7
 80080d2:	4620      	mov	r0, r4
 80080d4:	f000 fc28 	bl	8008928 <_Bfree>
 80080d8:	e69c      	b.n	8007e14 <_dtoa_r+0x6c4>
 80080da:	2600      	movs	r6, #0
 80080dc:	4637      	mov	r7, r6
 80080de:	e7e1      	b.n	80080a4 <_dtoa_r+0x954>
 80080e0:	46bb      	mov	fp, r7
 80080e2:	4637      	mov	r7, r6
 80080e4:	e599      	b.n	8007c1a <_dtoa_r+0x4ca>
 80080e6:	bf00      	nop
 80080e8:	40240000 	.word	0x40240000
 80080ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f000 80c8 	beq.w	8008284 <_dtoa_r+0xb34>
 80080f4:	9b04      	ldr	r3, [sp, #16]
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	2d00      	cmp	r5, #0
 80080fa:	dd05      	ble.n	8008108 <_dtoa_r+0x9b8>
 80080fc:	4639      	mov	r1, r7
 80080fe:	462a      	mov	r2, r5
 8008100:	4620      	mov	r0, r4
 8008102:	f000 fde1 	bl	8008cc8 <__lshift>
 8008106:	4607      	mov	r7, r0
 8008108:	f1b8 0f00 	cmp.w	r8, #0
 800810c:	d05b      	beq.n	80081c6 <_dtoa_r+0xa76>
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	4620      	mov	r0, r4
 8008112:	f000 fbc9 	bl	80088a8 <_Balloc>
 8008116:	4605      	mov	r5, r0
 8008118:	b928      	cbnz	r0, 8008126 <_dtoa_r+0x9d6>
 800811a:	4b83      	ldr	r3, [pc, #524]	; (8008328 <_dtoa_r+0xbd8>)
 800811c:	4602      	mov	r2, r0
 800811e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008122:	f7ff bb2e 	b.w	8007782 <_dtoa_r+0x32>
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	3202      	adds	r2, #2
 800812a:	0092      	lsls	r2, r2, #2
 800812c:	f107 010c 	add.w	r1, r7, #12
 8008130:	300c      	adds	r0, #12
 8008132:	f7ff fa74 	bl	800761e <memcpy>
 8008136:	2201      	movs	r2, #1
 8008138:	4629      	mov	r1, r5
 800813a:	4620      	mov	r0, r4
 800813c:	f000 fdc4 	bl	8008cc8 <__lshift>
 8008140:	9b00      	ldr	r3, [sp, #0]
 8008142:	3301      	adds	r3, #1
 8008144:	9304      	str	r3, [sp, #16]
 8008146:	e9dd 2300 	ldrd	r2, r3, [sp]
 800814a:	4413      	add	r3, r2
 800814c:	9308      	str	r3, [sp, #32]
 800814e:	9b02      	ldr	r3, [sp, #8]
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	46b8      	mov	r8, r7
 8008156:	9306      	str	r3, [sp, #24]
 8008158:	4607      	mov	r7, r0
 800815a:	9b04      	ldr	r3, [sp, #16]
 800815c:	4631      	mov	r1, r6
 800815e:	3b01      	subs	r3, #1
 8008160:	4650      	mov	r0, sl
 8008162:	9301      	str	r3, [sp, #4]
 8008164:	f7ff fa69 	bl	800763a <quorem>
 8008168:	4641      	mov	r1, r8
 800816a:	9002      	str	r0, [sp, #8]
 800816c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008170:	4650      	mov	r0, sl
 8008172:	f000 fe15 	bl	8008da0 <__mcmp>
 8008176:	463a      	mov	r2, r7
 8008178:	9005      	str	r0, [sp, #20]
 800817a:	4631      	mov	r1, r6
 800817c:	4620      	mov	r0, r4
 800817e:	f000 fe2b 	bl	8008dd8 <__mdiff>
 8008182:	68c2      	ldr	r2, [r0, #12]
 8008184:	4605      	mov	r5, r0
 8008186:	bb02      	cbnz	r2, 80081ca <_dtoa_r+0xa7a>
 8008188:	4601      	mov	r1, r0
 800818a:	4650      	mov	r0, sl
 800818c:	f000 fe08 	bl	8008da0 <__mcmp>
 8008190:	4602      	mov	r2, r0
 8008192:	4629      	mov	r1, r5
 8008194:	4620      	mov	r0, r4
 8008196:	9209      	str	r2, [sp, #36]	; 0x24
 8008198:	f000 fbc6 	bl	8008928 <_Bfree>
 800819c:	9b07      	ldr	r3, [sp, #28]
 800819e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081a0:	9d04      	ldr	r5, [sp, #16]
 80081a2:	ea43 0102 	orr.w	r1, r3, r2
 80081a6:	9b06      	ldr	r3, [sp, #24]
 80081a8:	4319      	orrs	r1, r3
 80081aa:	d110      	bne.n	80081ce <_dtoa_r+0xa7e>
 80081ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80081b0:	d029      	beq.n	8008206 <_dtoa_r+0xab6>
 80081b2:	9b05      	ldr	r3, [sp, #20]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	dd02      	ble.n	80081be <_dtoa_r+0xa6e>
 80081b8:	9b02      	ldr	r3, [sp, #8]
 80081ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80081be:	9b01      	ldr	r3, [sp, #4]
 80081c0:	f883 9000 	strb.w	r9, [r3]
 80081c4:	e774      	b.n	80080b0 <_dtoa_r+0x960>
 80081c6:	4638      	mov	r0, r7
 80081c8:	e7ba      	b.n	8008140 <_dtoa_r+0x9f0>
 80081ca:	2201      	movs	r2, #1
 80081cc:	e7e1      	b.n	8008192 <_dtoa_r+0xa42>
 80081ce:	9b05      	ldr	r3, [sp, #20]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	db04      	blt.n	80081de <_dtoa_r+0xa8e>
 80081d4:	9907      	ldr	r1, [sp, #28]
 80081d6:	430b      	orrs	r3, r1
 80081d8:	9906      	ldr	r1, [sp, #24]
 80081da:	430b      	orrs	r3, r1
 80081dc:	d120      	bne.n	8008220 <_dtoa_r+0xad0>
 80081de:	2a00      	cmp	r2, #0
 80081e0:	dded      	ble.n	80081be <_dtoa_r+0xa6e>
 80081e2:	4651      	mov	r1, sl
 80081e4:	2201      	movs	r2, #1
 80081e6:	4620      	mov	r0, r4
 80081e8:	f000 fd6e 	bl	8008cc8 <__lshift>
 80081ec:	4631      	mov	r1, r6
 80081ee:	4682      	mov	sl, r0
 80081f0:	f000 fdd6 	bl	8008da0 <__mcmp>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	dc03      	bgt.n	8008200 <_dtoa_r+0xab0>
 80081f8:	d1e1      	bne.n	80081be <_dtoa_r+0xa6e>
 80081fa:	f019 0f01 	tst.w	r9, #1
 80081fe:	d0de      	beq.n	80081be <_dtoa_r+0xa6e>
 8008200:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008204:	d1d8      	bne.n	80081b8 <_dtoa_r+0xa68>
 8008206:	9a01      	ldr	r2, [sp, #4]
 8008208:	2339      	movs	r3, #57	; 0x39
 800820a:	7013      	strb	r3, [r2, #0]
 800820c:	462b      	mov	r3, r5
 800820e:	461d      	mov	r5, r3
 8008210:	3b01      	subs	r3, #1
 8008212:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008216:	2a39      	cmp	r2, #57	; 0x39
 8008218:	d06c      	beq.n	80082f4 <_dtoa_r+0xba4>
 800821a:	3201      	adds	r2, #1
 800821c:	701a      	strb	r2, [r3, #0]
 800821e:	e747      	b.n	80080b0 <_dtoa_r+0x960>
 8008220:	2a00      	cmp	r2, #0
 8008222:	dd07      	ble.n	8008234 <_dtoa_r+0xae4>
 8008224:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008228:	d0ed      	beq.n	8008206 <_dtoa_r+0xab6>
 800822a:	9a01      	ldr	r2, [sp, #4]
 800822c:	f109 0301 	add.w	r3, r9, #1
 8008230:	7013      	strb	r3, [r2, #0]
 8008232:	e73d      	b.n	80080b0 <_dtoa_r+0x960>
 8008234:	9b04      	ldr	r3, [sp, #16]
 8008236:	9a08      	ldr	r2, [sp, #32]
 8008238:	f803 9c01 	strb.w	r9, [r3, #-1]
 800823c:	4293      	cmp	r3, r2
 800823e:	d043      	beq.n	80082c8 <_dtoa_r+0xb78>
 8008240:	4651      	mov	r1, sl
 8008242:	2300      	movs	r3, #0
 8008244:	220a      	movs	r2, #10
 8008246:	4620      	mov	r0, r4
 8008248:	f000 fb90 	bl	800896c <__multadd>
 800824c:	45b8      	cmp	r8, r7
 800824e:	4682      	mov	sl, r0
 8008250:	f04f 0300 	mov.w	r3, #0
 8008254:	f04f 020a 	mov.w	r2, #10
 8008258:	4641      	mov	r1, r8
 800825a:	4620      	mov	r0, r4
 800825c:	d107      	bne.n	800826e <_dtoa_r+0xb1e>
 800825e:	f000 fb85 	bl	800896c <__multadd>
 8008262:	4680      	mov	r8, r0
 8008264:	4607      	mov	r7, r0
 8008266:	9b04      	ldr	r3, [sp, #16]
 8008268:	3301      	adds	r3, #1
 800826a:	9304      	str	r3, [sp, #16]
 800826c:	e775      	b.n	800815a <_dtoa_r+0xa0a>
 800826e:	f000 fb7d 	bl	800896c <__multadd>
 8008272:	4639      	mov	r1, r7
 8008274:	4680      	mov	r8, r0
 8008276:	2300      	movs	r3, #0
 8008278:	220a      	movs	r2, #10
 800827a:	4620      	mov	r0, r4
 800827c:	f000 fb76 	bl	800896c <__multadd>
 8008280:	4607      	mov	r7, r0
 8008282:	e7f0      	b.n	8008266 <_dtoa_r+0xb16>
 8008284:	9b04      	ldr	r3, [sp, #16]
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	9d00      	ldr	r5, [sp, #0]
 800828a:	4631      	mov	r1, r6
 800828c:	4650      	mov	r0, sl
 800828e:	f7ff f9d4 	bl	800763a <quorem>
 8008292:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008296:	9b00      	ldr	r3, [sp, #0]
 8008298:	f805 9b01 	strb.w	r9, [r5], #1
 800829c:	1aea      	subs	r2, r5, r3
 800829e:	9b01      	ldr	r3, [sp, #4]
 80082a0:	4293      	cmp	r3, r2
 80082a2:	dd07      	ble.n	80082b4 <_dtoa_r+0xb64>
 80082a4:	4651      	mov	r1, sl
 80082a6:	2300      	movs	r3, #0
 80082a8:	220a      	movs	r2, #10
 80082aa:	4620      	mov	r0, r4
 80082ac:	f000 fb5e 	bl	800896c <__multadd>
 80082b0:	4682      	mov	sl, r0
 80082b2:	e7ea      	b.n	800828a <_dtoa_r+0xb3a>
 80082b4:	9b01      	ldr	r3, [sp, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	bfc8      	it	gt
 80082ba:	461d      	movgt	r5, r3
 80082bc:	9b00      	ldr	r3, [sp, #0]
 80082be:	bfd8      	it	le
 80082c0:	2501      	movle	r5, #1
 80082c2:	441d      	add	r5, r3
 80082c4:	f04f 0800 	mov.w	r8, #0
 80082c8:	4651      	mov	r1, sl
 80082ca:	2201      	movs	r2, #1
 80082cc:	4620      	mov	r0, r4
 80082ce:	f000 fcfb 	bl	8008cc8 <__lshift>
 80082d2:	4631      	mov	r1, r6
 80082d4:	4682      	mov	sl, r0
 80082d6:	f000 fd63 	bl	8008da0 <__mcmp>
 80082da:	2800      	cmp	r0, #0
 80082dc:	dc96      	bgt.n	800820c <_dtoa_r+0xabc>
 80082de:	d102      	bne.n	80082e6 <_dtoa_r+0xb96>
 80082e0:	f019 0f01 	tst.w	r9, #1
 80082e4:	d192      	bne.n	800820c <_dtoa_r+0xabc>
 80082e6:	462b      	mov	r3, r5
 80082e8:	461d      	mov	r5, r3
 80082ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082ee:	2a30      	cmp	r2, #48	; 0x30
 80082f0:	d0fa      	beq.n	80082e8 <_dtoa_r+0xb98>
 80082f2:	e6dd      	b.n	80080b0 <_dtoa_r+0x960>
 80082f4:	9a00      	ldr	r2, [sp, #0]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d189      	bne.n	800820e <_dtoa_r+0xabe>
 80082fa:	f10b 0b01 	add.w	fp, fp, #1
 80082fe:	2331      	movs	r3, #49	; 0x31
 8008300:	e796      	b.n	8008230 <_dtoa_r+0xae0>
 8008302:	4b0a      	ldr	r3, [pc, #40]	; (800832c <_dtoa_r+0xbdc>)
 8008304:	f7ff ba99 	b.w	800783a <_dtoa_r+0xea>
 8008308:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800830a:	2b00      	cmp	r3, #0
 800830c:	f47f aa6d 	bne.w	80077ea <_dtoa_r+0x9a>
 8008310:	4b07      	ldr	r3, [pc, #28]	; (8008330 <_dtoa_r+0xbe0>)
 8008312:	f7ff ba92 	b.w	800783a <_dtoa_r+0xea>
 8008316:	9b01      	ldr	r3, [sp, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	dcb5      	bgt.n	8008288 <_dtoa_r+0xb38>
 800831c:	9b07      	ldr	r3, [sp, #28]
 800831e:	2b02      	cmp	r3, #2
 8008320:	f73f aeb1 	bgt.w	8008086 <_dtoa_r+0x936>
 8008324:	e7b0      	b.n	8008288 <_dtoa_r+0xb38>
 8008326:	bf00      	nop
 8008328:	080099c4 	.word	0x080099c4
 800832c:	08009924 	.word	0x08009924
 8008330:	08009948 	.word	0x08009948

08008334 <__ssputs_r>:
 8008334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008338:	688e      	ldr	r6, [r1, #8]
 800833a:	461f      	mov	r7, r3
 800833c:	42be      	cmp	r6, r7
 800833e:	680b      	ldr	r3, [r1, #0]
 8008340:	4682      	mov	sl, r0
 8008342:	460c      	mov	r4, r1
 8008344:	4690      	mov	r8, r2
 8008346:	d82c      	bhi.n	80083a2 <__ssputs_r+0x6e>
 8008348:	898a      	ldrh	r2, [r1, #12]
 800834a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800834e:	d026      	beq.n	800839e <__ssputs_r+0x6a>
 8008350:	6965      	ldr	r5, [r4, #20]
 8008352:	6909      	ldr	r1, [r1, #16]
 8008354:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008358:	eba3 0901 	sub.w	r9, r3, r1
 800835c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008360:	1c7b      	adds	r3, r7, #1
 8008362:	444b      	add	r3, r9
 8008364:	106d      	asrs	r5, r5, #1
 8008366:	429d      	cmp	r5, r3
 8008368:	bf38      	it	cc
 800836a:	461d      	movcc	r5, r3
 800836c:	0553      	lsls	r3, r2, #21
 800836e:	d527      	bpl.n	80083c0 <__ssputs_r+0x8c>
 8008370:	4629      	mov	r1, r5
 8008372:	f000 f95f 	bl	8008634 <_malloc_r>
 8008376:	4606      	mov	r6, r0
 8008378:	b360      	cbz	r0, 80083d4 <__ssputs_r+0xa0>
 800837a:	6921      	ldr	r1, [r4, #16]
 800837c:	464a      	mov	r2, r9
 800837e:	f7ff f94e 	bl	800761e <memcpy>
 8008382:	89a3      	ldrh	r3, [r4, #12]
 8008384:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800838c:	81a3      	strh	r3, [r4, #12]
 800838e:	6126      	str	r6, [r4, #16]
 8008390:	6165      	str	r5, [r4, #20]
 8008392:	444e      	add	r6, r9
 8008394:	eba5 0509 	sub.w	r5, r5, r9
 8008398:	6026      	str	r6, [r4, #0]
 800839a:	60a5      	str	r5, [r4, #8]
 800839c:	463e      	mov	r6, r7
 800839e:	42be      	cmp	r6, r7
 80083a0:	d900      	bls.n	80083a4 <__ssputs_r+0x70>
 80083a2:	463e      	mov	r6, r7
 80083a4:	6820      	ldr	r0, [r4, #0]
 80083a6:	4632      	mov	r2, r6
 80083a8:	4641      	mov	r1, r8
 80083aa:	f000 fe6b 	bl	8009084 <memmove>
 80083ae:	68a3      	ldr	r3, [r4, #8]
 80083b0:	1b9b      	subs	r3, r3, r6
 80083b2:	60a3      	str	r3, [r4, #8]
 80083b4:	6823      	ldr	r3, [r4, #0]
 80083b6:	4433      	add	r3, r6
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	2000      	movs	r0, #0
 80083bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c0:	462a      	mov	r2, r5
 80083c2:	f000 fe30 	bl	8009026 <_realloc_r>
 80083c6:	4606      	mov	r6, r0
 80083c8:	2800      	cmp	r0, #0
 80083ca:	d1e0      	bne.n	800838e <__ssputs_r+0x5a>
 80083cc:	6921      	ldr	r1, [r4, #16]
 80083ce:	4650      	mov	r0, sl
 80083d0:	f000 fefc 	bl	80091cc <_free_r>
 80083d4:	230c      	movs	r3, #12
 80083d6:	f8ca 3000 	str.w	r3, [sl]
 80083da:	89a3      	ldrh	r3, [r4, #12]
 80083dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083e0:	81a3      	strh	r3, [r4, #12]
 80083e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083e6:	e7e9      	b.n	80083bc <__ssputs_r+0x88>

080083e8 <_svfiprintf_r>:
 80083e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ec:	4698      	mov	r8, r3
 80083ee:	898b      	ldrh	r3, [r1, #12]
 80083f0:	061b      	lsls	r3, r3, #24
 80083f2:	b09d      	sub	sp, #116	; 0x74
 80083f4:	4607      	mov	r7, r0
 80083f6:	460d      	mov	r5, r1
 80083f8:	4614      	mov	r4, r2
 80083fa:	d50e      	bpl.n	800841a <_svfiprintf_r+0x32>
 80083fc:	690b      	ldr	r3, [r1, #16]
 80083fe:	b963      	cbnz	r3, 800841a <_svfiprintf_r+0x32>
 8008400:	2140      	movs	r1, #64	; 0x40
 8008402:	f000 f917 	bl	8008634 <_malloc_r>
 8008406:	6028      	str	r0, [r5, #0]
 8008408:	6128      	str	r0, [r5, #16]
 800840a:	b920      	cbnz	r0, 8008416 <_svfiprintf_r+0x2e>
 800840c:	230c      	movs	r3, #12
 800840e:	603b      	str	r3, [r7, #0]
 8008410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008414:	e0d0      	b.n	80085b8 <_svfiprintf_r+0x1d0>
 8008416:	2340      	movs	r3, #64	; 0x40
 8008418:	616b      	str	r3, [r5, #20]
 800841a:	2300      	movs	r3, #0
 800841c:	9309      	str	r3, [sp, #36]	; 0x24
 800841e:	2320      	movs	r3, #32
 8008420:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008424:	f8cd 800c 	str.w	r8, [sp, #12]
 8008428:	2330      	movs	r3, #48	; 0x30
 800842a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80085d0 <_svfiprintf_r+0x1e8>
 800842e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008432:	f04f 0901 	mov.w	r9, #1
 8008436:	4623      	mov	r3, r4
 8008438:	469a      	mov	sl, r3
 800843a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800843e:	b10a      	cbz	r2, 8008444 <_svfiprintf_r+0x5c>
 8008440:	2a25      	cmp	r2, #37	; 0x25
 8008442:	d1f9      	bne.n	8008438 <_svfiprintf_r+0x50>
 8008444:	ebba 0b04 	subs.w	fp, sl, r4
 8008448:	d00b      	beq.n	8008462 <_svfiprintf_r+0x7a>
 800844a:	465b      	mov	r3, fp
 800844c:	4622      	mov	r2, r4
 800844e:	4629      	mov	r1, r5
 8008450:	4638      	mov	r0, r7
 8008452:	f7ff ff6f 	bl	8008334 <__ssputs_r>
 8008456:	3001      	adds	r0, #1
 8008458:	f000 80a9 	beq.w	80085ae <_svfiprintf_r+0x1c6>
 800845c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800845e:	445a      	add	r2, fp
 8008460:	9209      	str	r2, [sp, #36]	; 0x24
 8008462:	f89a 3000 	ldrb.w	r3, [sl]
 8008466:	2b00      	cmp	r3, #0
 8008468:	f000 80a1 	beq.w	80085ae <_svfiprintf_r+0x1c6>
 800846c:	2300      	movs	r3, #0
 800846e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008472:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008476:	f10a 0a01 	add.w	sl, sl, #1
 800847a:	9304      	str	r3, [sp, #16]
 800847c:	9307      	str	r3, [sp, #28]
 800847e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008482:	931a      	str	r3, [sp, #104]	; 0x68
 8008484:	4654      	mov	r4, sl
 8008486:	2205      	movs	r2, #5
 8008488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800848c:	4850      	ldr	r0, [pc, #320]	; (80085d0 <_svfiprintf_r+0x1e8>)
 800848e:	f7f7 fe9f 	bl	80001d0 <memchr>
 8008492:	9a04      	ldr	r2, [sp, #16]
 8008494:	b9d8      	cbnz	r0, 80084ce <_svfiprintf_r+0xe6>
 8008496:	06d0      	lsls	r0, r2, #27
 8008498:	bf44      	itt	mi
 800849a:	2320      	movmi	r3, #32
 800849c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084a0:	0711      	lsls	r1, r2, #28
 80084a2:	bf44      	itt	mi
 80084a4:	232b      	movmi	r3, #43	; 0x2b
 80084a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084aa:	f89a 3000 	ldrb.w	r3, [sl]
 80084ae:	2b2a      	cmp	r3, #42	; 0x2a
 80084b0:	d015      	beq.n	80084de <_svfiprintf_r+0xf6>
 80084b2:	9a07      	ldr	r2, [sp, #28]
 80084b4:	4654      	mov	r4, sl
 80084b6:	2000      	movs	r0, #0
 80084b8:	f04f 0c0a 	mov.w	ip, #10
 80084bc:	4621      	mov	r1, r4
 80084be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084c2:	3b30      	subs	r3, #48	; 0x30
 80084c4:	2b09      	cmp	r3, #9
 80084c6:	d94d      	bls.n	8008564 <_svfiprintf_r+0x17c>
 80084c8:	b1b0      	cbz	r0, 80084f8 <_svfiprintf_r+0x110>
 80084ca:	9207      	str	r2, [sp, #28]
 80084cc:	e014      	b.n	80084f8 <_svfiprintf_r+0x110>
 80084ce:	eba0 0308 	sub.w	r3, r0, r8
 80084d2:	fa09 f303 	lsl.w	r3, r9, r3
 80084d6:	4313      	orrs	r3, r2
 80084d8:	9304      	str	r3, [sp, #16]
 80084da:	46a2      	mov	sl, r4
 80084dc:	e7d2      	b.n	8008484 <_svfiprintf_r+0x9c>
 80084de:	9b03      	ldr	r3, [sp, #12]
 80084e0:	1d19      	adds	r1, r3, #4
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	9103      	str	r1, [sp, #12]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	bfbb      	ittet	lt
 80084ea:	425b      	neglt	r3, r3
 80084ec:	f042 0202 	orrlt.w	r2, r2, #2
 80084f0:	9307      	strge	r3, [sp, #28]
 80084f2:	9307      	strlt	r3, [sp, #28]
 80084f4:	bfb8      	it	lt
 80084f6:	9204      	strlt	r2, [sp, #16]
 80084f8:	7823      	ldrb	r3, [r4, #0]
 80084fa:	2b2e      	cmp	r3, #46	; 0x2e
 80084fc:	d10c      	bne.n	8008518 <_svfiprintf_r+0x130>
 80084fe:	7863      	ldrb	r3, [r4, #1]
 8008500:	2b2a      	cmp	r3, #42	; 0x2a
 8008502:	d134      	bne.n	800856e <_svfiprintf_r+0x186>
 8008504:	9b03      	ldr	r3, [sp, #12]
 8008506:	1d1a      	adds	r2, r3, #4
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	9203      	str	r2, [sp, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	bfb8      	it	lt
 8008510:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008514:	3402      	adds	r4, #2
 8008516:	9305      	str	r3, [sp, #20]
 8008518:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80085e0 <_svfiprintf_r+0x1f8>
 800851c:	7821      	ldrb	r1, [r4, #0]
 800851e:	2203      	movs	r2, #3
 8008520:	4650      	mov	r0, sl
 8008522:	f7f7 fe55 	bl	80001d0 <memchr>
 8008526:	b138      	cbz	r0, 8008538 <_svfiprintf_r+0x150>
 8008528:	9b04      	ldr	r3, [sp, #16]
 800852a:	eba0 000a 	sub.w	r0, r0, sl
 800852e:	2240      	movs	r2, #64	; 0x40
 8008530:	4082      	lsls	r2, r0
 8008532:	4313      	orrs	r3, r2
 8008534:	3401      	adds	r4, #1
 8008536:	9304      	str	r3, [sp, #16]
 8008538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800853c:	4825      	ldr	r0, [pc, #148]	; (80085d4 <_svfiprintf_r+0x1ec>)
 800853e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008542:	2206      	movs	r2, #6
 8008544:	f7f7 fe44 	bl	80001d0 <memchr>
 8008548:	2800      	cmp	r0, #0
 800854a:	d038      	beq.n	80085be <_svfiprintf_r+0x1d6>
 800854c:	4b22      	ldr	r3, [pc, #136]	; (80085d8 <_svfiprintf_r+0x1f0>)
 800854e:	bb1b      	cbnz	r3, 8008598 <_svfiprintf_r+0x1b0>
 8008550:	9b03      	ldr	r3, [sp, #12]
 8008552:	3307      	adds	r3, #7
 8008554:	f023 0307 	bic.w	r3, r3, #7
 8008558:	3308      	adds	r3, #8
 800855a:	9303      	str	r3, [sp, #12]
 800855c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800855e:	4433      	add	r3, r6
 8008560:	9309      	str	r3, [sp, #36]	; 0x24
 8008562:	e768      	b.n	8008436 <_svfiprintf_r+0x4e>
 8008564:	fb0c 3202 	mla	r2, ip, r2, r3
 8008568:	460c      	mov	r4, r1
 800856a:	2001      	movs	r0, #1
 800856c:	e7a6      	b.n	80084bc <_svfiprintf_r+0xd4>
 800856e:	2300      	movs	r3, #0
 8008570:	3401      	adds	r4, #1
 8008572:	9305      	str	r3, [sp, #20]
 8008574:	4619      	mov	r1, r3
 8008576:	f04f 0c0a 	mov.w	ip, #10
 800857a:	4620      	mov	r0, r4
 800857c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008580:	3a30      	subs	r2, #48	; 0x30
 8008582:	2a09      	cmp	r2, #9
 8008584:	d903      	bls.n	800858e <_svfiprintf_r+0x1a6>
 8008586:	2b00      	cmp	r3, #0
 8008588:	d0c6      	beq.n	8008518 <_svfiprintf_r+0x130>
 800858a:	9105      	str	r1, [sp, #20]
 800858c:	e7c4      	b.n	8008518 <_svfiprintf_r+0x130>
 800858e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008592:	4604      	mov	r4, r0
 8008594:	2301      	movs	r3, #1
 8008596:	e7f0      	b.n	800857a <_svfiprintf_r+0x192>
 8008598:	ab03      	add	r3, sp, #12
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	462a      	mov	r2, r5
 800859e:	4b0f      	ldr	r3, [pc, #60]	; (80085dc <_svfiprintf_r+0x1f4>)
 80085a0:	a904      	add	r1, sp, #16
 80085a2:	4638      	mov	r0, r7
 80085a4:	f7fe fb5a 	bl	8006c5c <_printf_float>
 80085a8:	1c42      	adds	r2, r0, #1
 80085aa:	4606      	mov	r6, r0
 80085ac:	d1d6      	bne.n	800855c <_svfiprintf_r+0x174>
 80085ae:	89ab      	ldrh	r3, [r5, #12]
 80085b0:	065b      	lsls	r3, r3, #25
 80085b2:	f53f af2d 	bmi.w	8008410 <_svfiprintf_r+0x28>
 80085b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085b8:	b01d      	add	sp, #116	; 0x74
 80085ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085be:	ab03      	add	r3, sp, #12
 80085c0:	9300      	str	r3, [sp, #0]
 80085c2:	462a      	mov	r2, r5
 80085c4:	4b05      	ldr	r3, [pc, #20]	; (80085dc <_svfiprintf_r+0x1f4>)
 80085c6:	a904      	add	r1, sp, #16
 80085c8:	4638      	mov	r0, r7
 80085ca:	f7fe fdeb 	bl	80071a4 <_printf_i>
 80085ce:	e7eb      	b.n	80085a8 <_svfiprintf_r+0x1c0>
 80085d0:	080099d5 	.word	0x080099d5
 80085d4:	080099df 	.word	0x080099df
 80085d8:	08006c5d 	.word	0x08006c5d
 80085dc:	08008335 	.word	0x08008335
 80085e0:	080099db 	.word	0x080099db

080085e4 <malloc>:
 80085e4:	4b02      	ldr	r3, [pc, #8]	; (80085f0 <malloc+0xc>)
 80085e6:	4601      	mov	r1, r0
 80085e8:	6818      	ldr	r0, [r3, #0]
 80085ea:	f000 b823 	b.w	8008634 <_malloc_r>
 80085ee:	bf00      	nop
 80085f0:	20000078 	.word	0x20000078

080085f4 <sbrk_aligned>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	4e0e      	ldr	r6, [pc, #56]	; (8008630 <sbrk_aligned+0x3c>)
 80085f8:	460c      	mov	r4, r1
 80085fa:	6831      	ldr	r1, [r6, #0]
 80085fc:	4605      	mov	r5, r0
 80085fe:	b911      	cbnz	r1, 8008606 <sbrk_aligned+0x12>
 8008600:	f000 fd8e 	bl	8009120 <_sbrk_r>
 8008604:	6030      	str	r0, [r6, #0]
 8008606:	4621      	mov	r1, r4
 8008608:	4628      	mov	r0, r5
 800860a:	f000 fd89 	bl	8009120 <_sbrk_r>
 800860e:	1c43      	adds	r3, r0, #1
 8008610:	d00a      	beq.n	8008628 <sbrk_aligned+0x34>
 8008612:	1cc4      	adds	r4, r0, #3
 8008614:	f024 0403 	bic.w	r4, r4, #3
 8008618:	42a0      	cmp	r0, r4
 800861a:	d007      	beq.n	800862c <sbrk_aligned+0x38>
 800861c:	1a21      	subs	r1, r4, r0
 800861e:	4628      	mov	r0, r5
 8008620:	f000 fd7e 	bl	8009120 <_sbrk_r>
 8008624:	3001      	adds	r0, #1
 8008626:	d101      	bne.n	800862c <sbrk_aligned+0x38>
 8008628:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800862c:	4620      	mov	r0, r4
 800862e:	bd70      	pop	{r4, r5, r6, pc}
 8008630:	20000bb4 	.word	0x20000bb4

08008634 <_malloc_r>:
 8008634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008638:	1ccd      	adds	r5, r1, #3
 800863a:	f025 0503 	bic.w	r5, r5, #3
 800863e:	3508      	adds	r5, #8
 8008640:	2d0c      	cmp	r5, #12
 8008642:	bf38      	it	cc
 8008644:	250c      	movcc	r5, #12
 8008646:	2d00      	cmp	r5, #0
 8008648:	4607      	mov	r7, r0
 800864a:	db01      	blt.n	8008650 <_malloc_r+0x1c>
 800864c:	42a9      	cmp	r1, r5
 800864e:	d905      	bls.n	800865c <_malloc_r+0x28>
 8008650:	230c      	movs	r3, #12
 8008652:	603b      	str	r3, [r7, #0]
 8008654:	2600      	movs	r6, #0
 8008656:	4630      	mov	r0, r6
 8008658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800865c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008730 <_malloc_r+0xfc>
 8008660:	f000 f916 	bl	8008890 <__malloc_lock>
 8008664:	f8d8 3000 	ldr.w	r3, [r8]
 8008668:	461c      	mov	r4, r3
 800866a:	bb5c      	cbnz	r4, 80086c4 <_malloc_r+0x90>
 800866c:	4629      	mov	r1, r5
 800866e:	4638      	mov	r0, r7
 8008670:	f7ff ffc0 	bl	80085f4 <sbrk_aligned>
 8008674:	1c43      	adds	r3, r0, #1
 8008676:	4604      	mov	r4, r0
 8008678:	d155      	bne.n	8008726 <_malloc_r+0xf2>
 800867a:	f8d8 4000 	ldr.w	r4, [r8]
 800867e:	4626      	mov	r6, r4
 8008680:	2e00      	cmp	r6, #0
 8008682:	d145      	bne.n	8008710 <_malloc_r+0xdc>
 8008684:	2c00      	cmp	r4, #0
 8008686:	d048      	beq.n	800871a <_malloc_r+0xe6>
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	4631      	mov	r1, r6
 800868c:	4638      	mov	r0, r7
 800868e:	eb04 0903 	add.w	r9, r4, r3
 8008692:	f000 fd45 	bl	8009120 <_sbrk_r>
 8008696:	4581      	cmp	r9, r0
 8008698:	d13f      	bne.n	800871a <_malloc_r+0xe6>
 800869a:	6821      	ldr	r1, [r4, #0]
 800869c:	1a6d      	subs	r5, r5, r1
 800869e:	4629      	mov	r1, r5
 80086a0:	4638      	mov	r0, r7
 80086a2:	f7ff ffa7 	bl	80085f4 <sbrk_aligned>
 80086a6:	3001      	adds	r0, #1
 80086a8:	d037      	beq.n	800871a <_malloc_r+0xe6>
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	442b      	add	r3, r5
 80086ae:	6023      	str	r3, [r4, #0]
 80086b0:	f8d8 3000 	ldr.w	r3, [r8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d038      	beq.n	800872a <_malloc_r+0xf6>
 80086b8:	685a      	ldr	r2, [r3, #4]
 80086ba:	42a2      	cmp	r2, r4
 80086bc:	d12b      	bne.n	8008716 <_malloc_r+0xe2>
 80086be:	2200      	movs	r2, #0
 80086c0:	605a      	str	r2, [r3, #4]
 80086c2:	e00f      	b.n	80086e4 <_malloc_r+0xb0>
 80086c4:	6822      	ldr	r2, [r4, #0]
 80086c6:	1b52      	subs	r2, r2, r5
 80086c8:	d41f      	bmi.n	800870a <_malloc_r+0xd6>
 80086ca:	2a0b      	cmp	r2, #11
 80086cc:	d917      	bls.n	80086fe <_malloc_r+0xca>
 80086ce:	1961      	adds	r1, r4, r5
 80086d0:	42a3      	cmp	r3, r4
 80086d2:	6025      	str	r5, [r4, #0]
 80086d4:	bf18      	it	ne
 80086d6:	6059      	strne	r1, [r3, #4]
 80086d8:	6863      	ldr	r3, [r4, #4]
 80086da:	bf08      	it	eq
 80086dc:	f8c8 1000 	streq.w	r1, [r8]
 80086e0:	5162      	str	r2, [r4, r5]
 80086e2:	604b      	str	r3, [r1, #4]
 80086e4:	4638      	mov	r0, r7
 80086e6:	f104 060b 	add.w	r6, r4, #11
 80086ea:	f000 f8d7 	bl	800889c <__malloc_unlock>
 80086ee:	f026 0607 	bic.w	r6, r6, #7
 80086f2:	1d23      	adds	r3, r4, #4
 80086f4:	1af2      	subs	r2, r6, r3
 80086f6:	d0ae      	beq.n	8008656 <_malloc_r+0x22>
 80086f8:	1b9b      	subs	r3, r3, r6
 80086fa:	50a3      	str	r3, [r4, r2]
 80086fc:	e7ab      	b.n	8008656 <_malloc_r+0x22>
 80086fe:	42a3      	cmp	r3, r4
 8008700:	6862      	ldr	r2, [r4, #4]
 8008702:	d1dd      	bne.n	80086c0 <_malloc_r+0x8c>
 8008704:	f8c8 2000 	str.w	r2, [r8]
 8008708:	e7ec      	b.n	80086e4 <_malloc_r+0xb0>
 800870a:	4623      	mov	r3, r4
 800870c:	6864      	ldr	r4, [r4, #4]
 800870e:	e7ac      	b.n	800866a <_malloc_r+0x36>
 8008710:	4634      	mov	r4, r6
 8008712:	6876      	ldr	r6, [r6, #4]
 8008714:	e7b4      	b.n	8008680 <_malloc_r+0x4c>
 8008716:	4613      	mov	r3, r2
 8008718:	e7cc      	b.n	80086b4 <_malloc_r+0x80>
 800871a:	230c      	movs	r3, #12
 800871c:	603b      	str	r3, [r7, #0]
 800871e:	4638      	mov	r0, r7
 8008720:	f000 f8bc 	bl	800889c <__malloc_unlock>
 8008724:	e797      	b.n	8008656 <_malloc_r+0x22>
 8008726:	6025      	str	r5, [r4, #0]
 8008728:	e7dc      	b.n	80086e4 <_malloc_r+0xb0>
 800872a:	605b      	str	r3, [r3, #4]
 800872c:	deff      	udf	#255	; 0xff
 800872e:	bf00      	nop
 8008730:	20000bb0 	.word	0x20000bb0

08008734 <__sflush_r>:
 8008734:	898a      	ldrh	r2, [r1, #12]
 8008736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800873a:	4605      	mov	r5, r0
 800873c:	0710      	lsls	r0, r2, #28
 800873e:	460c      	mov	r4, r1
 8008740:	d458      	bmi.n	80087f4 <__sflush_r+0xc0>
 8008742:	684b      	ldr	r3, [r1, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	dc05      	bgt.n	8008754 <__sflush_r+0x20>
 8008748:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800874a:	2b00      	cmp	r3, #0
 800874c:	dc02      	bgt.n	8008754 <__sflush_r+0x20>
 800874e:	2000      	movs	r0, #0
 8008750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008756:	2e00      	cmp	r6, #0
 8008758:	d0f9      	beq.n	800874e <__sflush_r+0x1a>
 800875a:	2300      	movs	r3, #0
 800875c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008760:	682f      	ldr	r7, [r5, #0]
 8008762:	6a21      	ldr	r1, [r4, #32]
 8008764:	602b      	str	r3, [r5, #0]
 8008766:	d032      	beq.n	80087ce <__sflush_r+0x9a>
 8008768:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800876a:	89a3      	ldrh	r3, [r4, #12]
 800876c:	075a      	lsls	r2, r3, #29
 800876e:	d505      	bpl.n	800877c <__sflush_r+0x48>
 8008770:	6863      	ldr	r3, [r4, #4]
 8008772:	1ac0      	subs	r0, r0, r3
 8008774:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008776:	b10b      	cbz	r3, 800877c <__sflush_r+0x48>
 8008778:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800877a:	1ac0      	subs	r0, r0, r3
 800877c:	2300      	movs	r3, #0
 800877e:	4602      	mov	r2, r0
 8008780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008782:	6a21      	ldr	r1, [r4, #32]
 8008784:	4628      	mov	r0, r5
 8008786:	47b0      	blx	r6
 8008788:	1c43      	adds	r3, r0, #1
 800878a:	89a3      	ldrh	r3, [r4, #12]
 800878c:	d106      	bne.n	800879c <__sflush_r+0x68>
 800878e:	6829      	ldr	r1, [r5, #0]
 8008790:	291d      	cmp	r1, #29
 8008792:	d82b      	bhi.n	80087ec <__sflush_r+0xb8>
 8008794:	4a29      	ldr	r2, [pc, #164]	; (800883c <__sflush_r+0x108>)
 8008796:	410a      	asrs	r2, r1
 8008798:	07d6      	lsls	r6, r2, #31
 800879a:	d427      	bmi.n	80087ec <__sflush_r+0xb8>
 800879c:	2200      	movs	r2, #0
 800879e:	6062      	str	r2, [r4, #4]
 80087a0:	04d9      	lsls	r1, r3, #19
 80087a2:	6922      	ldr	r2, [r4, #16]
 80087a4:	6022      	str	r2, [r4, #0]
 80087a6:	d504      	bpl.n	80087b2 <__sflush_r+0x7e>
 80087a8:	1c42      	adds	r2, r0, #1
 80087aa:	d101      	bne.n	80087b0 <__sflush_r+0x7c>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	b903      	cbnz	r3, 80087b2 <__sflush_r+0x7e>
 80087b0:	6560      	str	r0, [r4, #84]	; 0x54
 80087b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087b4:	602f      	str	r7, [r5, #0]
 80087b6:	2900      	cmp	r1, #0
 80087b8:	d0c9      	beq.n	800874e <__sflush_r+0x1a>
 80087ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087be:	4299      	cmp	r1, r3
 80087c0:	d002      	beq.n	80087c8 <__sflush_r+0x94>
 80087c2:	4628      	mov	r0, r5
 80087c4:	f000 fd02 	bl	80091cc <_free_r>
 80087c8:	2000      	movs	r0, #0
 80087ca:	6360      	str	r0, [r4, #52]	; 0x34
 80087cc:	e7c0      	b.n	8008750 <__sflush_r+0x1c>
 80087ce:	2301      	movs	r3, #1
 80087d0:	4628      	mov	r0, r5
 80087d2:	47b0      	blx	r6
 80087d4:	1c41      	adds	r1, r0, #1
 80087d6:	d1c8      	bne.n	800876a <__sflush_r+0x36>
 80087d8:	682b      	ldr	r3, [r5, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0c5      	beq.n	800876a <__sflush_r+0x36>
 80087de:	2b1d      	cmp	r3, #29
 80087e0:	d001      	beq.n	80087e6 <__sflush_r+0xb2>
 80087e2:	2b16      	cmp	r3, #22
 80087e4:	d101      	bne.n	80087ea <__sflush_r+0xb6>
 80087e6:	602f      	str	r7, [r5, #0]
 80087e8:	e7b1      	b.n	800874e <__sflush_r+0x1a>
 80087ea:	89a3      	ldrh	r3, [r4, #12]
 80087ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087f0:	81a3      	strh	r3, [r4, #12]
 80087f2:	e7ad      	b.n	8008750 <__sflush_r+0x1c>
 80087f4:	690f      	ldr	r7, [r1, #16]
 80087f6:	2f00      	cmp	r7, #0
 80087f8:	d0a9      	beq.n	800874e <__sflush_r+0x1a>
 80087fa:	0793      	lsls	r3, r2, #30
 80087fc:	680e      	ldr	r6, [r1, #0]
 80087fe:	bf08      	it	eq
 8008800:	694b      	ldreq	r3, [r1, #20]
 8008802:	600f      	str	r7, [r1, #0]
 8008804:	bf18      	it	ne
 8008806:	2300      	movne	r3, #0
 8008808:	eba6 0807 	sub.w	r8, r6, r7
 800880c:	608b      	str	r3, [r1, #8]
 800880e:	f1b8 0f00 	cmp.w	r8, #0
 8008812:	dd9c      	ble.n	800874e <__sflush_r+0x1a>
 8008814:	6a21      	ldr	r1, [r4, #32]
 8008816:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008818:	4643      	mov	r3, r8
 800881a:	463a      	mov	r2, r7
 800881c:	4628      	mov	r0, r5
 800881e:	47b0      	blx	r6
 8008820:	2800      	cmp	r0, #0
 8008822:	dc06      	bgt.n	8008832 <__sflush_r+0xfe>
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800882a:	81a3      	strh	r3, [r4, #12]
 800882c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008830:	e78e      	b.n	8008750 <__sflush_r+0x1c>
 8008832:	4407      	add	r7, r0
 8008834:	eba8 0800 	sub.w	r8, r8, r0
 8008838:	e7e9      	b.n	800880e <__sflush_r+0xda>
 800883a:	bf00      	nop
 800883c:	dfbffffe 	.word	0xdfbffffe

08008840 <_fflush_r>:
 8008840:	b538      	push	{r3, r4, r5, lr}
 8008842:	690b      	ldr	r3, [r1, #16]
 8008844:	4605      	mov	r5, r0
 8008846:	460c      	mov	r4, r1
 8008848:	b913      	cbnz	r3, 8008850 <_fflush_r+0x10>
 800884a:	2500      	movs	r5, #0
 800884c:	4628      	mov	r0, r5
 800884e:	bd38      	pop	{r3, r4, r5, pc}
 8008850:	b118      	cbz	r0, 800885a <_fflush_r+0x1a>
 8008852:	6a03      	ldr	r3, [r0, #32]
 8008854:	b90b      	cbnz	r3, 800885a <_fflush_r+0x1a>
 8008856:	f7fe fe73 	bl	8007540 <__sinit>
 800885a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d0f3      	beq.n	800884a <_fflush_r+0xa>
 8008862:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008864:	07d0      	lsls	r0, r2, #31
 8008866:	d404      	bmi.n	8008872 <_fflush_r+0x32>
 8008868:	0599      	lsls	r1, r3, #22
 800886a:	d402      	bmi.n	8008872 <_fflush_r+0x32>
 800886c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800886e:	f7fe fed4 	bl	800761a <__retarget_lock_acquire_recursive>
 8008872:	4628      	mov	r0, r5
 8008874:	4621      	mov	r1, r4
 8008876:	f7ff ff5d 	bl	8008734 <__sflush_r>
 800887a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800887c:	07da      	lsls	r2, r3, #31
 800887e:	4605      	mov	r5, r0
 8008880:	d4e4      	bmi.n	800884c <_fflush_r+0xc>
 8008882:	89a3      	ldrh	r3, [r4, #12]
 8008884:	059b      	lsls	r3, r3, #22
 8008886:	d4e1      	bmi.n	800884c <_fflush_r+0xc>
 8008888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800888a:	f7fe fec7 	bl	800761c <__retarget_lock_release_recursive>
 800888e:	e7dd      	b.n	800884c <_fflush_r+0xc>

08008890 <__malloc_lock>:
 8008890:	4801      	ldr	r0, [pc, #4]	; (8008898 <__malloc_lock+0x8>)
 8008892:	f7fe bec2 	b.w	800761a <__retarget_lock_acquire_recursive>
 8008896:	bf00      	nop
 8008898:	20000bac 	.word	0x20000bac

0800889c <__malloc_unlock>:
 800889c:	4801      	ldr	r0, [pc, #4]	; (80088a4 <__malloc_unlock+0x8>)
 800889e:	f7fe bebd 	b.w	800761c <__retarget_lock_release_recursive>
 80088a2:	bf00      	nop
 80088a4:	20000bac 	.word	0x20000bac

080088a8 <_Balloc>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	69c6      	ldr	r6, [r0, #28]
 80088ac:	4604      	mov	r4, r0
 80088ae:	460d      	mov	r5, r1
 80088b0:	b976      	cbnz	r6, 80088d0 <_Balloc+0x28>
 80088b2:	2010      	movs	r0, #16
 80088b4:	f7ff fe96 	bl	80085e4 <malloc>
 80088b8:	4602      	mov	r2, r0
 80088ba:	61e0      	str	r0, [r4, #28]
 80088bc:	b920      	cbnz	r0, 80088c8 <_Balloc+0x20>
 80088be:	4b18      	ldr	r3, [pc, #96]	; (8008920 <_Balloc+0x78>)
 80088c0:	4818      	ldr	r0, [pc, #96]	; (8008924 <_Balloc+0x7c>)
 80088c2:	216b      	movs	r1, #107	; 0x6b
 80088c4:	f000 fc4e 	bl	8009164 <__assert_func>
 80088c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088cc:	6006      	str	r6, [r0, #0]
 80088ce:	60c6      	str	r6, [r0, #12]
 80088d0:	69e6      	ldr	r6, [r4, #28]
 80088d2:	68f3      	ldr	r3, [r6, #12]
 80088d4:	b183      	cbz	r3, 80088f8 <_Balloc+0x50>
 80088d6:	69e3      	ldr	r3, [r4, #28]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088de:	b9b8      	cbnz	r0, 8008910 <_Balloc+0x68>
 80088e0:	2101      	movs	r1, #1
 80088e2:	fa01 f605 	lsl.w	r6, r1, r5
 80088e6:	1d72      	adds	r2, r6, #5
 80088e8:	0092      	lsls	r2, r2, #2
 80088ea:	4620      	mov	r0, r4
 80088ec:	f000 fc58 	bl	80091a0 <_calloc_r>
 80088f0:	b160      	cbz	r0, 800890c <_Balloc+0x64>
 80088f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088f6:	e00e      	b.n	8008916 <_Balloc+0x6e>
 80088f8:	2221      	movs	r2, #33	; 0x21
 80088fa:	2104      	movs	r1, #4
 80088fc:	4620      	mov	r0, r4
 80088fe:	f000 fc4f 	bl	80091a0 <_calloc_r>
 8008902:	69e3      	ldr	r3, [r4, #28]
 8008904:	60f0      	str	r0, [r6, #12]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1e4      	bne.n	80088d6 <_Balloc+0x2e>
 800890c:	2000      	movs	r0, #0
 800890e:	bd70      	pop	{r4, r5, r6, pc}
 8008910:	6802      	ldr	r2, [r0, #0]
 8008912:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008916:	2300      	movs	r3, #0
 8008918:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800891c:	e7f7      	b.n	800890e <_Balloc+0x66>
 800891e:	bf00      	nop
 8008920:	08009955 	.word	0x08009955
 8008924:	080099e6 	.word	0x080099e6

08008928 <_Bfree>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	69c6      	ldr	r6, [r0, #28]
 800892c:	4605      	mov	r5, r0
 800892e:	460c      	mov	r4, r1
 8008930:	b976      	cbnz	r6, 8008950 <_Bfree+0x28>
 8008932:	2010      	movs	r0, #16
 8008934:	f7ff fe56 	bl	80085e4 <malloc>
 8008938:	4602      	mov	r2, r0
 800893a:	61e8      	str	r0, [r5, #28]
 800893c:	b920      	cbnz	r0, 8008948 <_Bfree+0x20>
 800893e:	4b09      	ldr	r3, [pc, #36]	; (8008964 <_Bfree+0x3c>)
 8008940:	4809      	ldr	r0, [pc, #36]	; (8008968 <_Bfree+0x40>)
 8008942:	218f      	movs	r1, #143	; 0x8f
 8008944:	f000 fc0e 	bl	8009164 <__assert_func>
 8008948:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800894c:	6006      	str	r6, [r0, #0]
 800894e:	60c6      	str	r6, [r0, #12]
 8008950:	b13c      	cbz	r4, 8008962 <_Bfree+0x3a>
 8008952:	69eb      	ldr	r3, [r5, #28]
 8008954:	6862      	ldr	r2, [r4, #4]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800895c:	6021      	str	r1, [r4, #0]
 800895e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008962:	bd70      	pop	{r4, r5, r6, pc}
 8008964:	08009955 	.word	0x08009955
 8008968:	080099e6 	.word	0x080099e6

0800896c <__multadd>:
 800896c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008970:	690d      	ldr	r5, [r1, #16]
 8008972:	4607      	mov	r7, r0
 8008974:	460c      	mov	r4, r1
 8008976:	461e      	mov	r6, r3
 8008978:	f101 0c14 	add.w	ip, r1, #20
 800897c:	2000      	movs	r0, #0
 800897e:	f8dc 3000 	ldr.w	r3, [ip]
 8008982:	b299      	uxth	r1, r3
 8008984:	fb02 6101 	mla	r1, r2, r1, r6
 8008988:	0c1e      	lsrs	r6, r3, #16
 800898a:	0c0b      	lsrs	r3, r1, #16
 800898c:	fb02 3306 	mla	r3, r2, r6, r3
 8008990:	b289      	uxth	r1, r1
 8008992:	3001      	adds	r0, #1
 8008994:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008998:	4285      	cmp	r5, r0
 800899a:	f84c 1b04 	str.w	r1, [ip], #4
 800899e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80089a2:	dcec      	bgt.n	800897e <__multadd+0x12>
 80089a4:	b30e      	cbz	r6, 80089ea <__multadd+0x7e>
 80089a6:	68a3      	ldr	r3, [r4, #8]
 80089a8:	42ab      	cmp	r3, r5
 80089aa:	dc19      	bgt.n	80089e0 <__multadd+0x74>
 80089ac:	6861      	ldr	r1, [r4, #4]
 80089ae:	4638      	mov	r0, r7
 80089b0:	3101      	adds	r1, #1
 80089b2:	f7ff ff79 	bl	80088a8 <_Balloc>
 80089b6:	4680      	mov	r8, r0
 80089b8:	b928      	cbnz	r0, 80089c6 <__multadd+0x5a>
 80089ba:	4602      	mov	r2, r0
 80089bc:	4b0c      	ldr	r3, [pc, #48]	; (80089f0 <__multadd+0x84>)
 80089be:	480d      	ldr	r0, [pc, #52]	; (80089f4 <__multadd+0x88>)
 80089c0:	21ba      	movs	r1, #186	; 0xba
 80089c2:	f000 fbcf 	bl	8009164 <__assert_func>
 80089c6:	6922      	ldr	r2, [r4, #16]
 80089c8:	3202      	adds	r2, #2
 80089ca:	f104 010c 	add.w	r1, r4, #12
 80089ce:	0092      	lsls	r2, r2, #2
 80089d0:	300c      	adds	r0, #12
 80089d2:	f7fe fe24 	bl	800761e <memcpy>
 80089d6:	4621      	mov	r1, r4
 80089d8:	4638      	mov	r0, r7
 80089da:	f7ff ffa5 	bl	8008928 <_Bfree>
 80089de:	4644      	mov	r4, r8
 80089e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089e4:	3501      	adds	r5, #1
 80089e6:	615e      	str	r6, [r3, #20]
 80089e8:	6125      	str	r5, [r4, #16]
 80089ea:	4620      	mov	r0, r4
 80089ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f0:	080099c4 	.word	0x080099c4
 80089f4:	080099e6 	.word	0x080099e6

080089f8 <__hi0bits>:
 80089f8:	0c03      	lsrs	r3, r0, #16
 80089fa:	041b      	lsls	r3, r3, #16
 80089fc:	b9d3      	cbnz	r3, 8008a34 <__hi0bits+0x3c>
 80089fe:	0400      	lsls	r0, r0, #16
 8008a00:	2310      	movs	r3, #16
 8008a02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a06:	bf04      	itt	eq
 8008a08:	0200      	lsleq	r0, r0, #8
 8008a0a:	3308      	addeq	r3, #8
 8008a0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a10:	bf04      	itt	eq
 8008a12:	0100      	lsleq	r0, r0, #4
 8008a14:	3304      	addeq	r3, #4
 8008a16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a1a:	bf04      	itt	eq
 8008a1c:	0080      	lsleq	r0, r0, #2
 8008a1e:	3302      	addeq	r3, #2
 8008a20:	2800      	cmp	r0, #0
 8008a22:	db05      	blt.n	8008a30 <__hi0bits+0x38>
 8008a24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a28:	f103 0301 	add.w	r3, r3, #1
 8008a2c:	bf08      	it	eq
 8008a2e:	2320      	moveq	r3, #32
 8008a30:	4618      	mov	r0, r3
 8008a32:	4770      	bx	lr
 8008a34:	2300      	movs	r3, #0
 8008a36:	e7e4      	b.n	8008a02 <__hi0bits+0xa>

08008a38 <__lo0bits>:
 8008a38:	6803      	ldr	r3, [r0, #0]
 8008a3a:	f013 0207 	ands.w	r2, r3, #7
 8008a3e:	d00c      	beq.n	8008a5a <__lo0bits+0x22>
 8008a40:	07d9      	lsls	r1, r3, #31
 8008a42:	d422      	bmi.n	8008a8a <__lo0bits+0x52>
 8008a44:	079a      	lsls	r2, r3, #30
 8008a46:	bf49      	itett	mi
 8008a48:	085b      	lsrmi	r3, r3, #1
 8008a4a:	089b      	lsrpl	r3, r3, #2
 8008a4c:	6003      	strmi	r3, [r0, #0]
 8008a4e:	2201      	movmi	r2, #1
 8008a50:	bf5c      	itt	pl
 8008a52:	6003      	strpl	r3, [r0, #0]
 8008a54:	2202      	movpl	r2, #2
 8008a56:	4610      	mov	r0, r2
 8008a58:	4770      	bx	lr
 8008a5a:	b299      	uxth	r1, r3
 8008a5c:	b909      	cbnz	r1, 8008a62 <__lo0bits+0x2a>
 8008a5e:	0c1b      	lsrs	r3, r3, #16
 8008a60:	2210      	movs	r2, #16
 8008a62:	b2d9      	uxtb	r1, r3
 8008a64:	b909      	cbnz	r1, 8008a6a <__lo0bits+0x32>
 8008a66:	3208      	adds	r2, #8
 8008a68:	0a1b      	lsrs	r3, r3, #8
 8008a6a:	0719      	lsls	r1, r3, #28
 8008a6c:	bf04      	itt	eq
 8008a6e:	091b      	lsreq	r3, r3, #4
 8008a70:	3204      	addeq	r2, #4
 8008a72:	0799      	lsls	r1, r3, #30
 8008a74:	bf04      	itt	eq
 8008a76:	089b      	lsreq	r3, r3, #2
 8008a78:	3202      	addeq	r2, #2
 8008a7a:	07d9      	lsls	r1, r3, #31
 8008a7c:	d403      	bmi.n	8008a86 <__lo0bits+0x4e>
 8008a7e:	085b      	lsrs	r3, r3, #1
 8008a80:	f102 0201 	add.w	r2, r2, #1
 8008a84:	d003      	beq.n	8008a8e <__lo0bits+0x56>
 8008a86:	6003      	str	r3, [r0, #0]
 8008a88:	e7e5      	b.n	8008a56 <__lo0bits+0x1e>
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	e7e3      	b.n	8008a56 <__lo0bits+0x1e>
 8008a8e:	2220      	movs	r2, #32
 8008a90:	e7e1      	b.n	8008a56 <__lo0bits+0x1e>
	...

08008a94 <__i2b>:
 8008a94:	b510      	push	{r4, lr}
 8008a96:	460c      	mov	r4, r1
 8008a98:	2101      	movs	r1, #1
 8008a9a:	f7ff ff05 	bl	80088a8 <_Balloc>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	b928      	cbnz	r0, 8008aae <__i2b+0x1a>
 8008aa2:	4b05      	ldr	r3, [pc, #20]	; (8008ab8 <__i2b+0x24>)
 8008aa4:	4805      	ldr	r0, [pc, #20]	; (8008abc <__i2b+0x28>)
 8008aa6:	f240 1145 	movw	r1, #325	; 0x145
 8008aaa:	f000 fb5b 	bl	8009164 <__assert_func>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	6144      	str	r4, [r0, #20]
 8008ab2:	6103      	str	r3, [r0, #16]
 8008ab4:	bd10      	pop	{r4, pc}
 8008ab6:	bf00      	nop
 8008ab8:	080099c4 	.word	0x080099c4
 8008abc:	080099e6 	.word	0x080099e6

08008ac0 <__multiply>:
 8008ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	4691      	mov	r9, r2
 8008ac6:	690a      	ldr	r2, [r1, #16]
 8008ac8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	bfb8      	it	lt
 8008ad0:	460b      	movlt	r3, r1
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	bfbc      	itt	lt
 8008ad6:	464c      	movlt	r4, r9
 8008ad8:	4699      	movlt	r9, r3
 8008ada:	6927      	ldr	r7, [r4, #16]
 8008adc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ae0:	68a3      	ldr	r3, [r4, #8]
 8008ae2:	6861      	ldr	r1, [r4, #4]
 8008ae4:	eb07 060a 	add.w	r6, r7, sl
 8008ae8:	42b3      	cmp	r3, r6
 8008aea:	b085      	sub	sp, #20
 8008aec:	bfb8      	it	lt
 8008aee:	3101      	addlt	r1, #1
 8008af0:	f7ff feda 	bl	80088a8 <_Balloc>
 8008af4:	b930      	cbnz	r0, 8008b04 <__multiply+0x44>
 8008af6:	4602      	mov	r2, r0
 8008af8:	4b44      	ldr	r3, [pc, #272]	; (8008c0c <__multiply+0x14c>)
 8008afa:	4845      	ldr	r0, [pc, #276]	; (8008c10 <__multiply+0x150>)
 8008afc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008b00:	f000 fb30 	bl	8009164 <__assert_func>
 8008b04:	f100 0514 	add.w	r5, r0, #20
 8008b08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b0c:	462b      	mov	r3, r5
 8008b0e:	2200      	movs	r2, #0
 8008b10:	4543      	cmp	r3, r8
 8008b12:	d321      	bcc.n	8008b58 <__multiply+0x98>
 8008b14:	f104 0314 	add.w	r3, r4, #20
 8008b18:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008b1c:	f109 0314 	add.w	r3, r9, #20
 8008b20:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008b24:	9202      	str	r2, [sp, #8]
 8008b26:	1b3a      	subs	r2, r7, r4
 8008b28:	3a15      	subs	r2, #21
 8008b2a:	f022 0203 	bic.w	r2, r2, #3
 8008b2e:	3204      	adds	r2, #4
 8008b30:	f104 0115 	add.w	r1, r4, #21
 8008b34:	428f      	cmp	r7, r1
 8008b36:	bf38      	it	cc
 8008b38:	2204      	movcc	r2, #4
 8008b3a:	9201      	str	r2, [sp, #4]
 8008b3c:	9a02      	ldr	r2, [sp, #8]
 8008b3e:	9303      	str	r3, [sp, #12]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d80c      	bhi.n	8008b5e <__multiply+0x9e>
 8008b44:	2e00      	cmp	r6, #0
 8008b46:	dd03      	ble.n	8008b50 <__multiply+0x90>
 8008b48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d05b      	beq.n	8008c08 <__multiply+0x148>
 8008b50:	6106      	str	r6, [r0, #16]
 8008b52:	b005      	add	sp, #20
 8008b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b58:	f843 2b04 	str.w	r2, [r3], #4
 8008b5c:	e7d8      	b.n	8008b10 <__multiply+0x50>
 8008b5e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b62:	f1ba 0f00 	cmp.w	sl, #0
 8008b66:	d024      	beq.n	8008bb2 <__multiply+0xf2>
 8008b68:	f104 0e14 	add.w	lr, r4, #20
 8008b6c:	46a9      	mov	r9, r5
 8008b6e:	f04f 0c00 	mov.w	ip, #0
 8008b72:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008b76:	f8d9 1000 	ldr.w	r1, [r9]
 8008b7a:	fa1f fb82 	uxth.w	fp, r2
 8008b7e:	b289      	uxth	r1, r1
 8008b80:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b84:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008b88:	f8d9 2000 	ldr.w	r2, [r9]
 8008b8c:	4461      	add	r1, ip
 8008b8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b92:	fb0a c20b 	mla	r2, sl, fp, ip
 8008b96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b9a:	b289      	uxth	r1, r1
 8008b9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ba0:	4577      	cmp	r7, lr
 8008ba2:	f849 1b04 	str.w	r1, [r9], #4
 8008ba6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008baa:	d8e2      	bhi.n	8008b72 <__multiply+0xb2>
 8008bac:	9a01      	ldr	r2, [sp, #4]
 8008bae:	f845 c002 	str.w	ip, [r5, r2]
 8008bb2:	9a03      	ldr	r2, [sp, #12]
 8008bb4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008bb8:	3304      	adds	r3, #4
 8008bba:	f1b9 0f00 	cmp.w	r9, #0
 8008bbe:	d021      	beq.n	8008c04 <__multiply+0x144>
 8008bc0:	6829      	ldr	r1, [r5, #0]
 8008bc2:	f104 0c14 	add.w	ip, r4, #20
 8008bc6:	46ae      	mov	lr, r5
 8008bc8:	f04f 0a00 	mov.w	sl, #0
 8008bcc:	f8bc b000 	ldrh.w	fp, [ip]
 8008bd0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008bd4:	fb09 220b 	mla	r2, r9, fp, r2
 8008bd8:	4452      	add	r2, sl
 8008bda:	b289      	uxth	r1, r1
 8008bdc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008be0:	f84e 1b04 	str.w	r1, [lr], #4
 8008be4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008be8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008bec:	f8be 1000 	ldrh.w	r1, [lr]
 8008bf0:	fb09 110a 	mla	r1, r9, sl, r1
 8008bf4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008bf8:	4567      	cmp	r7, ip
 8008bfa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008bfe:	d8e5      	bhi.n	8008bcc <__multiply+0x10c>
 8008c00:	9a01      	ldr	r2, [sp, #4]
 8008c02:	50a9      	str	r1, [r5, r2]
 8008c04:	3504      	adds	r5, #4
 8008c06:	e799      	b.n	8008b3c <__multiply+0x7c>
 8008c08:	3e01      	subs	r6, #1
 8008c0a:	e79b      	b.n	8008b44 <__multiply+0x84>
 8008c0c:	080099c4 	.word	0x080099c4
 8008c10:	080099e6 	.word	0x080099e6

08008c14 <__pow5mult>:
 8008c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c18:	4615      	mov	r5, r2
 8008c1a:	f012 0203 	ands.w	r2, r2, #3
 8008c1e:	4606      	mov	r6, r0
 8008c20:	460f      	mov	r7, r1
 8008c22:	d007      	beq.n	8008c34 <__pow5mult+0x20>
 8008c24:	4c25      	ldr	r4, [pc, #148]	; (8008cbc <__pow5mult+0xa8>)
 8008c26:	3a01      	subs	r2, #1
 8008c28:	2300      	movs	r3, #0
 8008c2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c2e:	f7ff fe9d 	bl	800896c <__multadd>
 8008c32:	4607      	mov	r7, r0
 8008c34:	10ad      	asrs	r5, r5, #2
 8008c36:	d03d      	beq.n	8008cb4 <__pow5mult+0xa0>
 8008c38:	69f4      	ldr	r4, [r6, #28]
 8008c3a:	b97c      	cbnz	r4, 8008c5c <__pow5mult+0x48>
 8008c3c:	2010      	movs	r0, #16
 8008c3e:	f7ff fcd1 	bl	80085e4 <malloc>
 8008c42:	4602      	mov	r2, r0
 8008c44:	61f0      	str	r0, [r6, #28]
 8008c46:	b928      	cbnz	r0, 8008c54 <__pow5mult+0x40>
 8008c48:	4b1d      	ldr	r3, [pc, #116]	; (8008cc0 <__pow5mult+0xac>)
 8008c4a:	481e      	ldr	r0, [pc, #120]	; (8008cc4 <__pow5mult+0xb0>)
 8008c4c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008c50:	f000 fa88 	bl	8009164 <__assert_func>
 8008c54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c58:	6004      	str	r4, [r0, #0]
 8008c5a:	60c4      	str	r4, [r0, #12]
 8008c5c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008c60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c64:	b94c      	cbnz	r4, 8008c7a <__pow5mult+0x66>
 8008c66:	f240 2171 	movw	r1, #625	; 0x271
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f7ff ff12 	bl	8008a94 <__i2b>
 8008c70:	2300      	movs	r3, #0
 8008c72:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c76:	4604      	mov	r4, r0
 8008c78:	6003      	str	r3, [r0, #0]
 8008c7a:	f04f 0900 	mov.w	r9, #0
 8008c7e:	07eb      	lsls	r3, r5, #31
 8008c80:	d50a      	bpl.n	8008c98 <__pow5mult+0x84>
 8008c82:	4639      	mov	r1, r7
 8008c84:	4622      	mov	r2, r4
 8008c86:	4630      	mov	r0, r6
 8008c88:	f7ff ff1a 	bl	8008ac0 <__multiply>
 8008c8c:	4639      	mov	r1, r7
 8008c8e:	4680      	mov	r8, r0
 8008c90:	4630      	mov	r0, r6
 8008c92:	f7ff fe49 	bl	8008928 <_Bfree>
 8008c96:	4647      	mov	r7, r8
 8008c98:	106d      	asrs	r5, r5, #1
 8008c9a:	d00b      	beq.n	8008cb4 <__pow5mult+0xa0>
 8008c9c:	6820      	ldr	r0, [r4, #0]
 8008c9e:	b938      	cbnz	r0, 8008cb0 <__pow5mult+0x9c>
 8008ca0:	4622      	mov	r2, r4
 8008ca2:	4621      	mov	r1, r4
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	f7ff ff0b 	bl	8008ac0 <__multiply>
 8008caa:	6020      	str	r0, [r4, #0]
 8008cac:	f8c0 9000 	str.w	r9, [r0]
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	e7e4      	b.n	8008c7e <__pow5mult+0x6a>
 8008cb4:	4638      	mov	r0, r7
 8008cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cba:	bf00      	nop
 8008cbc:	08009b30 	.word	0x08009b30
 8008cc0:	08009955 	.word	0x08009955
 8008cc4:	080099e6 	.word	0x080099e6

08008cc8 <__lshift>:
 8008cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ccc:	460c      	mov	r4, r1
 8008cce:	6849      	ldr	r1, [r1, #4]
 8008cd0:	6923      	ldr	r3, [r4, #16]
 8008cd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cd6:	68a3      	ldr	r3, [r4, #8]
 8008cd8:	4607      	mov	r7, r0
 8008cda:	4691      	mov	r9, r2
 8008cdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ce0:	f108 0601 	add.w	r6, r8, #1
 8008ce4:	42b3      	cmp	r3, r6
 8008ce6:	db0b      	blt.n	8008d00 <__lshift+0x38>
 8008ce8:	4638      	mov	r0, r7
 8008cea:	f7ff fddd 	bl	80088a8 <_Balloc>
 8008cee:	4605      	mov	r5, r0
 8008cf0:	b948      	cbnz	r0, 8008d06 <__lshift+0x3e>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	4b28      	ldr	r3, [pc, #160]	; (8008d98 <__lshift+0xd0>)
 8008cf6:	4829      	ldr	r0, [pc, #164]	; (8008d9c <__lshift+0xd4>)
 8008cf8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008cfc:	f000 fa32 	bl	8009164 <__assert_func>
 8008d00:	3101      	adds	r1, #1
 8008d02:	005b      	lsls	r3, r3, #1
 8008d04:	e7ee      	b.n	8008ce4 <__lshift+0x1c>
 8008d06:	2300      	movs	r3, #0
 8008d08:	f100 0114 	add.w	r1, r0, #20
 8008d0c:	f100 0210 	add.w	r2, r0, #16
 8008d10:	4618      	mov	r0, r3
 8008d12:	4553      	cmp	r3, sl
 8008d14:	db33      	blt.n	8008d7e <__lshift+0xb6>
 8008d16:	6920      	ldr	r0, [r4, #16]
 8008d18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d1c:	f104 0314 	add.w	r3, r4, #20
 8008d20:	f019 091f 	ands.w	r9, r9, #31
 8008d24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d2c:	d02b      	beq.n	8008d86 <__lshift+0xbe>
 8008d2e:	f1c9 0e20 	rsb	lr, r9, #32
 8008d32:	468a      	mov	sl, r1
 8008d34:	2200      	movs	r2, #0
 8008d36:	6818      	ldr	r0, [r3, #0]
 8008d38:	fa00 f009 	lsl.w	r0, r0, r9
 8008d3c:	4310      	orrs	r0, r2
 8008d3e:	f84a 0b04 	str.w	r0, [sl], #4
 8008d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d46:	459c      	cmp	ip, r3
 8008d48:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d4c:	d8f3      	bhi.n	8008d36 <__lshift+0x6e>
 8008d4e:	ebac 0304 	sub.w	r3, ip, r4
 8008d52:	3b15      	subs	r3, #21
 8008d54:	f023 0303 	bic.w	r3, r3, #3
 8008d58:	3304      	adds	r3, #4
 8008d5a:	f104 0015 	add.w	r0, r4, #21
 8008d5e:	4584      	cmp	ip, r0
 8008d60:	bf38      	it	cc
 8008d62:	2304      	movcc	r3, #4
 8008d64:	50ca      	str	r2, [r1, r3]
 8008d66:	b10a      	cbz	r2, 8008d6c <__lshift+0xa4>
 8008d68:	f108 0602 	add.w	r6, r8, #2
 8008d6c:	3e01      	subs	r6, #1
 8008d6e:	4638      	mov	r0, r7
 8008d70:	612e      	str	r6, [r5, #16]
 8008d72:	4621      	mov	r1, r4
 8008d74:	f7ff fdd8 	bl	8008928 <_Bfree>
 8008d78:	4628      	mov	r0, r5
 8008d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d82:	3301      	adds	r3, #1
 8008d84:	e7c5      	b.n	8008d12 <__lshift+0x4a>
 8008d86:	3904      	subs	r1, #4
 8008d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d90:	459c      	cmp	ip, r3
 8008d92:	d8f9      	bhi.n	8008d88 <__lshift+0xc0>
 8008d94:	e7ea      	b.n	8008d6c <__lshift+0xa4>
 8008d96:	bf00      	nop
 8008d98:	080099c4 	.word	0x080099c4
 8008d9c:	080099e6 	.word	0x080099e6

08008da0 <__mcmp>:
 8008da0:	b530      	push	{r4, r5, lr}
 8008da2:	6902      	ldr	r2, [r0, #16]
 8008da4:	690c      	ldr	r4, [r1, #16]
 8008da6:	1b12      	subs	r2, r2, r4
 8008da8:	d10e      	bne.n	8008dc8 <__mcmp+0x28>
 8008daa:	f100 0314 	add.w	r3, r0, #20
 8008dae:	3114      	adds	r1, #20
 8008db0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008db4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008db8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008dbc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008dc0:	42a5      	cmp	r5, r4
 8008dc2:	d003      	beq.n	8008dcc <__mcmp+0x2c>
 8008dc4:	d305      	bcc.n	8008dd2 <__mcmp+0x32>
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	4610      	mov	r0, r2
 8008dca:	bd30      	pop	{r4, r5, pc}
 8008dcc:	4283      	cmp	r3, r0
 8008dce:	d3f3      	bcc.n	8008db8 <__mcmp+0x18>
 8008dd0:	e7fa      	b.n	8008dc8 <__mcmp+0x28>
 8008dd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dd6:	e7f7      	b.n	8008dc8 <__mcmp+0x28>

08008dd8 <__mdiff>:
 8008dd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	460c      	mov	r4, r1
 8008dde:	4606      	mov	r6, r0
 8008de0:	4611      	mov	r1, r2
 8008de2:	4620      	mov	r0, r4
 8008de4:	4690      	mov	r8, r2
 8008de6:	f7ff ffdb 	bl	8008da0 <__mcmp>
 8008dea:	1e05      	subs	r5, r0, #0
 8008dec:	d110      	bne.n	8008e10 <__mdiff+0x38>
 8008dee:	4629      	mov	r1, r5
 8008df0:	4630      	mov	r0, r6
 8008df2:	f7ff fd59 	bl	80088a8 <_Balloc>
 8008df6:	b930      	cbnz	r0, 8008e06 <__mdiff+0x2e>
 8008df8:	4b3a      	ldr	r3, [pc, #232]	; (8008ee4 <__mdiff+0x10c>)
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	f240 2137 	movw	r1, #567	; 0x237
 8008e00:	4839      	ldr	r0, [pc, #228]	; (8008ee8 <__mdiff+0x110>)
 8008e02:	f000 f9af 	bl	8009164 <__assert_func>
 8008e06:	2301      	movs	r3, #1
 8008e08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e10:	bfa4      	itt	ge
 8008e12:	4643      	movge	r3, r8
 8008e14:	46a0      	movge	r8, r4
 8008e16:	4630      	mov	r0, r6
 8008e18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008e1c:	bfa6      	itte	ge
 8008e1e:	461c      	movge	r4, r3
 8008e20:	2500      	movge	r5, #0
 8008e22:	2501      	movlt	r5, #1
 8008e24:	f7ff fd40 	bl	80088a8 <_Balloc>
 8008e28:	b920      	cbnz	r0, 8008e34 <__mdiff+0x5c>
 8008e2a:	4b2e      	ldr	r3, [pc, #184]	; (8008ee4 <__mdiff+0x10c>)
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	f240 2145 	movw	r1, #581	; 0x245
 8008e32:	e7e5      	b.n	8008e00 <__mdiff+0x28>
 8008e34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008e38:	6926      	ldr	r6, [r4, #16]
 8008e3a:	60c5      	str	r5, [r0, #12]
 8008e3c:	f104 0914 	add.w	r9, r4, #20
 8008e40:	f108 0514 	add.w	r5, r8, #20
 8008e44:	f100 0e14 	add.w	lr, r0, #20
 8008e48:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008e4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e50:	f108 0210 	add.w	r2, r8, #16
 8008e54:	46f2      	mov	sl, lr
 8008e56:	2100      	movs	r1, #0
 8008e58:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008e60:	fa11 f88b 	uxtah	r8, r1, fp
 8008e64:	b299      	uxth	r1, r3
 8008e66:	0c1b      	lsrs	r3, r3, #16
 8008e68:	eba8 0801 	sub.w	r8, r8, r1
 8008e6c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e70:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e74:	fa1f f888 	uxth.w	r8, r8
 8008e78:	1419      	asrs	r1, r3, #16
 8008e7a:	454e      	cmp	r6, r9
 8008e7c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e80:	f84a 3b04 	str.w	r3, [sl], #4
 8008e84:	d8e8      	bhi.n	8008e58 <__mdiff+0x80>
 8008e86:	1b33      	subs	r3, r6, r4
 8008e88:	3b15      	subs	r3, #21
 8008e8a:	f023 0303 	bic.w	r3, r3, #3
 8008e8e:	3304      	adds	r3, #4
 8008e90:	3415      	adds	r4, #21
 8008e92:	42a6      	cmp	r6, r4
 8008e94:	bf38      	it	cc
 8008e96:	2304      	movcc	r3, #4
 8008e98:	441d      	add	r5, r3
 8008e9a:	4473      	add	r3, lr
 8008e9c:	469e      	mov	lr, r3
 8008e9e:	462e      	mov	r6, r5
 8008ea0:	4566      	cmp	r6, ip
 8008ea2:	d30e      	bcc.n	8008ec2 <__mdiff+0xea>
 8008ea4:	f10c 0203 	add.w	r2, ip, #3
 8008ea8:	1b52      	subs	r2, r2, r5
 8008eaa:	f022 0203 	bic.w	r2, r2, #3
 8008eae:	3d03      	subs	r5, #3
 8008eb0:	45ac      	cmp	ip, r5
 8008eb2:	bf38      	it	cc
 8008eb4:	2200      	movcc	r2, #0
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008ebc:	b17a      	cbz	r2, 8008ede <__mdiff+0x106>
 8008ebe:	6107      	str	r7, [r0, #16]
 8008ec0:	e7a4      	b.n	8008e0c <__mdiff+0x34>
 8008ec2:	f856 8b04 	ldr.w	r8, [r6], #4
 8008ec6:	fa11 f288 	uxtah	r2, r1, r8
 8008eca:	1414      	asrs	r4, r2, #16
 8008ecc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008ed0:	b292      	uxth	r2, r2
 8008ed2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008ed6:	f84e 2b04 	str.w	r2, [lr], #4
 8008eda:	1421      	asrs	r1, r4, #16
 8008edc:	e7e0      	b.n	8008ea0 <__mdiff+0xc8>
 8008ede:	3f01      	subs	r7, #1
 8008ee0:	e7ea      	b.n	8008eb8 <__mdiff+0xe0>
 8008ee2:	bf00      	nop
 8008ee4:	080099c4 	.word	0x080099c4
 8008ee8:	080099e6 	.word	0x080099e6

08008eec <__d2b>:
 8008eec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ef0:	460f      	mov	r7, r1
 8008ef2:	2101      	movs	r1, #1
 8008ef4:	ec59 8b10 	vmov	r8, r9, d0
 8008ef8:	4616      	mov	r6, r2
 8008efa:	f7ff fcd5 	bl	80088a8 <_Balloc>
 8008efe:	4604      	mov	r4, r0
 8008f00:	b930      	cbnz	r0, 8008f10 <__d2b+0x24>
 8008f02:	4602      	mov	r2, r0
 8008f04:	4b24      	ldr	r3, [pc, #144]	; (8008f98 <__d2b+0xac>)
 8008f06:	4825      	ldr	r0, [pc, #148]	; (8008f9c <__d2b+0xb0>)
 8008f08:	f240 310f 	movw	r1, #783	; 0x30f
 8008f0c:	f000 f92a 	bl	8009164 <__assert_func>
 8008f10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f18:	bb2d      	cbnz	r5, 8008f66 <__d2b+0x7a>
 8008f1a:	9301      	str	r3, [sp, #4]
 8008f1c:	f1b8 0300 	subs.w	r3, r8, #0
 8008f20:	d026      	beq.n	8008f70 <__d2b+0x84>
 8008f22:	4668      	mov	r0, sp
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	f7ff fd87 	bl	8008a38 <__lo0bits>
 8008f2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f2e:	b1e8      	cbz	r0, 8008f6c <__d2b+0x80>
 8008f30:	f1c0 0320 	rsb	r3, r0, #32
 8008f34:	fa02 f303 	lsl.w	r3, r2, r3
 8008f38:	430b      	orrs	r3, r1
 8008f3a:	40c2      	lsrs	r2, r0
 8008f3c:	6163      	str	r3, [r4, #20]
 8008f3e:	9201      	str	r2, [sp, #4]
 8008f40:	9b01      	ldr	r3, [sp, #4]
 8008f42:	61a3      	str	r3, [r4, #24]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	bf14      	ite	ne
 8008f48:	2202      	movne	r2, #2
 8008f4a:	2201      	moveq	r2, #1
 8008f4c:	6122      	str	r2, [r4, #16]
 8008f4e:	b1bd      	cbz	r5, 8008f80 <__d2b+0x94>
 8008f50:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f54:	4405      	add	r5, r0
 8008f56:	603d      	str	r5, [r7, #0]
 8008f58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f5c:	6030      	str	r0, [r6, #0]
 8008f5e:	4620      	mov	r0, r4
 8008f60:	b003      	add	sp, #12
 8008f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f6a:	e7d6      	b.n	8008f1a <__d2b+0x2e>
 8008f6c:	6161      	str	r1, [r4, #20]
 8008f6e:	e7e7      	b.n	8008f40 <__d2b+0x54>
 8008f70:	a801      	add	r0, sp, #4
 8008f72:	f7ff fd61 	bl	8008a38 <__lo0bits>
 8008f76:	9b01      	ldr	r3, [sp, #4]
 8008f78:	6163      	str	r3, [r4, #20]
 8008f7a:	3020      	adds	r0, #32
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	e7e5      	b.n	8008f4c <__d2b+0x60>
 8008f80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f88:	6038      	str	r0, [r7, #0]
 8008f8a:	6918      	ldr	r0, [r3, #16]
 8008f8c:	f7ff fd34 	bl	80089f8 <__hi0bits>
 8008f90:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f94:	e7e2      	b.n	8008f5c <__d2b+0x70>
 8008f96:	bf00      	nop
 8008f98:	080099c4 	.word	0x080099c4
 8008f9c:	080099e6 	.word	0x080099e6

08008fa0 <__sread>:
 8008fa0:	b510      	push	{r4, lr}
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fa8:	f000 f8a8 	bl	80090fc <_read_r>
 8008fac:	2800      	cmp	r0, #0
 8008fae:	bfab      	itete	ge
 8008fb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fb2:	89a3      	ldrhlt	r3, [r4, #12]
 8008fb4:	181b      	addge	r3, r3, r0
 8008fb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fba:	bfac      	ite	ge
 8008fbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fbe:	81a3      	strhlt	r3, [r4, #12]
 8008fc0:	bd10      	pop	{r4, pc}

08008fc2 <__swrite>:
 8008fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc6:	461f      	mov	r7, r3
 8008fc8:	898b      	ldrh	r3, [r1, #12]
 8008fca:	05db      	lsls	r3, r3, #23
 8008fcc:	4605      	mov	r5, r0
 8008fce:	460c      	mov	r4, r1
 8008fd0:	4616      	mov	r6, r2
 8008fd2:	d505      	bpl.n	8008fe0 <__swrite+0x1e>
 8008fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd8:	2302      	movs	r3, #2
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f000 f87c 	bl	80090d8 <_lseek_r>
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fea:	81a3      	strh	r3, [r4, #12]
 8008fec:	4632      	mov	r2, r6
 8008fee:	463b      	mov	r3, r7
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff6:	f000 b8a3 	b.w	8009140 <_write_r>

08008ffa <__sseek>:
 8008ffa:	b510      	push	{r4, lr}
 8008ffc:	460c      	mov	r4, r1
 8008ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009002:	f000 f869 	bl	80090d8 <_lseek_r>
 8009006:	1c43      	adds	r3, r0, #1
 8009008:	89a3      	ldrh	r3, [r4, #12]
 800900a:	bf15      	itete	ne
 800900c:	6560      	strne	r0, [r4, #84]	; 0x54
 800900e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009016:	81a3      	strheq	r3, [r4, #12]
 8009018:	bf18      	it	ne
 800901a:	81a3      	strhne	r3, [r4, #12]
 800901c:	bd10      	pop	{r4, pc}

0800901e <__sclose>:
 800901e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009022:	f000 b849 	b.w	80090b8 <_close_r>

08009026 <_realloc_r>:
 8009026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800902a:	4680      	mov	r8, r0
 800902c:	4614      	mov	r4, r2
 800902e:	460e      	mov	r6, r1
 8009030:	b921      	cbnz	r1, 800903c <_realloc_r+0x16>
 8009032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009036:	4611      	mov	r1, r2
 8009038:	f7ff bafc 	b.w	8008634 <_malloc_r>
 800903c:	b92a      	cbnz	r2, 800904a <_realloc_r+0x24>
 800903e:	f000 f8c5 	bl	80091cc <_free_r>
 8009042:	4625      	mov	r5, r4
 8009044:	4628      	mov	r0, r5
 8009046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800904a:	f000 f91d 	bl	8009288 <_malloc_usable_size_r>
 800904e:	4284      	cmp	r4, r0
 8009050:	4607      	mov	r7, r0
 8009052:	d802      	bhi.n	800905a <_realloc_r+0x34>
 8009054:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009058:	d812      	bhi.n	8009080 <_realloc_r+0x5a>
 800905a:	4621      	mov	r1, r4
 800905c:	4640      	mov	r0, r8
 800905e:	f7ff fae9 	bl	8008634 <_malloc_r>
 8009062:	4605      	mov	r5, r0
 8009064:	2800      	cmp	r0, #0
 8009066:	d0ed      	beq.n	8009044 <_realloc_r+0x1e>
 8009068:	42bc      	cmp	r4, r7
 800906a:	4622      	mov	r2, r4
 800906c:	4631      	mov	r1, r6
 800906e:	bf28      	it	cs
 8009070:	463a      	movcs	r2, r7
 8009072:	f7fe fad4 	bl	800761e <memcpy>
 8009076:	4631      	mov	r1, r6
 8009078:	4640      	mov	r0, r8
 800907a:	f000 f8a7 	bl	80091cc <_free_r>
 800907e:	e7e1      	b.n	8009044 <_realloc_r+0x1e>
 8009080:	4635      	mov	r5, r6
 8009082:	e7df      	b.n	8009044 <_realloc_r+0x1e>

08009084 <memmove>:
 8009084:	4288      	cmp	r0, r1
 8009086:	b510      	push	{r4, lr}
 8009088:	eb01 0402 	add.w	r4, r1, r2
 800908c:	d902      	bls.n	8009094 <memmove+0x10>
 800908e:	4284      	cmp	r4, r0
 8009090:	4623      	mov	r3, r4
 8009092:	d807      	bhi.n	80090a4 <memmove+0x20>
 8009094:	1e43      	subs	r3, r0, #1
 8009096:	42a1      	cmp	r1, r4
 8009098:	d008      	beq.n	80090ac <memmove+0x28>
 800909a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800909e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090a2:	e7f8      	b.n	8009096 <memmove+0x12>
 80090a4:	4402      	add	r2, r0
 80090a6:	4601      	mov	r1, r0
 80090a8:	428a      	cmp	r2, r1
 80090aa:	d100      	bne.n	80090ae <memmove+0x2a>
 80090ac:	bd10      	pop	{r4, pc}
 80090ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090b6:	e7f7      	b.n	80090a8 <memmove+0x24>

080090b8 <_close_r>:
 80090b8:	b538      	push	{r3, r4, r5, lr}
 80090ba:	4d06      	ldr	r5, [pc, #24]	; (80090d4 <_close_r+0x1c>)
 80090bc:	2300      	movs	r3, #0
 80090be:	4604      	mov	r4, r0
 80090c0:	4608      	mov	r0, r1
 80090c2:	602b      	str	r3, [r5, #0]
 80090c4:	f7f8 ffe0 	bl	8002088 <_close>
 80090c8:	1c43      	adds	r3, r0, #1
 80090ca:	d102      	bne.n	80090d2 <_close_r+0x1a>
 80090cc:	682b      	ldr	r3, [r5, #0]
 80090ce:	b103      	cbz	r3, 80090d2 <_close_r+0x1a>
 80090d0:	6023      	str	r3, [r4, #0]
 80090d2:	bd38      	pop	{r3, r4, r5, pc}
 80090d4:	20000bb8 	.word	0x20000bb8

080090d8 <_lseek_r>:
 80090d8:	b538      	push	{r3, r4, r5, lr}
 80090da:	4d07      	ldr	r5, [pc, #28]	; (80090f8 <_lseek_r+0x20>)
 80090dc:	4604      	mov	r4, r0
 80090de:	4608      	mov	r0, r1
 80090e0:	4611      	mov	r1, r2
 80090e2:	2200      	movs	r2, #0
 80090e4:	602a      	str	r2, [r5, #0]
 80090e6:	461a      	mov	r2, r3
 80090e8:	f7f8 fff5 	bl	80020d6 <_lseek>
 80090ec:	1c43      	adds	r3, r0, #1
 80090ee:	d102      	bne.n	80090f6 <_lseek_r+0x1e>
 80090f0:	682b      	ldr	r3, [r5, #0]
 80090f2:	b103      	cbz	r3, 80090f6 <_lseek_r+0x1e>
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	bd38      	pop	{r3, r4, r5, pc}
 80090f8:	20000bb8 	.word	0x20000bb8

080090fc <_read_r>:
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	4d07      	ldr	r5, [pc, #28]	; (800911c <_read_r+0x20>)
 8009100:	4604      	mov	r4, r0
 8009102:	4608      	mov	r0, r1
 8009104:	4611      	mov	r1, r2
 8009106:	2200      	movs	r2, #0
 8009108:	602a      	str	r2, [r5, #0]
 800910a:	461a      	mov	r2, r3
 800910c:	f7f8 ff83 	bl	8002016 <_read>
 8009110:	1c43      	adds	r3, r0, #1
 8009112:	d102      	bne.n	800911a <_read_r+0x1e>
 8009114:	682b      	ldr	r3, [r5, #0]
 8009116:	b103      	cbz	r3, 800911a <_read_r+0x1e>
 8009118:	6023      	str	r3, [r4, #0]
 800911a:	bd38      	pop	{r3, r4, r5, pc}
 800911c:	20000bb8 	.word	0x20000bb8

08009120 <_sbrk_r>:
 8009120:	b538      	push	{r3, r4, r5, lr}
 8009122:	4d06      	ldr	r5, [pc, #24]	; (800913c <_sbrk_r+0x1c>)
 8009124:	2300      	movs	r3, #0
 8009126:	4604      	mov	r4, r0
 8009128:	4608      	mov	r0, r1
 800912a:	602b      	str	r3, [r5, #0]
 800912c:	f7f8 ffe0 	bl	80020f0 <_sbrk>
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	d102      	bne.n	800913a <_sbrk_r+0x1a>
 8009134:	682b      	ldr	r3, [r5, #0]
 8009136:	b103      	cbz	r3, 800913a <_sbrk_r+0x1a>
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	bd38      	pop	{r3, r4, r5, pc}
 800913c:	20000bb8 	.word	0x20000bb8

08009140 <_write_r>:
 8009140:	b538      	push	{r3, r4, r5, lr}
 8009142:	4d07      	ldr	r5, [pc, #28]	; (8009160 <_write_r+0x20>)
 8009144:	4604      	mov	r4, r0
 8009146:	4608      	mov	r0, r1
 8009148:	4611      	mov	r1, r2
 800914a:	2200      	movs	r2, #0
 800914c:	602a      	str	r2, [r5, #0]
 800914e:	461a      	mov	r2, r3
 8009150:	f7f8 ff7e 	bl	8002050 <_write>
 8009154:	1c43      	adds	r3, r0, #1
 8009156:	d102      	bne.n	800915e <_write_r+0x1e>
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	b103      	cbz	r3, 800915e <_write_r+0x1e>
 800915c:	6023      	str	r3, [r4, #0]
 800915e:	bd38      	pop	{r3, r4, r5, pc}
 8009160:	20000bb8 	.word	0x20000bb8

08009164 <__assert_func>:
 8009164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009166:	4614      	mov	r4, r2
 8009168:	461a      	mov	r2, r3
 800916a:	4b09      	ldr	r3, [pc, #36]	; (8009190 <__assert_func+0x2c>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4605      	mov	r5, r0
 8009170:	68d8      	ldr	r0, [r3, #12]
 8009172:	b14c      	cbz	r4, 8009188 <__assert_func+0x24>
 8009174:	4b07      	ldr	r3, [pc, #28]	; (8009194 <__assert_func+0x30>)
 8009176:	9100      	str	r1, [sp, #0]
 8009178:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800917c:	4906      	ldr	r1, [pc, #24]	; (8009198 <__assert_func+0x34>)
 800917e:	462b      	mov	r3, r5
 8009180:	f000 f88a 	bl	8009298 <fiprintf>
 8009184:	f000 f8a7 	bl	80092d6 <abort>
 8009188:	4b04      	ldr	r3, [pc, #16]	; (800919c <__assert_func+0x38>)
 800918a:	461c      	mov	r4, r3
 800918c:	e7f3      	b.n	8009176 <__assert_func+0x12>
 800918e:	bf00      	nop
 8009190:	20000078 	.word	0x20000078
 8009194:	08009c47 	.word	0x08009c47
 8009198:	08009c54 	.word	0x08009c54
 800919c:	08009c82 	.word	0x08009c82

080091a0 <_calloc_r>:
 80091a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091a2:	fba1 2402 	umull	r2, r4, r1, r2
 80091a6:	b94c      	cbnz	r4, 80091bc <_calloc_r+0x1c>
 80091a8:	4611      	mov	r1, r2
 80091aa:	9201      	str	r2, [sp, #4]
 80091ac:	f7ff fa42 	bl	8008634 <_malloc_r>
 80091b0:	9a01      	ldr	r2, [sp, #4]
 80091b2:	4605      	mov	r5, r0
 80091b4:	b930      	cbnz	r0, 80091c4 <_calloc_r+0x24>
 80091b6:	4628      	mov	r0, r5
 80091b8:	b003      	add	sp, #12
 80091ba:	bd30      	pop	{r4, r5, pc}
 80091bc:	220c      	movs	r2, #12
 80091be:	6002      	str	r2, [r0, #0]
 80091c0:	2500      	movs	r5, #0
 80091c2:	e7f8      	b.n	80091b6 <_calloc_r+0x16>
 80091c4:	4621      	mov	r1, r4
 80091c6:	f7fe f9f1 	bl	80075ac <memset>
 80091ca:	e7f4      	b.n	80091b6 <_calloc_r+0x16>

080091cc <_free_r>:
 80091cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091ce:	2900      	cmp	r1, #0
 80091d0:	d044      	beq.n	800925c <_free_r+0x90>
 80091d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091d6:	9001      	str	r0, [sp, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f1a1 0404 	sub.w	r4, r1, #4
 80091de:	bfb8      	it	lt
 80091e0:	18e4      	addlt	r4, r4, r3
 80091e2:	f7ff fb55 	bl	8008890 <__malloc_lock>
 80091e6:	4a1e      	ldr	r2, [pc, #120]	; (8009260 <_free_r+0x94>)
 80091e8:	9801      	ldr	r0, [sp, #4]
 80091ea:	6813      	ldr	r3, [r2, #0]
 80091ec:	b933      	cbnz	r3, 80091fc <_free_r+0x30>
 80091ee:	6063      	str	r3, [r4, #4]
 80091f0:	6014      	str	r4, [r2, #0]
 80091f2:	b003      	add	sp, #12
 80091f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091f8:	f7ff bb50 	b.w	800889c <__malloc_unlock>
 80091fc:	42a3      	cmp	r3, r4
 80091fe:	d908      	bls.n	8009212 <_free_r+0x46>
 8009200:	6825      	ldr	r5, [r4, #0]
 8009202:	1961      	adds	r1, r4, r5
 8009204:	428b      	cmp	r3, r1
 8009206:	bf01      	itttt	eq
 8009208:	6819      	ldreq	r1, [r3, #0]
 800920a:	685b      	ldreq	r3, [r3, #4]
 800920c:	1949      	addeq	r1, r1, r5
 800920e:	6021      	streq	r1, [r4, #0]
 8009210:	e7ed      	b.n	80091ee <_free_r+0x22>
 8009212:	461a      	mov	r2, r3
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	b10b      	cbz	r3, 800921c <_free_r+0x50>
 8009218:	42a3      	cmp	r3, r4
 800921a:	d9fa      	bls.n	8009212 <_free_r+0x46>
 800921c:	6811      	ldr	r1, [r2, #0]
 800921e:	1855      	adds	r5, r2, r1
 8009220:	42a5      	cmp	r5, r4
 8009222:	d10b      	bne.n	800923c <_free_r+0x70>
 8009224:	6824      	ldr	r4, [r4, #0]
 8009226:	4421      	add	r1, r4
 8009228:	1854      	adds	r4, r2, r1
 800922a:	42a3      	cmp	r3, r4
 800922c:	6011      	str	r1, [r2, #0]
 800922e:	d1e0      	bne.n	80091f2 <_free_r+0x26>
 8009230:	681c      	ldr	r4, [r3, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	6053      	str	r3, [r2, #4]
 8009236:	440c      	add	r4, r1
 8009238:	6014      	str	r4, [r2, #0]
 800923a:	e7da      	b.n	80091f2 <_free_r+0x26>
 800923c:	d902      	bls.n	8009244 <_free_r+0x78>
 800923e:	230c      	movs	r3, #12
 8009240:	6003      	str	r3, [r0, #0]
 8009242:	e7d6      	b.n	80091f2 <_free_r+0x26>
 8009244:	6825      	ldr	r5, [r4, #0]
 8009246:	1961      	adds	r1, r4, r5
 8009248:	428b      	cmp	r3, r1
 800924a:	bf04      	itt	eq
 800924c:	6819      	ldreq	r1, [r3, #0]
 800924e:	685b      	ldreq	r3, [r3, #4]
 8009250:	6063      	str	r3, [r4, #4]
 8009252:	bf04      	itt	eq
 8009254:	1949      	addeq	r1, r1, r5
 8009256:	6021      	streq	r1, [r4, #0]
 8009258:	6054      	str	r4, [r2, #4]
 800925a:	e7ca      	b.n	80091f2 <_free_r+0x26>
 800925c:	b003      	add	sp, #12
 800925e:	bd30      	pop	{r4, r5, pc}
 8009260:	20000bb0 	.word	0x20000bb0

08009264 <__ascii_mbtowc>:
 8009264:	b082      	sub	sp, #8
 8009266:	b901      	cbnz	r1, 800926a <__ascii_mbtowc+0x6>
 8009268:	a901      	add	r1, sp, #4
 800926a:	b142      	cbz	r2, 800927e <__ascii_mbtowc+0x1a>
 800926c:	b14b      	cbz	r3, 8009282 <__ascii_mbtowc+0x1e>
 800926e:	7813      	ldrb	r3, [r2, #0]
 8009270:	600b      	str	r3, [r1, #0]
 8009272:	7812      	ldrb	r2, [r2, #0]
 8009274:	1e10      	subs	r0, r2, #0
 8009276:	bf18      	it	ne
 8009278:	2001      	movne	r0, #1
 800927a:	b002      	add	sp, #8
 800927c:	4770      	bx	lr
 800927e:	4610      	mov	r0, r2
 8009280:	e7fb      	b.n	800927a <__ascii_mbtowc+0x16>
 8009282:	f06f 0001 	mvn.w	r0, #1
 8009286:	e7f8      	b.n	800927a <__ascii_mbtowc+0x16>

08009288 <_malloc_usable_size_r>:
 8009288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800928c:	1f18      	subs	r0, r3, #4
 800928e:	2b00      	cmp	r3, #0
 8009290:	bfbc      	itt	lt
 8009292:	580b      	ldrlt	r3, [r1, r0]
 8009294:	18c0      	addlt	r0, r0, r3
 8009296:	4770      	bx	lr

08009298 <fiprintf>:
 8009298:	b40e      	push	{r1, r2, r3}
 800929a:	b503      	push	{r0, r1, lr}
 800929c:	4601      	mov	r1, r0
 800929e:	ab03      	add	r3, sp, #12
 80092a0:	4805      	ldr	r0, [pc, #20]	; (80092b8 <fiprintf+0x20>)
 80092a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80092a6:	6800      	ldr	r0, [r0, #0]
 80092a8:	9301      	str	r3, [sp, #4]
 80092aa:	f000 f845 	bl	8009338 <_vfiprintf_r>
 80092ae:	b002      	add	sp, #8
 80092b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80092b4:	b003      	add	sp, #12
 80092b6:	4770      	bx	lr
 80092b8:	20000078 	.word	0x20000078

080092bc <__ascii_wctomb>:
 80092bc:	b149      	cbz	r1, 80092d2 <__ascii_wctomb+0x16>
 80092be:	2aff      	cmp	r2, #255	; 0xff
 80092c0:	bf85      	ittet	hi
 80092c2:	238a      	movhi	r3, #138	; 0x8a
 80092c4:	6003      	strhi	r3, [r0, #0]
 80092c6:	700a      	strbls	r2, [r1, #0]
 80092c8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80092cc:	bf98      	it	ls
 80092ce:	2001      	movls	r0, #1
 80092d0:	4770      	bx	lr
 80092d2:	4608      	mov	r0, r1
 80092d4:	4770      	bx	lr

080092d6 <abort>:
 80092d6:	b508      	push	{r3, lr}
 80092d8:	2006      	movs	r0, #6
 80092da:	f000 fa89 	bl	80097f0 <raise>
 80092de:	2001      	movs	r0, #1
 80092e0:	f7f8 fe8f 	bl	8002002 <_exit>

080092e4 <__sfputc_r>:
 80092e4:	6893      	ldr	r3, [r2, #8]
 80092e6:	3b01      	subs	r3, #1
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	b410      	push	{r4}
 80092ec:	6093      	str	r3, [r2, #8]
 80092ee:	da08      	bge.n	8009302 <__sfputc_r+0x1e>
 80092f0:	6994      	ldr	r4, [r2, #24]
 80092f2:	42a3      	cmp	r3, r4
 80092f4:	db01      	blt.n	80092fa <__sfputc_r+0x16>
 80092f6:	290a      	cmp	r1, #10
 80092f8:	d103      	bne.n	8009302 <__sfputc_r+0x1e>
 80092fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092fe:	f000 b935 	b.w	800956c <__swbuf_r>
 8009302:	6813      	ldr	r3, [r2, #0]
 8009304:	1c58      	adds	r0, r3, #1
 8009306:	6010      	str	r0, [r2, #0]
 8009308:	7019      	strb	r1, [r3, #0]
 800930a:	4608      	mov	r0, r1
 800930c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009310:	4770      	bx	lr

08009312 <__sfputs_r>:
 8009312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009314:	4606      	mov	r6, r0
 8009316:	460f      	mov	r7, r1
 8009318:	4614      	mov	r4, r2
 800931a:	18d5      	adds	r5, r2, r3
 800931c:	42ac      	cmp	r4, r5
 800931e:	d101      	bne.n	8009324 <__sfputs_r+0x12>
 8009320:	2000      	movs	r0, #0
 8009322:	e007      	b.n	8009334 <__sfputs_r+0x22>
 8009324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009328:	463a      	mov	r2, r7
 800932a:	4630      	mov	r0, r6
 800932c:	f7ff ffda 	bl	80092e4 <__sfputc_r>
 8009330:	1c43      	adds	r3, r0, #1
 8009332:	d1f3      	bne.n	800931c <__sfputs_r+0xa>
 8009334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009338 <_vfiprintf_r>:
 8009338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800933c:	460d      	mov	r5, r1
 800933e:	b09d      	sub	sp, #116	; 0x74
 8009340:	4614      	mov	r4, r2
 8009342:	4698      	mov	r8, r3
 8009344:	4606      	mov	r6, r0
 8009346:	b118      	cbz	r0, 8009350 <_vfiprintf_r+0x18>
 8009348:	6a03      	ldr	r3, [r0, #32]
 800934a:	b90b      	cbnz	r3, 8009350 <_vfiprintf_r+0x18>
 800934c:	f7fe f8f8 	bl	8007540 <__sinit>
 8009350:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009352:	07d9      	lsls	r1, r3, #31
 8009354:	d405      	bmi.n	8009362 <_vfiprintf_r+0x2a>
 8009356:	89ab      	ldrh	r3, [r5, #12]
 8009358:	059a      	lsls	r2, r3, #22
 800935a:	d402      	bmi.n	8009362 <_vfiprintf_r+0x2a>
 800935c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800935e:	f7fe f95c 	bl	800761a <__retarget_lock_acquire_recursive>
 8009362:	89ab      	ldrh	r3, [r5, #12]
 8009364:	071b      	lsls	r3, r3, #28
 8009366:	d501      	bpl.n	800936c <_vfiprintf_r+0x34>
 8009368:	692b      	ldr	r3, [r5, #16]
 800936a:	b99b      	cbnz	r3, 8009394 <_vfiprintf_r+0x5c>
 800936c:	4629      	mov	r1, r5
 800936e:	4630      	mov	r0, r6
 8009370:	f000 f93a 	bl	80095e8 <__swsetup_r>
 8009374:	b170      	cbz	r0, 8009394 <_vfiprintf_r+0x5c>
 8009376:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009378:	07dc      	lsls	r4, r3, #31
 800937a:	d504      	bpl.n	8009386 <_vfiprintf_r+0x4e>
 800937c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009380:	b01d      	add	sp, #116	; 0x74
 8009382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009386:	89ab      	ldrh	r3, [r5, #12]
 8009388:	0598      	lsls	r0, r3, #22
 800938a:	d4f7      	bmi.n	800937c <_vfiprintf_r+0x44>
 800938c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800938e:	f7fe f945 	bl	800761c <__retarget_lock_release_recursive>
 8009392:	e7f3      	b.n	800937c <_vfiprintf_r+0x44>
 8009394:	2300      	movs	r3, #0
 8009396:	9309      	str	r3, [sp, #36]	; 0x24
 8009398:	2320      	movs	r3, #32
 800939a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800939e:	f8cd 800c 	str.w	r8, [sp, #12]
 80093a2:	2330      	movs	r3, #48	; 0x30
 80093a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009558 <_vfiprintf_r+0x220>
 80093a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093ac:	f04f 0901 	mov.w	r9, #1
 80093b0:	4623      	mov	r3, r4
 80093b2:	469a      	mov	sl, r3
 80093b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093b8:	b10a      	cbz	r2, 80093be <_vfiprintf_r+0x86>
 80093ba:	2a25      	cmp	r2, #37	; 0x25
 80093bc:	d1f9      	bne.n	80093b2 <_vfiprintf_r+0x7a>
 80093be:	ebba 0b04 	subs.w	fp, sl, r4
 80093c2:	d00b      	beq.n	80093dc <_vfiprintf_r+0xa4>
 80093c4:	465b      	mov	r3, fp
 80093c6:	4622      	mov	r2, r4
 80093c8:	4629      	mov	r1, r5
 80093ca:	4630      	mov	r0, r6
 80093cc:	f7ff ffa1 	bl	8009312 <__sfputs_r>
 80093d0:	3001      	adds	r0, #1
 80093d2:	f000 80a9 	beq.w	8009528 <_vfiprintf_r+0x1f0>
 80093d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093d8:	445a      	add	r2, fp
 80093da:	9209      	str	r2, [sp, #36]	; 0x24
 80093dc:	f89a 3000 	ldrb.w	r3, [sl]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f000 80a1 	beq.w	8009528 <_vfiprintf_r+0x1f0>
 80093e6:	2300      	movs	r3, #0
 80093e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093f0:	f10a 0a01 	add.w	sl, sl, #1
 80093f4:	9304      	str	r3, [sp, #16]
 80093f6:	9307      	str	r3, [sp, #28]
 80093f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093fc:	931a      	str	r3, [sp, #104]	; 0x68
 80093fe:	4654      	mov	r4, sl
 8009400:	2205      	movs	r2, #5
 8009402:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009406:	4854      	ldr	r0, [pc, #336]	; (8009558 <_vfiprintf_r+0x220>)
 8009408:	f7f6 fee2 	bl	80001d0 <memchr>
 800940c:	9a04      	ldr	r2, [sp, #16]
 800940e:	b9d8      	cbnz	r0, 8009448 <_vfiprintf_r+0x110>
 8009410:	06d1      	lsls	r1, r2, #27
 8009412:	bf44      	itt	mi
 8009414:	2320      	movmi	r3, #32
 8009416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800941a:	0713      	lsls	r3, r2, #28
 800941c:	bf44      	itt	mi
 800941e:	232b      	movmi	r3, #43	; 0x2b
 8009420:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009424:	f89a 3000 	ldrb.w	r3, [sl]
 8009428:	2b2a      	cmp	r3, #42	; 0x2a
 800942a:	d015      	beq.n	8009458 <_vfiprintf_r+0x120>
 800942c:	9a07      	ldr	r2, [sp, #28]
 800942e:	4654      	mov	r4, sl
 8009430:	2000      	movs	r0, #0
 8009432:	f04f 0c0a 	mov.w	ip, #10
 8009436:	4621      	mov	r1, r4
 8009438:	f811 3b01 	ldrb.w	r3, [r1], #1
 800943c:	3b30      	subs	r3, #48	; 0x30
 800943e:	2b09      	cmp	r3, #9
 8009440:	d94d      	bls.n	80094de <_vfiprintf_r+0x1a6>
 8009442:	b1b0      	cbz	r0, 8009472 <_vfiprintf_r+0x13a>
 8009444:	9207      	str	r2, [sp, #28]
 8009446:	e014      	b.n	8009472 <_vfiprintf_r+0x13a>
 8009448:	eba0 0308 	sub.w	r3, r0, r8
 800944c:	fa09 f303 	lsl.w	r3, r9, r3
 8009450:	4313      	orrs	r3, r2
 8009452:	9304      	str	r3, [sp, #16]
 8009454:	46a2      	mov	sl, r4
 8009456:	e7d2      	b.n	80093fe <_vfiprintf_r+0xc6>
 8009458:	9b03      	ldr	r3, [sp, #12]
 800945a:	1d19      	adds	r1, r3, #4
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	9103      	str	r1, [sp, #12]
 8009460:	2b00      	cmp	r3, #0
 8009462:	bfbb      	ittet	lt
 8009464:	425b      	neglt	r3, r3
 8009466:	f042 0202 	orrlt.w	r2, r2, #2
 800946a:	9307      	strge	r3, [sp, #28]
 800946c:	9307      	strlt	r3, [sp, #28]
 800946e:	bfb8      	it	lt
 8009470:	9204      	strlt	r2, [sp, #16]
 8009472:	7823      	ldrb	r3, [r4, #0]
 8009474:	2b2e      	cmp	r3, #46	; 0x2e
 8009476:	d10c      	bne.n	8009492 <_vfiprintf_r+0x15a>
 8009478:	7863      	ldrb	r3, [r4, #1]
 800947a:	2b2a      	cmp	r3, #42	; 0x2a
 800947c:	d134      	bne.n	80094e8 <_vfiprintf_r+0x1b0>
 800947e:	9b03      	ldr	r3, [sp, #12]
 8009480:	1d1a      	adds	r2, r3, #4
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	9203      	str	r2, [sp, #12]
 8009486:	2b00      	cmp	r3, #0
 8009488:	bfb8      	it	lt
 800948a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800948e:	3402      	adds	r4, #2
 8009490:	9305      	str	r3, [sp, #20]
 8009492:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009568 <_vfiprintf_r+0x230>
 8009496:	7821      	ldrb	r1, [r4, #0]
 8009498:	2203      	movs	r2, #3
 800949a:	4650      	mov	r0, sl
 800949c:	f7f6 fe98 	bl	80001d0 <memchr>
 80094a0:	b138      	cbz	r0, 80094b2 <_vfiprintf_r+0x17a>
 80094a2:	9b04      	ldr	r3, [sp, #16]
 80094a4:	eba0 000a 	sub.w	r0, r0, sl
 80094a8:	2240      	movs	r2, #64	; 0x40
 80094aa:	4082      	lsls	r2, r0
 80094ac:	4313      	orrs	r3, r2
 80094ae:	3401      	adds	r4, #1
 80094b0:	9304      	str	r3, [sp, #16]
 80094b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094b6:	4829      	ldr	r0, [pc, #164]	; (800955c <_vfiprintf_r+0x224>)
 80094b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094bc:	2206      	movs	r2, #6
 80094be:	f7f6 fe87 	bl	80001d0 <memchr>
 80094c2:	2800      	cmp	r0, #0
 80094c4:	d03f      	beq.n	8009546 <_vfiprintf_r+0x20e>
 80094c6:	4b26      	ldr	r3, [pc, #152]	; (8009560 <_vfiprintf_r+0x228>)
 80094c8:	bb1b      	cbnz	r3, 8009512 <_vfiprintf_r+0x1da>
 80094ca:	9b03      	ldr	r3, [sp, #12]
 80094cc:	3307      	adds	r3, #7
 80094ce:	f023 0307 	bic.w	r3, r3, #7
 80094d2:	3308      	adds	r3, #8
 80094d4:	9303      	str	r3, [sp, #12]
 80094d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094d8:	443b      	add	r3, r7
 80094da:	9309      	str	r3, [sp, #36]	; 0x24
 80094dc:	e768      	b.n	80093b0 <_vfiprintf_r+0x78>
 80094de:	fb0c 3202 	mla	r2, ip, r2, r3
 80094e2:	460c      	mov	r4, r1
 80094e4:	2001      	movs	r0, #1
 80094e6:	e7a6      	b.n	8009436 <_vfiprintf_r+0xfe>
 80094e8:	2300      	movs	r3, #0
 80094ea:	3401      	adds	r4, #1
 80094ec:	9305      	str	r3, [sp, #20]
 80094ee:	4619      	mov	r1, r3
 80094f0:	f04f 0c0a 	mov.w	ip, #10
 80094f4:	4620      	mov	r0, r4
 80094f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094fa:	3a30      	subs	r2, #48	; 0x30
 80094fc:	2a09      	cmp	r2, #9
 80094fe:	d903      	bls.n	8009508 <_vfiprintf_r+0x1d0>
 8009500:	2b00      	cmp	r3, #0
 8009502:	d0c6      	beq.n	8009492 <_vfiprintf_r+0x15a>
 8009504:	9105      	str	r1, [sp, #20]
 8009506:	e7c4      	b.n	8009492 <_vfiprintf_r+0x15a>
 8009508:	fb0c 2101 	mla	r1, ip, r1, r2
 800950c:	4604      	mov	r4, r0
 800950e:	2301      	movs	r3, #1
 8009510:	e7f0      	b.n	80094f4 <_vfiprintf_r+0x1bc>
 8009512:	ab03      	add	r3, sp, #12
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	462a      	mov	r2, r5
 8009518:	4b12      	ldr	r3, [pc, #72]	; (8009564 <_vfiprintf_r+0x22c>)
 800951a:	a904      	add	r1, sp, #16
 800951c:	4630      	mov	r0, r6
 800951e:	f7fd fb9d 	bl	8006c5c <_printf_float>
 8009522:	4607      	mov	r7, r0
 8009524:	1c78      	adds	r0, r7, #1
 8009526:	d1d6      	bne.n	80094d6 <_vfiprintf_r+0x19e>
 8009528:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800952a:	07d9      	lsls	r1, r3, #31
 800952c:	d405      	bmi.n	800953a <_vfiprintf_r+0x202>
 800952e:	89ab      	ldrh	r3, [r5, #12]
 8009530:	059a      	lsls	r2, r3, #22
 8009532:	d402      	bmi.n	800953a <_vfiprintf_r+0x202>
 8009534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009536:	f7fe f871 	bl	800761c <__retarget_lock_release_recursive>
 800953a:	89ab      	ldrh	r3, [r5, #12]
 800953c:	065b      	lsls	r3, r3, #25
 800953e:	f53f af1d 	bmi.w	800937c <_vfiprintf_r+0x44>
 8009542:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009544:	e71c      	b.n	8009380 <_vfiprintf_r+0x48>
 8009546:	ab03      	add	r3, sp, #12
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	462a      	mov	r2, r5
 800954c:	4b05      	ldr	r3, [pc, #20]	; (8009564 <_vfiprintf_r+0x22c>)
 800954e:	a904      	add	r1, sp, #16
 8009550:	4630      	mov	r0, r6
 8009552:	f7fd fe27 	bl	80071a4 <_printf_i>
 8009556:	e7e4      	b.n	8009522 <_vfiprintf_r+0x1ea>
 8009558:	080099d5 	.word	0x080099d5
 800955c:	080099df 	.word	0x080099df
 8009560:	08006c5d 	.word	0x08006c5d
 8009564:	08009313 	.word	0x08009313
 8009568:	080099db 	.word	0x080099db

0800956c <__swbuf_r>:
 800956c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956e:	460e      	mov	r6, r1
 8009570:	4614      	mov	r4, r2
 8009572:	4605      	mov	r5, r0
 8009574:	b118      	cbz	r0, 800957e <__swbuf_r+0x12>
 8009576:	6a03      	ldr	r3, [r0, #32]
 8009578:	b90b      	cbnz	r3, 800957e <__swbuf_r+0x12>
 800957a:	f7fd ffe1 	bl	8007540 <__sinit>
 800957e:	69a3      	ldr	r3, [r4, #24]
 8009580:	60a3      	str	r3, [r4, #8]
 8009582:	89a3      	ldrh	r3, [r4, #12]
 8009584:	071a      	lsls	r2, r3, #28
 8009586:	d525      	bpl.n	80095d4 <__swbuf_r+0x68>
 8009588:	6923      	ldr	r3, [r4, #16]
 800958a:	b31b      	cbz	r3, 80095d4 <__swbuf_r+0x68>
 800958c:	6823      	ldr	r3, [r4, #0]
 800958e:	6922      	ldr	r2, [r4, #16]
 8009590:	1a98      	subs	r0, r3, r2
 8009592:	6963      	ldr	r3, [r4, #20]
 8009594:	b2f6      	uxtb	r6, r6
 8009596:	4283      	cmp	r3, r0
 8009598:	4637      	mov	r7, r6
 800959a:	dc04      	bgt.n	80095a6 <__swbuf_r+0x3a>
 800959c:	4621      	mov	r1, r4
 800959e:	4628      	mov	r0, r5
 80095a0:	f7ff f94e 	bl	8008840 <_fflush_r>
 80095a4:	b9e0      	cbnz	r0, 80095e0 <__swbuf_r+0x74>
 80095a6:	68a3      	ldr	r3, [r4, #8]
 80095a8:	3b01      	subs	r3, #1
 80095aa:	60a3      	str	r3, [r4, #8]
 80095ac:	6823      	ldr	r3, [r4, #0]
 80095ae:	1c5a      	adds	r2, r3, #1
 80095b0:	6022      	str	r2, [r4, #0]
 80095b2:	701e      	strb	r6, [r3, #0]
 80095b4:	6962      	ldr	r2, [r4, #20]
 80095b6:	1c43      	adds	r3, r0, #1
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d004      	beq.n	80095c6 <__swbuf_r+0x5a>
 80095bc:	89a3      	ldrh	r3, [r4, #12]
 80095be:	07db      	lsls	r3, r3, #31
 80095c0:	d506      	bpl.n	80095d0 <__swbuf_r+0x64>
 80095c2:	2e0a      	cmp	r6, #10
 80095c4:	d104      	bne.n	80095d0 <__swbuf_r+0x64>
 80095c6:	4621      	mov	r1, r4
 80095c8:	4628      	mov	r0, r5
 80095ca:	f7ff f939 	bl	8008840 <_fflush_r>
 80095ce:	b938      	cbnz	r0, 80095e0 <__swbuf_r+0x74>
 80095d0:	4638      	mov	r0, r7
 80095d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095d4:	4621      	mov	r1, r4
 80095d6:	4628      	mov	r0, r5
 80095d8:	f000 f806 	bl	80095e8 <__swsetup_r>
 80095dc:	2800      	cmp	r0, #0
 80095de:	d0d5      	beq.n	800958c <__swbuf_r+0x20>
 80095e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80095e4:	e7f4      	b.n	80095d0 <__swbuf_r+0x64>
	...

080095e8 <__swsetup_r>:
 80095e8:	b538      	push	{r3, r4, r5, lr}
 80095ea:	4b2a      	ldr	r3, [pc, #168]	; (8009694 <__swsetup_r+0xac>)
 80095ec:	4605      	mov	r5, r0
 80095ee:	6818      	ldr	r0, [r3, #0]
 80095f0:	460c      	mov	r4, r1
 80095f2:	b118      	cbz	r0, 80095fc <__swsetup_r+0x14>
 80095f4:	6a03      	ldr	r3, [r0, #32]
 80095f6:	b90b      	cbnz	r3, 80095fc <__swsetup_r+0x14>
 80095f8:	f7fd ffa2 	bl	8007540 <__sinit>
 80095fc:	89a3      	ldrh	r3, [r4, #12]
 80095fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009602:	0718      	lsls	r0, r3, #28
 8009604:	d422      	bmi.n	800964c <__swsetup_r+0x64>
 8009606:	06d9      	lsls	r1, r3, #27
 8009608:	d407      	bmi.n	800961a <__swsetup_r+0x32>
 800960a:	2309      	movs	r3, #9
 800960c:	602b      	str	r3, [r5, #0]
 800960e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009612:	81a3      	strh	r3, [r4, #12]
 8009614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009618:	e034      	b.n	8009684 <__swsetup_r+0x9c>
 800961a:	0758      	lsls	r0, r3, #29
 800961c:	d512      	bpl.n	8009644 <__swsetup_r+0x5c>
 800961e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009620:	b141      	cbz	r1, 8009634 <__swsetup_r+0x4c>
 8009622:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009626:	4299      	cmp	r1, r3
 8009628:	d002      	beq.n	8009630 <__swsetup_r+0x48>
 800962a:	4628      	mov	r0, r5
 800962c:	f7ff fdce 	bl	80091cc <_free_r>
 8009630:	2300      	movs	r3, #0
 8009632:	6363      	str	r3, [r4, #52]	; 0x34
 8009634:	89a3      	ldrh	r3, [r4, #12]
 8009636:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800963a:	81a3      	strh	r3, [r4, #12]
 800963c:	2300      	movs	r3, #0
 800963e:	6063      	str	r3, [r4, #4]
 8009640:	6923      	ldr	r3, [r4, #16]
 8009642:	6023      	str	r3, [r4, #0]
 8009644:	89a3      	ldrh	r3, [r4, #12]
 8009646:	f043 0308 	orr.w	r3, r3, #8
 800964a:	81a3      	strh	r3, [r4, #12]
 800964c:	6923      	ldr	r3, [r4, #16]
 800964e:	b94b      	cbnz	r3, 8009664 <__swsetup_r+0x7c>
 8009650:	89a3      	ldrh	r3, [r4, #12]
 8009652:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800965a:	d003      	beq.n	8009664 <__swsetup_r+0x7c>
 800965c:	4621      	mov	r1, r4
 800965e:	4628      	mov	r0, r5
 8009660:	f000 f840 	bl	80096e4 <__smakebuf_r>
 8009664:	89a0      	ldrh	r0, [r4, #12]
 8009666:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800966a:	f010 0301 	ands.w	r3, r0, #1
 800966e:	d00a      	beq.n	8009686 <__swsetup_r+0x9e>
 8009670:	2300      	movs	r3, #0
 8009672:	60a3      	str	r3, [r4, #8]
 8009674:	6963      	ldr	r3, [r4, #20]
 8009676:	425b      	negs	r3, r3
 8009678:	61a3      	str	r3, [r4, #24]
 800967a:	6923      	ldr	r3, [r4, #16]
 800967c:	b943      	cbnz	r3, 8009690 <__swsetup_r+0xa8>
 800967e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009682:	d1c4      	bne.n	800960e <__swsetup_r+0x26>
 8009684:	bd38      	pop	{r3, r4, r5, pc}
 8009686:	0781      	lsls	r1, r0, #30
 8009688:	bf58      	it	pl
 800968a:	6963      	ldrpl	r3, [r4, #20]
 800968c:	60a3      	str	r3, [r4, #8]
 800968e:	e7f4      	b.n	800967a <__swsetup_r+0x92>
 8009690:	2000      	movs	r0, #0
 8009692:	e7f7      	b.n	8009684 <__swsetup_r+0x9c>
 8009694:	20000078 	.word	0x20000078

08009698 <__swhatbuf_r>:
 8009698:	b570      	push	{r4, r5, r6, lr}
 800969a:	460c      	mov	r4, r1
 800969c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096a0:	2900      	cmp	r1, #0
 80096a2:	b096      	sub	sp, #88	; 0x58
 80096a4:	4615      	mov	r5, r2
 80096a6:	461e      	mov	r6, r3
 80096a8:	da0d      	bge.n	80096c6 <__swhatbuf_r+0x2e>
 80096aa:	89a3      	ldrh	r3, [r4, #12]
 80096ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80096b0:	f04f 0100 	mov.w	r1, #0
 80096b4:	bf0c      	ite	eq
 80096b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80096ba:	2340      	movne	r3, #64	; 0x40
 80096bc:	2000      	movs	r0, #0
 80096be:	6031      	str	r1, [r6, #0]
 80096c0:	602b      	str	r3, [r5, #0]
 80096c2:	b016      	add	sp, #88	; 0x58
 80096c4:	bd70      	pop	{r4, r5, r6, pc}
 80096c6:	466a      	mov	r2, sp
 80096c8:	f000 f848 	bl	800975c <_fstat_r>
 80096cc:	2800      	cmp	r0, #0
 80096ce:	dbec      	blt.n	80096aa <__swhatbuf_r+0x12>
 80096d0:	9901      	ldr	r1, [sp, #4]
 80096d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80096d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80096da:	4259      	negs	r1, r3
 80096dc:	4159      	adcs	r1, r3
 80096de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096e2:	e7eb      	b.n	80096bc <__swhatbuf_r+0x24>

080096e4 <__smakebuf_r>:
 80096e4:	898b      	ldrh	r3, [r1, #12]
 80096e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096e8:	079d      	lsls	r5, r3, #30
 80096ea:	4606      	mov	r6, r0
 80096ec:	460c      	mov	r4, r1
 80096ee:	d507      	bpl.n	8009700 <__smakebuf_r+0x1c>
 80096f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096f4:	6023      	str	r3, [r4, #0]
 80096f6:	6123      	str	r3, [r4, #16]
 80096f8:	2301      	movs	r3, #1
 80096fa:	6163      	str	r3, [r4, #20]
 80096fc:	b002      	add	sp, #8
 80096fe:	bd70      	pop	{r4, r5, r6, pc}
 8009700:	ab01      	add	r3, sp, #4
 8009702:	466a      	mov	r2, sp
 8009704:	f7ff ffc8 	bl	8009698 <__swhatbuf_r>
 8009708:	9900      	ldr	r1, [sp, #0]
 800970a:	4605      	mov	r5, r0
 800970c:	4630      	mov	r0, r6
 800970e:	f7fe ff91 	bl	8008634 <_malloc_r>
 8009712:	b948      	cbnz	r0, 8009728 <__smakebuf_r+0x44>
 8009714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009718:	059a      	lsls	r2, r3, #22
 800971a:	d4ef      	bmi.n	80096fc <__smakebuf_r+0x18>
 800971c:	f023 0303 	bic.w	r3, r3, #3
 8009720:	f043 0302 	orr.w	r3, r3, #2
 8009724:	81a3      	strh	r3, [r4, #12]
 8009726:	e7e3      	b.n	80096f0 <__smakebuf_r+0xc>
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	6020      	str	r0, [r4, #0]
 800972c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009730:	81a3      	strh	r3, [r4, #12]
 8009732:	9b00      	ldr	r3, [sp, #0]
 8009734:	6163      	str	r3, [r4, #20]
 8009736:	9b01      	ldr	r3, [sp, #4]
 8009738:	6120      	str	r0, [r4, #16]
 800973a:	b15b      	cbz	r3, 8009754 <__smakebuf_r+0x70>
 800973c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009740:	4630      	mov	r0, r6
 8009742:	f000 f81d 	bl	8009780 <_isatty_r>
 8009746:	b128      	cbz	r0, 8009754 <__smakebuf_r+0x70>
 8009748:	89a3      	ldrh	r3, [r4, #12]
 800974a:	f023 0303 	bic.w	r3, r3, #3
 800974e:	f043 0301 	orr.w	r3, r3, #1
 8009752:	81a3      	strh	r3, [r4, #12]
 8009754:	89a3      	ldrh	r3, [r4, #12]
 8009756:	431d      	orrs	r5, r3
 8009758:	81a5      	strh	r5, [r4, #12]
 800975a:	e7cf      	b.n	80096fc <__smakebuf_r+0x18>

0800975c <_fstat_r>:
 800975c:	b538      	push	{r3, r4, r5, lr}
 800975e:	4d07      	ldr	r5, [pc, #28]	; (800977c <_fstat_r+0x20>)
 8009760:	2300      	movs	r3, #0
 8009762:	4604      	mov	r4, r0
 8009764:	4608      	mov	r0, r1
 8009766:	4611      	mov	r1, r2
 8009768:	602b      	str	r3, [r5, #0]
 800976a:	f7f8 fc99 	bl	80020a0 <_fstat>
 800976e:	1c43      	adds	r3, r0, #1
 8009770:	d102      	bne.n	8009778 <_fstat_r+0x1c>
 8009772:	682b      	ldr	r3, [r5, #0]
 8009774:	b103      	cbz	r3, 8009778 <_fstat_r+0x1c>
 8009776:	6023      	str	r3, [r4, #0]
 8009778:	bd38      	pop	{r3, r4, r5, pc}
 800977a:	bf00      	nop
 800977c:	20000bb8 	.word	0x20000bb8

08009780 <_isatty_r>:
 8009780:	b538      	push	{r3, r4, r5, lr}
 8009782:	4d06      	ldr	r5, [pc, #24]	; (800979c <_isatty_r+0x1c>)
 8009784:	2300      	movs	r3, #0
 8009786:	4604      	mov	r4, r0
 8009788:	4608      	mov	r0, r1
 800978a:	602b      	str	r3, [r5, #0]
 800978c:	f7f8 fc98 	bl	80020c0 <_isatty>
 8009790:	1c43      	adds	r3, r0, #1
 8009792:	d102      	bne.n	800979a <_isatty_r+0x1a>
 8009794:	682b      	ldr	r3, [r5, #0]
 8009796:	b103      	cbz	r3, 800979a <_isatty_r+0x1a>
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	bd38      	pop	{r3, r4, r5, pc}
 800979c:	20000bb8 	.word	0x20000bb8

080097a0 <_raise_r>:
 80097a0:	291f      	cmp	r1, #31
 80097a2:	b538      	push	{r3, r4, r5, lr}
 80097a4:	4604      	mov	r4, r0
 80097a6:	460d      	mov	r5, r1
 80097a8:	d904      	bls.n	80097b4 <_raise_r+0x14>
 80097aa:	2316      	movs	r3, #22
 80097ac:	6003      	str	r3, [r0, #0]
 80097ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097b2:	bd38      	pop	{r3, r4, r5, pc}
 80097b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80097b6:	b112      	cbz	r2, 80097be <_raise_r+0x1e>
 80097b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097bc:	b94b      	cbnz	r3, 80097d2 <_raise_r+0x32>
 80097be:	4620      	mov	r0, r4
 80097c0:	f000 f830 	bl	8009824 <_getpid_r>
 80097c4:	462a      	mov	r2, r5
 80097c6:	4601      	mov	r1, r0
 80097c8:	4620      	mov	r0, r4
 80097ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097ce:	f000 b817 	b.w	8009800 <_kill_r>
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d00a      	beq.n	80097ec <_raise_r+0x4c>
 80097d6:	1c59      	adds	r1, r3, #1
 80097d8:	d103      	bne.n	80097e2 <_raise_r+0x42>
 80097da:	2316      	movs	r3, #22
 80097dc:	6003      	str	r3, [r0, #0]
 80097de:	2001      	movs	r0, #1
 80097e0:	e7e7      	b.n	80097b2 <_raise_r+0x12>
 80097e2:	2400      	movs	r4, #0
 80097e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097e8:	4628      	mov	r0, r5
 80097ea:	4798      	blx	r3
 80097ec:	2000      	movs	r0, #0
 80097ee:	e7e0      	b.n	80097b2 <_raise_r+0x12>

080097f0 <raise>:
 80097f0:	4b02      	ldr	r3, [pc, #8]	; (80097fc <raise+0xc>)
 80097f2:	4601      	mov	r1, r0
 80097f4:	6818      	ldr	r0, [r3, #0]
 80097f6:	f7ff bfd3 	b.w	80097a0 <_raise_r>
 80097fa:	bf00      	nop
 80097fc:	20000078 	.word	0x20000078

08009800 <_kill_r>:
 8009800:	b538      	push	{r3, r4, r5, lr}
 8009802:	4d07      	ldr	r5, [pc, #28]	; (8009820 <_kill_r+0x20>)
 8009804:	2300      	movs	r3, #0
 8009806:	4604      	mov	r4, r0
 8009808:	4608      	mov	r0, r1
 800980a:	4611      	mov	r1, r2
 800980c:	602b      	str	r3, [r5, #0]
 800980e:	f7f8 fbe8 	bl	8001fe2 <_kill>
 8009812:	1c43      	adds	r3, r0, #1
 8009814:	d102      	bne.n	800981c <_kill_r+0x1c>
 8009816:	682b      	ldr	r3, [r5, #0]
 8009818:	b103      	cbz	r3, 800981c <_kill_r+0x1c>
 800981a:	6023      	str	r3, [r4, #0]
 800981c:	bd38      	pop	{r3, r4, r5, pc}
 800981e:	bf00      	nop
 8009820:	20000bb8 	.word	0x20000bb8

08009824 <_getpid_r>:
 8009824:	f7f8 bbd5 	b.w	8001fd2 <_getpid>

08009828 <_init>:
 8009828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800982a:	bf00      	nop
 800982c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800982e:	bc08      	pop	{r3}
 8009830:	469e      	mov	lr, r3
 8009832:	4770      	bx	lr

08009834 <_fini>:
 8009834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009836:	bf00      	nop
 8009838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800983a:	bc08      	pop	{r3}
 800983c:	469e      	mov	lr, r3
 800983e:	4770      	bx	lr

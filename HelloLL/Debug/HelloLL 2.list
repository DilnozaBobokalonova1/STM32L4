
HelloLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005878  08005878  00015878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058c0  080058c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080058c0  080058c0  000158c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058c8  080058c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058c8  080058c8  000158c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058cc  080058cc  000158cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080058d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000798  2000000c  080058dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  080058dc  000207a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018965  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003320  00000000  00000000  000389e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001700  00000000  00000000  0003bd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011cc  00000000  00000000  0003d408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002904c  00000000  00000000  0003e5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a1a8  00000000  00000000  00067620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f960b  00000000  00000000  000817c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000062f0  00000000  00000000  0017add4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001810c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005860 	.word	0x08005860

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005860 	.word	0x08005860

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <__NVIC_GetPriorityGrouping+0x18>)
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	0a1b      	lsrs	r3, r3, #8
 80004ce:	f003 0307 	and.w	r3, r3, #7
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	e000ed00 	.word	0xe000ed00

080004e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	db0b      	blt.n	800050a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	f003 021f 	and.w	r2, r3, #31
 80004f8:	4907      	ldr	r1, [pc, #28]	; (8000518 <__NVIC_EnableIRQ+0x38>)
 80004fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fe:	095b      	lsrs	r3, r3, #5
 8000500:	2001      	movs	r0, #1
 8000502:	fa00 f202 	lsl.w	r2, r0, r2
 8000506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	e000e100 	.word	0xe000e100

0800051c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	6039      	str	r1, [r7, #0]
 8000526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800052c:	2b00      	cmp	r3, #0
 800052e:	db0a      	blt.n	8000546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	b2da      	uxtb	r2, r3
 8000534:	490c      	ldr	r1, [pc, #48]	; (8000568 <__NVIC_SetPriority+0x4c>)
 8000536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800053a:	0112      	lsls	r2, r2, #4
 800053c:	b2d2      	uxtb	r2, r2
 800053e:	440b      	add	r3, r1
 8000540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000544:	e00a      	b.n	800055c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	b2da      	uxtb	r2, r3
 800054a:	4908      	ldr	r1, [pc, #32]	; (800056c <__NVIC_SetPriority+0x50>)
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	f003 030f 	and.w	r3, r3, #15
 8000552:	3b04      	subs	r3, #4
 8000554:	0112      	lsls	r2, r2, #4
 8000556:	b2d2      	uxtb	r2, r2
 8000558:	440b      	add	r3, r1
 800055a:	761a      	strb	r2, [r3, #24]
}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	e000e100 	.word	0xe000e100
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000570:	b480      	push	{r7}
 8000572:	b089      	sub	sp, #36	; 0x24
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	f003 0307 	and.w	r3, r3, #7
 8000582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000584:	69fb      	ldr	r3, [r7, #28]
 8000586:	f1c3 0307 	rsb	r3, r3, #7
 800058a:	2b04      	cmp	r3, #4
 800058c:	bf28      	it	cs
 800058e:	2304      	movcs	r3, #4
 8000590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000592:	69fb      	ldr	r3, [r7, #28]
 8000594:	3304      	adds	r3, #4
 8000596:	2b06      	cmp	r3, #6
 8000598:	d902      	bls.n	80005a0 <NVIC_EncodePriority+0x30>
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	3b03      	subs	r3, #3
 800059e:	e000      	b.n	80005a2 <NVIC_EncodePriority+0x32>
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005a8:	69bb      	ldr	r3, [r7, #24]
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	43da      	mvns	r2, r3
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	401a      	ands	r2, r3
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	fa01 f303 	lsl.w	r3, r1, r3
 80005c2:	43d9      	mvns	r1, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c8:	4313      	orrs	r3, r2
         );
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3724      	adds	r7, #36	; 0x24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
	...

080005d8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80005d8:	b480      	push	{r7}
 80005da:	b087      	sub	sp, #28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80005e2:	4a17      	ldr	r2, [pc, #92]	; (8000640 <LL_SYSCFG_SetEXTISource+0x68>)
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	3302      	adds	r3, #2
 80005ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	0c1b      	lsrs	r3, r3, #16
 80005f2:	43db      	mvns	r3, r3
 80005f4:	ea02 0103 	and.w	r1, r2, r3
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	0c1b      	lsrs	r3, r3, #16
 80005fc:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005fe:	693b      	ldr	r3, [r7, #16]
 8000600:	fa93 f3a3 	rbit	r3, r3
 8000604:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d101      	bne.n	8000614 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000610:	2320      	movs	r3, #32
 8000612:	e003      	b.n	800061c <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	fab3 f383 	clz	r3, r3
 800061a:	b2db      	uxtb	r3, r3
 800061c:	461a      	mov	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	fa03 f202 	lsl.w	r2, r3, r2
 8000624:	4806      	ldr	r0, [pc, #24]	; (8000640 <LL_SYSCFG_SetEXTISource+0x68>)
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	430a      	orrs	r2, r1
 800062c:	3302      	adds	r3, #2
 800062e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000632:	bf00      	nop
 8000634:	371c      	adds	r7, #28
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40010000 	.word	0x40010000

08000644 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000644:	b480      	push	{r7}
 8000646:	b08b      	sub	sp, #44	; 0x2c
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	fa93 f3a3 	rbit	r3, r3
 800065e:	613b      	str	r3, [r7, #16]
  return result;
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d101      	bne.n	800066e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800066a:	2320      	movs	r3, #32
 800066c:	e003      	b.n	8000676 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800066e:	69bb      	ldr	r3, [r7, #24]
 8000670:	fab3 f383 	clz	r3, r3
 8000674:	b2db      	uxtb	r3, r3
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	2103      	movs	r1, #3
 800067a:	fa01 f303 	lsl.w	r3, r1, r3
 800067e:	43db      	mvns	r3, r3
 8000680:	401a      	ands	r2, r3
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000686:	6a3b      	ldr	r3, [r7, #32]
 8000688:	fa93 f3a3 	rbit	r3, r3
 800068c:	61fb      	str	r3, [r7, #28]
  return result;
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000694:	2b00      	cmp	r3, #0
 8000696:	d101      	bne.n	800069c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000698:	2320      	movs	r3, #32
 800069a:	e003      	b.n	80006a4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800069c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069e:	fab3 f383 	clz	r3, r3
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	6879      	ldr	r1, [r7, #4]
 80006a8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ac:	431a      	orrs	r2, r3
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	601a      	str	r2, [r3, #0]
}
 80006b2:	bf00      	nop
 80006b4:	372c      	adds	r7, #44	; 0x2c
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80006be:	b480      	push	{r7}
 80006c0:	b08b      	sub	sp, #44	; 0x2c
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	60f8      	str	r0, [r7, #12]
 80006c6:	60b9      	str	r1, [r7, #8]
 80006c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	68da      	ldr	r2, [r3, #12]
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	fa93 f3a3 	rbit	r3, r3
 80006d8:	613b      	str	r3, [r7, #16]
  return result;
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d101      	bne.n	80006e8 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80006e4:	2320      	movs	r3, #32
 80006e6:	e003      	b.n	80006f0 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80006e8:	69bb      	ldr	r3, [r7, #24]
 80006ea:	fab3 f383 	clz	r3, r3
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	2103      	movs	r1, #3
 80006f4:	fa01 f303 	lsl.w	r3, r1, r3
 80006f8:	43db      	mvns	r3, r3
 80006fa:	401a      	ands	r2, r3
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000700:	6a3b      	ldr	r3, [r7, #32]
 8000702:	fa93 f3a3 	rbit	r3, r3
 8000706:	61fb      	str	r3, [r7, #28]
  return result;
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000712:	2320      	movs	r3, #32
 8000714:	e003      	b.n	800071e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000718:	fab3 f383 	clz	r3, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	6879      	ldr	r1, [r7, #4]
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	431a      	orrs	r2, r3
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	60da      	str	r2, [r3, #12]
}
 800072c:	bf00      	nop
 800072e:	372c      	adds	r7, #44	; 0x2c
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <LL_GPIO_EnablePinAnalogControl>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	431a      	orrs	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800075a:	b480      	push	{r7}
 800075c:	b083      	sub	sp, #12
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
 8000762:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	691a      	ldr	r2, [r3, #16]
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	4013      	ands	r3, r2
 800076c:	683a      	ldr	r2, [r7, #0]
 800076e:	429a      	cmp	r2, r3
 8000770:	d101      	bne.n	8000776 <LL_GPIO_IsInputPinSet+0x1c>
 8000772:	2301      	movs	r3, #1
 8000774:	e000      	b.n	8000778 <LL_GPIO_IsInputPinSet+0x1e>
 8000776:	2300      	movs	r3, #0
}
 8000778:	4618      	mov	r0, r3
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	683a      	ldr	r2, [r7, #0]
 8000792:	619a      	str	r2, [r3, #24]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	683a      	ldr	r2, [r7, #0]
 80007ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80007c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007c8:	4907      	ldr	r1, [pc, #28]	; (80007e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80007d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4013      	ands	r3, r2
 80007d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007da:	68fb      	ldr	r3, [r7, #12]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	40021000 	.word	0x40021000

080007ec <LL_GetUID_Word0>:
/**
  * @brief  Get Word0 of the unique device identifier (UID based on 96 bits)
  * @retval UID[31:0]: X and Y coordinates on the wafer expressed in BCD format
  */
__STATIC_INLINE uint32_t LL_GetUID_Word0(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID_BASE_ADDRESS)));
 80007f0:	4b03      	ldr	r3, [pc, #12]	; (8000800 <LL_GetUID_Word0+0x14>)
 80007f2:	681b      	ldr	r3, [r3, #0]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	1fff7590 	.word	0x1fff7590

08000804 <LL_GetUID_Word1>:
/**
  * @brief  Get Word1 of the unique device identifier (UID based on 96 bits)
  * @retval UID[63:32]: Wafer number (UID[39:32]) & LOT_NUM[23:0] (UID[63:40])
  */
__STATIC_INLINE uint32_t LL_GetUID_Word1(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 4U))));
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <LL_GetUID_Word1+0x14>)
 800080a:	681b      	ldr	r3, [r3, #0]
}
 800080c:	4618      	mov	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	1fff7594 	.word	0x1fff7594

0800081c <LL_GetUID_Word2>:
/**
  * @brief  Get Word2 of the unique device identifier (UID based on 96 bits)
  * @retval UID[95:64]: Lot number (ASCII encoded) - LOT_NUM[55:24]
  */
__STATIC_INLINE uint32_t LL_GetUID_Word2(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 8U))));
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <LL_GetUID_Word2+0x14>)
 8000822:	681b      	ldr	r3, [r3, #0]
}
 8000824:	4618      	mov	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	1fff7598 	.word	0x1fff7598

08000834 <LL_GetFlashSize>:
  * @note   This bitfield indicates the size of the device Flash memory expressed in
  *         Kbytes. As an example, 0x040 corresponds to 64 Kbytes.
  * @retval FLASH_SIZE[15:0]: Flash memory size
  */
__STATIC_INLINE uint32_t LL_GetFlashSize(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)FLASHSIZE_BASE_ADDRESS)) & 0xFFFFU);
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <LL_GetFlashSize+0x14>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	b29b      	uxth	r3, r3
}
 800083e:	4618      	mov	r0, r3
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	1fff75e0 	.word	0x1fff75e0

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000852:	f001 f8d6 	bl	8001a02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000856:	f000 f837 	bl	80008c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085a:	f000 f9ff 	bl	8000c5c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800085e:	f000 f895 	bl	800098c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000862:	f000 f8cb 	bl	80009fc <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000866:	f000 f907 	bl	8000a78 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800086a:	f000 f92b 	bl	8000ac4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800086e:	f000 f967 	bl	8000b40 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000872:	f000 f995 	bl	8000ba0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000876:	f000 f9c3 	bl	8000c00 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //get size of the flash mem
	  uint32_t flash_size = LL_GetFlashSize();
 800087a:	f7ff ffdb 	bl	8000834 <LL_GetFlashSize>
 800087e:	60f8      	str	r0, [r7, #12]

	  //set the uid as an array of size 3
	  uint32_t uid[3];
	  uid[0] = LL_GetUID_Word0();
 8000880:	f7ff ffb4 	bl	80007ec <LL_GetUID_Word0>
 8000884:	4603      	mov	r3, r0
 8000886:	603b      	str	r3, [r7, #0]
	  uid[1] = LL_GetUID_Word1();
 8000888:	f7ff ffbc 	bl	8000804 <LL_GetUID_Word1>
 800088c:	4603      	mov	r3, r0
 800088e:	607b      	str	r3, [r7, #4]
	  uid[2] = LL_GetUID_Word2();
 8000890:	f7ff ffc4 	bl	800081c <LL_GetUID_Word2>
 8000894:	4603      	mov	r3, r0
 8000896:	60bb      	str	r3, [r7, #8]

	  //if the pin has been "pressed" aka set to 1 at pin position of button, have LED2 on
	  if (LL_GPIO_IsInputPinSet(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin)) {
 8000898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089c:	4808      	ldr	r0, [pc, #32]	; (80008c0 <main+0x74>)
 800089e:	f7ff ff5c 	bl	800075a <LL_GPIO_IsInputPinSet>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d005      	beq.n	80008b4 <main+0x68>
		  //turn on the LED
		  LL_GPIO_SetOutputPin(LED2_GPIO_Port, LED2_Pin);
 80008a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <main+0x78>)
 80008ae:	f7ff ff69 	bl	8000784 <LL_GPIO_SetOutputPin>
 80008b2:	e7e2      	b.n	800087a <main+0x2e>
	  } else {
		  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 80008b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b8:	4802      	ldr	r0, [pc, #8]	; (80008c4 <main+0x78>)
 80008ba:	f7ff ff71 	bl	80007a0 <LL_GPIO_ResetOutputPin>
  {
 80008be:	e7dc      	b.n	800087a <main+0x2e>
 80008c0:	48000800 	.word	0x48000800
 80008c4:	48000400 	.word	0x48000400

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b096      	sub	sp, #88	; 0x58
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	2244      	movs	r2, #68	; 0x44
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f004 ff96 	bl	8005808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	463b      	mov	r3, r7
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008ee:	f001 ff55 	bl	800279c <HAL_PWREx_ControlVoltageScaling>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008f8:	f000 fcde 	bl	80012b8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008fc:	f001 ff30 	bl	8002760 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000900:	4b21      	ldr	r3, [pc, #132]	; (8000988 <SystemClock_Config+0xc0>)
 8000902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000906:	4a20      	ldr	r2, [pc, #128]	; (8000988 <SystemClock_Config+0xc0>)
 8000908:	f023 0318 	bic.w	r3, r3, #24
 800090c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000910:	2314      	movs	r3, #20
 8000912:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000914:	2301      	movs	r3, #1
 8000916:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000918:	2301      	movs	r3, #1
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000920:	2360      	movs	r3, #96	; 0x60
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000924:	2302      	movs	r3, #2
 8000926:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000928:	2301      	movs	r3, #1
 800092a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800092c:	2301      	movs	r3, #1
 800092e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000930:	2328      	movs	r3, #40	; 0x28
 8000932:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000934:	2307      	movs	r3, #7
 8000936:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000938:	2302      	movs	r3, #2
 800093a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800093c:	2302      	movs	r3, #2
 800093e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4618      	mov	r0, r3
 8000946:	f002 f84b 	bl	80029e0 <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000950:	f000 fcb2 	bl	80012b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	230f      	movs	r3, #15
 8000956:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000958:	2303      	movs	r3, #3
 800095a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	2104      	movs	r1, #4
 800096c:	4618      	mov	r0, r3
 800096e:	f002 fc13 	bl	8003198 <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000978:	f000 fc9e 	bl	80012b8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800097c:	f003 f91a 	bl	8003bb4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000980:	bf00      	nop
 8000982:	3758      	adds	r7, #88	; 0x58
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40021000 	.word	0x40021000

0800098c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_DFSDM1_Init+0x68>)
 8000992:	4a19      	ldr	r2, [pc, #100]	; (80009f8 <MX_DFSDM1_Init+0x6c>)
 8000994:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_DFSDM1_Init+0x68>)
 8000998:	2201      	movs	r2, #1
 800099a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_DFSDM1_Init+0x68>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_DFSDM1_Init+0x68>)
 80009a4:	2202      	movs	r2, #2
 80009a6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_DFSDM1_Init+0x68>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_DFSDM1_Init+0x68>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_DFSDM1_Init+0x68>)
 80009b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ba:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80009bc:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <MX_DFSDM1_Init+0x68>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_DFSDM1_Init+0x68>)
 80009c4:	2204      	movs	r2, #4
 80009c6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <MX_DFSDM1_Init+0x68>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_DFSDM1_Init+0x68>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <MX_DFSDM1_Init+0x68>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_DFSDM1_Init+0x68>)
 80009dc:	2200      	movs	r2, #0
 80009de:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_DFSDM1_Init+0x68>)
 80009e2:	f001 f98d 	bl	8001d00 <HAL_DFSDM_ChannelInit>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80009ec:	f000 fc64 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000028 	.word	0x20000028
 80009f8:	40016020 	.word	0x40016020

080009fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a02:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <MX_I2C2_Init+0x78>)
 8000a04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a08:	f640 6214 	movw	r2, #3604	; 0xe14
 8000a0c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a3a:	f001 fc17 	bl	800226c <HAL_I2C_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a44:	f000 fc38 	bl	80012b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4809      	ldr	r0, [pc, #36]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a4c:	f001 fca9 	bl	80023a2 <HAL_I2CEx_ConfigAnalogFilter>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000a56:	f000 fc2f 	bl	80012b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a5e:	f001 fceb 	bl	8002438 <HAL_I2CEx_ConfigDigitalFilter>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000a68:	f000 fc26 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000060 	.word	0x20000060
 8000a74:	40005800 	.word	0x40005800

08000a78 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_QUADSPI_Init+0x44>)
 8000a7e:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <MX_QUADSPI_Init+0x48>)
 8000a80:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_QUADSPI_Init+0x44>)
 8000a84:	2202      	movs	r2, #2
 8000a86:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_QUADSPI_Init+0x44>)
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_QUADSPI_Init+0x44>)
 8000a90:	2210      	movs	r2, #16
 8000a92:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_QUADSPI_Init+0x44>)
 8000a96:	2217      	movs	r2, #23
 8000a98:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <MX_QUADSPI_Init+0x44>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_QUADSPI_Init+0x44>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_QUADSPI_Init+0x44>)
 8000aa8:	f001 fede 	bl	8002868 <HAL_QSPI_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000ab2:	f000 fc01 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200000b4 	.word	0x200000b4
 8000ac0:	a0001000 	.word	0xa0001000

08000ac4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_SPI3_Init+0x74>)
 8000aca:	4a1c      	ldr	r2, [pc, #112]	; (8000b3c <MX_SPI3_Init+0x78>)
 8000acc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_SPI3_Init+0x74>)
 8000ad0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ad4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_SPI3_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_SPI3_Init+0x74>)
 8000ade:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ae2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_SPI3_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_SPI3_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_SPI3_Init+0x74>)
 8000af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_SPI3_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_SPI3_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_SPI3_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_SPI3_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_SPI3_Init+0x74>)
 8000b12:	2207      	movs	r2, #7
 8000b14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_SPI3_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_SPI3_Init+0x74>)
 8000b1e:	2208      	movs	r2, #8
 8000b20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_SPI3_Init+0x74>)
 8000b24:	f003 fa28 	bl	8003f78 <HAL_SPI_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b2e:	f000 fbc3 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000f8 	.word	0x200000f8
 8000b3c:	40003c00 	.word	0x40003c00

08000b40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_USART1_UART_Init+0x58>)
 8000b46:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <MX_USART1_UART_Init+0x5c>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <MX_USART1_UART_Init+0x58>)
 8000b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_USART1_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_USART1_UART_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_USART1_UART_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_USART1_UART_Init+0x58>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_USART1_UART_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_USART1_UART_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_USART1_UART_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_USART1_UART_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_USART1_UART_Init+0x58>)
 8000b84:	f003 fa9b 	bl	80040be <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b8e:	f000 fb93 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2000015c 	.word	0x2000015c
 8000b9c:	40013800 	.word	0x40013800

08000ba0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_USART3_UART_Init+0x58>)
 8000ba6:	4a15      	ldr	r2, [pc, #84]	; (8000bfc <MX_USART3_UART_Init+0x5c>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_USART3_UART_Init+0x58>)
 8000bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_USART3_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_USART3_UART_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_USART3_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_USART3_UART_Init+0x58>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_USART3_UART_Init+0x58>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_USART3_UART_Init+0x58>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_USART3_UART_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_USART3_UART_Init+0x58>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_USART3_UART_Init+0x58>)
 8000be4:	f003 fa6b 	bl	80040be <HAL_UART_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bee:	f000 fb63 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200001e4 	.word	0x200001e4
 8000bfc:	40004800 	.word	0x40004800

08000c00 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0e:	2206      	movs	r2, #6
 8000c10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c14:	2202      	movs	r2, #2
 8000c16:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c44:	f001 fc44 	bl	80024d0 <HAL_PCD_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c4e:	f000 fb33 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000026c 	.word	0x2000026c

08000c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
 8000c7c:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8000c7e:	2010      	movs	r0, #16
 8000c80:	f7ff fd9c 	bl	80007bc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000c84:	2004      	movs	r0, #4
 8000c86:	f7ff fd99 	bl	80007bc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f7ff fd96 	bl	80007bc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000c90:	2002      	movs	r0, #2
 8000c92:	f7ff fd93 	bl	80007bc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8000c96:	2008      	movs	r0, #8
 8000c98:	f7ff fd90 	bl	80007bc <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin);
 8000c9c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000ca0:	48c9      	ldr	r0, [pc, #804]	; (8000fc8 <MX_GPIO_Init+0x36c>)
 8000ca2:	f7ff fd7d 	bl	80007a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin);
 8000ca6:	f248 1104 	movw	r1, #33028	; 0x8104
 8000caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cae:	f7ff fd77 	bl	80007a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000cb2:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000cb6:	48c5      	ldr	r0, [pc, #788]	; (8000fcc <MX_GPIO_Init+0x370>)
 8000cb8:	f7ff fd72 	bl	80007a0 <LL_GPIO_ResetOutputPin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin);
 8000cbc:	f241 0181 	movw	r1, #4225	; 0x1081
 8000cc0:	48c3      	ldr	r0, [pc, #780]	; (8000fd0 <MX_GPIO_Init+0x374>)
 8000cc2:	f7ff fd6d 	bl	80007a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin);
 8000cc6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000cca:	48c2      	ldr	r0, [pc, #776]	; (8000fd4 <MX_GPIO_Init+0x378>)
 8000ccc:	f7ff fd68 	bl	80007a0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin);
 8000cd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd4:	48be      	ldr	r0, [pc, #760]	; (8000fd0 <MX_GPIO_Init+0x374>)
 8000cd6:	f7ff fd55 	bl	8000784 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin);
 8000cda:	2120      	movs	r1, #32
 8000cdc:	48bb      	ldr	r0, [pc, #748]	; (8000fcc <MX_GPIO_Init+0x370>)
 8000cde:	f7ff fd51 	bl	8000784 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin);
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	48b8      	ldr	r0, [pc, #736]	; (8000fc8 <MX_GPIO_Init+0x36c>)
 8000ce6:	f7ff fd4d 	bl	8000784 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000cea:	f240 1315 	movw	r3, #277	; 0x115
 8000cee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	4619      	mov	r1, r3
 8000d04:	48b0      	ldr	r0, [pc, #704]	; (8000fc8 <MX_GPIO_Init+0x36c>)
 8000d06:	f004 fa66 	bl	80051d6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000d0a:	233f      	movs	r3, #63	; 0x3f
 8000d0c:	607b      	str	r3, [r7, #4]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	4619      	mov	r1, r3
 8000d1a:	48ae      	ldr	r0, [pc, #696]	; (8000fd4 <MX_GPIO_Init+0x378>)
 8000d1c:	f004 fa5b 	bl	80051d6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000d20:	2303      	movs	r3, #3
 8000d22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d24:	2302      	movs	r3, #2
 8000d26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8000d34:	2308      	movs	r3, #8
 8000d36:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d40:	f004 fa49 	bl	80051d6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000d44:	f248 1304 	movw	r3, #33028	; 0x8104
 8000d48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d62:	f004 fa38 	bl	80051d6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000d66:	2308      	movs	r3, #8
 8000d68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	4619      	mov	r1, r3
 8000d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d86:	f004 fa26 	bl	80051d6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000d8a:	2310      	movs	r3, #16
 8000d8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9e:	f004 fa1a 	bl	80051d6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000da2:	23e0      	movs	r3, #224	; 0xe0
 8000da4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000da6:	2302      	movs	r3, #2
 8000da8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000db6:	2305      	movs	r3, #5
 8000db8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc2:	f004 fa08 	bl	80051d6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	487d      	ldr	r0, [pc, #500]	; (8000fcc <MX_GPIO_Init+0x370>)
 8000dd8:	f004 f9fd 	bl	80051d6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ddc:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000de0:	607b      	str	r3, [r7, #4]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000de2:	2301      	movs	r3, #1
 8000de4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	4619      	mov	r1, r3
 8000df6:	4875      	ldr	r0, [pc, #468]	; (8000fcc <MX_GPIO_Init+0x370>)
 8000df8:	f004 f9ed 	bl	80051d6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000dfc:	f243 0381 	movw	r3, #12417	; 0x3081
 8000e00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e02:	2301      	movs	r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	4619      	mov	r1, r3
 8000e16:	486e      	ldr	r0, [pc, #440]	; (8000fd0 <MX_GPIO_Init+0x374>)
 8000e18:	f004 f9dd 	bl	80051d6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000e1c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e22:	2301      	movs	r3, #1
 8000e24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	4867      	ldr	r0, [pc, #412]	; (8000fd4 <MX_GPIO_Init+0x378>)
 8000e38:	f004 f9cd 	bl	80051d6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e40:	2302      	movs	r3, #2
 8000e42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000e50:	2305      	movs	r3, #5
 8000e52:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	4619      	mov	r1, r3
 8000e58:	485d      	ldr	r0, [pc, #372]	; (8000fd0 <MX_GPIO_Init+0x374>)
 8000e5a:	f004 f9bc 	bl	80051d6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000e5e:	2378      	movs	r3, #120	; 0x78
 8000e60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e62:	2302      	movs	r3, #2
 8000e64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000e72:	2307      	movs	r3, #7
 8000e74:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4855      	ldr	r0, [pc, #340]	; (8000fd0 <MX_GPIO_Init+0x374>)
 8000e7c:	f004 f9ab 	bl	80051d6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000e80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e86:	2302      	movs	r3, #2
 8000e88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000e96:	2304      	movs	r3, #4
 8000e98:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	484b      	ldr	r0, [pc, #300]	; (8000fcc <MX_GPIO_Init+0x370>)
 8000ea0:	f004 f999 	bl	80051d6 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE3);
 8000ea4:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8000ea8:	2004      	movs	r0, #4
 8000eaa:	f7ff fb95 	bl	80005d8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE5);
 8000eae:	494a      	ldr	r1, [pc, #296]	; (8000fd8 <MX_GPIO_Init+0x37c>)
 8000eb0:	2004      	movs	r0, #4
 8000eb2:	f7ff fb91 	bl	80005d8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE6);
 8000eb6:	4949      	ldr	r1, [pc, #292]	; (8000fdc <MX_GPIO_Init+0x380>)
 8000eb8:	2004      	movs	r0, #4
 8000eba:	f7ff fb8d 	bl	80005d8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000ebe:	4948      	ldr	r1, [pc, #288]	; (8000fe0 <MX_GPIO_Init+0x384>)
 8000ec0:	2002      	movs	r0, #2
 8000ec2:	f7ff fb89 	bl	80005d8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 8000ec6:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff fb84 	bl	80005d8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE10);
 8000ed0:	4944      	ldr	r1, [pc, #272]	; (8000fe4 <MX_GPIO_Init+0x388>)
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	f7ff fb80 	bl	80005d8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE11);
 8000ed8:	4943      	ldr	r1, [pc, #268]	; (8000fe8 <MX_GPIO_Init+0x38c>)
 8000eda:	2003      	movs	r0, #3
 8000edc:	f7ff fb7c 	bl	80005d8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE14);
 8000ee0:	4942      	ldr	r1, [pc, #264]	; (8000fec <MX_GPIO_Init+0x390>)
 8000ee2:	2003      	movs	r0, #3
 8000ee4:	f7ff fb78 	bl	80005d8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE15);
 8000ee8:	4941      	ldr	r1, [pc, #260]	; (8000ff0 <MX_GPIO_Init+0x394>)
 8000eea:	2003      	movs	r0, #3
 8000eec:	f7ff fb74 	bl	80005d8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE7);
 8000ef0:	4940      	ldr	r1, [pc, #256]	; (8000ff4 <MX_GPIO_Init+0x398>)
 8000ef2:	2002      	movs	r0, #2
 8000ef4:	f7ff fb70 	bl	80005d8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE8);
 8000ef8:	493f      	ldr	r1, [pc, #252]	; (8000ff8 <MX_GPIO_Init+0x39c>)
 8000efa:	2002      	movs	r0, #2
 8000efc:	f7ff fb6c 	bl	80005d8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE2);
 8000f00:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000f04:	2003      	movs	r0, #3
 8000f06:	f7ff fb67 	bl	80005d8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE1);
 8000f0a:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8000f0e:	2004      	movs	r0, #4
 8000f10:	f7ff fb62 	bl	80005d8 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8000f14:	2308      	movs	r3, #8
 8000f16:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4618      	mov	r0, r3
 8000f34:	f003 ff10 	bl	8004d58 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 8000f38:	2320      	movs	r3, #32
 8000f3a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f40:	2301      	movs	r3, #1
 8000f42:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 fefe 	bl	8004d58 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 8000f5c:	2340      	movs	r3, #64	; 0x40
 8000f5e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f64:	2301      	movs	r3, #1
 8000f66:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000f70:	2301      	movs	r3, #1
 8000f72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 feec 	bl	8004d58 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000f80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f84:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000f96:	2302      	movs	r3, #2
 8000f98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f003 fed9 	bl	8004d58 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e019      	b.n	8000ffc <MX_GPIO_Init+0x3a0>
 8000fc8:	48001000 	.word	0x48001000
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	48000c00 	.word	0x48000c00
 8000fd4:	48000800 	.word	0x48000800
 8000fd8:	00f00001 	.word	0x00f00001
 8000fdc:	0f000001 	.word	0x0f000001
 8000fe0:	00f00003 	.word	0x00f00003
 8000fe4:	0f000002 	.word	0x0f000002
 8000fe8:	f0000002 	.word	0xf0000002
 8000fec:	0f000003 	.word	0x0f000003
 8000ff0:	f0000003 	.word	0xf0000003
 8000ff4:	f0000001 	.word	0xf0000001
 8000ff8:	000f0002 	.word	0x000f0002
 8000ffc:	f003 feac 	bl	8004d58 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_10;
 8001000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001004:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800100a:	2301      	movs	r3, #1
 800100c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001010:	2300      	movs	r3, #0
 8001012:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001016:	2301      	movs	r3, #1
 8001018:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4618      	mov	r0, r3
 8001022:	f003 fe99 	bl	8004d58 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_11;
 8001026:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800102a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001030:	2301      	movs	r3, #1
 8001032:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001036:	2300      	movs	r3, #0
 8001038:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800103c:	2301      	movs	r3, #1
 800103e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4618      	mov	r0, r3
 8001048:	f003 fe86 	bl	8004d58 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 800104c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001050:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001056:	2301      	movs	r3, #1
 8001058:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800105c:	2300      	movs	r3, #0
 800105e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001062:	2301      	movs	r3, #1
 8001064:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4618      	mov	r0, r3
 800106e:	f003 fe73 	bl	8004d58 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8001072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001076:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001078:	2300      	movs	r3, #0
 800107a:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800107c:	2301      	movs	r3, #1
 800107e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001082:	2300      	movs	r3, #0
 8001084:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001088:	2301      	movs	r3, #1
 800108a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4618      	mov	r0, r3
 8001094:	f003 fe60 	bl	8004d58 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_7;
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80010a0:	2301      	movs	r3, #1
 80010a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80010ac:	2301      	movs	r3, #1
 80010ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 fe4e 	bl	8004d58 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 80010bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c0:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80010c6:	2301      	movs	r3, #1
 80010c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80010d2:	2301      	movs	r3, #1
 80010d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fe3b 	bl	8004d58 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80010e2:	2304      	movs	r3, #4
 80010e4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80010ea:	2301      	movs	r3, #1
 80010ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4618      	mov	r0, r3
 8001102:	f003 fe29 	bl	8004d58 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8001106:	2302      	movs	r3, #2
 8001108:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800110e:	2301      	movs	r3, #1
 8001110:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001114:	2300      	movs	r3, #0
 8001116:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800111a:	2301      	movs	r3, #1
 800111c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4618      	mov	r0, r3
 8001126:	f003 fe17 	bl	8004d58 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(USB_OTG_FS_OVRCR_EXTI3_GPIO_Port, USB_OTG_FS_OVRCR_EXTI3_Pin, LL_GPIO_PULL_NO);
 800112a:	2200      	movs	r2, #0
 800112c:	2108      	movs	r1, #8
 800112e:	485e      	ldr	r0, [pc, #376]	; (80012a8 <MX_GPIO_Init+0x64c>)
 8001130:	f7ff fac5 	bl	80006be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, SPSGRF_915_GPIO3_EXTI5_Pin, LL_GPIO_PULL_NO);
 8001134:	2200      	movs	r2, #0
 8001136:	2120      	movs	r1, #32
 8001138:	485b      	ldr	r0, [pc, #364]	; (80012a8 <MX_GPIO_Init+0x64c>)
 800113a:	f7ff fac0 	bl	80006be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, SPBTLE_RF_IRQ_EXTI6_Pin, LL_GPIO_PULL_NO);
 800113e:	2200      	movs	r2, #0
 8001140:	2140      	movs	r1, #64	; 0x40
 8001142:	4859      	ldr	r0, [pc, #356]	; (80012a8 <MX_GPIO_Init+0x64c>)
 8001144:	f7ff fabb 	bl	80006be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin, LL_GPIO_PULL_NO);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800114e:	4857      	ldr	r0, [pc, #348]	; (80012ac <MX_GPIO_Init+0x650>)
 8001150:	f7ff fab5 	bl	80006be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ARD_D3_GPIO_Port, ARD_D3_Pin, LL_GPIO_PULL_NO);
 8001154:	2200      	movs	r2, #0
 8001156:	2101      	movs	r1, #1
 8001158:	4855      	ldr	r0, [pc, #340]	; (80012b0 <MX_GPIO_Init+0x654>)
 800115a:	f7ff fab0 	bl	80006be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LPS22HB_INT_DRDY_EXTI0_GPIO_Port, LPS22HB_INT_DRDY_EXTI0_Pin, LL_GPIO_PULL_NO);
 800115e:	2200      	movs	r2, #0
 8001160:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001164:	4853      	ldr	r0, [pc, #332]	; (80012b4 <MX_GPIO_Init+0x658>)
 8001166:	f7ff faaa 	bl	80006be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin, LL_GPIO_PULL_NO);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001170:	4850      	ldr	r0, [pc, #320]	; (80012b4 <MX_GPIO_Init+0x658>)
 8001172:	f7ff faa4 	bl	80006be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ARD_D2_GPIO_Port, ARD_D2_Pin, LL_GPIO_PULL_NO);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800117c:	484d      	ldr	r0, [pc, #308]	; (80012b4 <MX_GPIO_Init+0x658>)
 800117e:	f7ff fa9e 	bl	80006be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(HTS221_DRDY_EXTI15_GPIO_Port, HTS221_DRDY_EXTI15_Pin, LL_GPIO_PULL_NO);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001188:	484a      	ldr	r0, [pc, #296]	; (80012b4 <MX_GPIO_Init+0x658>)
 800118a:	f7ff fa98 	bl	80006be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(VL53L0X_GPIO1_EXTI7_GPIO_Port, VL53L0X_GPIO1_EXTI7_Pin, LL_GPIO_PULL_NO);
 800118e:	2200      	movs	r2, #0
 8001190:	2180      	movs	r1, #128	; 0x80
 8001192:	4846      	ldr	r0, [pc, #280]	; (80012ac <MX_GPIO_Init+0x650>)
 8001194:	f7ff fa93 	bl	80006be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LSM3MDL_DRDY_EXTI8_GPIO_Port, LSM3MDL_DRDY_EXTI8_Pin, LL_GPIO_PULL_NO);
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119e:	4843      	ldr	r0, [pc, #268]	; (80012ac <MX_GPIO_Init+0x650>)
 80011a0:	f7ff fa8d 	bl	80006be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(PMOD_IRQ_EXTI12_GPIO_Port, PMOD_IRQ_EXTI12_Pin, LL_GPIO_PULL_NO);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2104      	movs	r1, #4
 80011a8:	4842      	ldr	r0, [pc, #264]	; (80012b4 <MX_GPIO_Init+0x658>)
 80011aa:	f7ff fa88 	bl	80006be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ISM43362_DRDY_EXTI1_GPIO_Port, ISM43362_DRDY_EXTI1_Pin, LL_GPIO_PULL_NO);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2102      	movs	r1, #2
 80011b2:	483d      	ldr	r0, [pc, #244]	; (80012a8 <MX_GPIO_Init+0x64c>)
 80011b4:	f7ff fa83 	bl	80006be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(USB_OTG_FS_OVRCR_EXTI3_GPIO_Port, USB_OTG_FS_OVRCR_EXTI3_Pin, LL_GPIO_MODE_INPUT);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2108      	movs	r1, #8
 80011bc:	483a      	ldr	r0, [pc, #232]	; (80012a8 <MX_GPIO_Init+0x64c>)
 80011be:	f7ff fa41 	bl	8000644 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, SPSGRF_915_GPIO3_EXTI5_Pin, LL_GPIO_MODE_INPUT);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2120      	movs	r1, #32
 80011c6:	4838      	ldr	r0, [pc, #224]	; (80012a8 <MX_GPIO_Init+0x64c>)
 80011c8:	f7ff fa3c 	bl	8000644 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, SPBTLE_RF_IRQ_EXTI6_Pin, LL_GPIO_MODE_INPUT);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2140      	movs	r1, #64	; 0x40
 80011d0:	4835      	ldr	r0, [pc, #212]	; (80012a8 <MX_GPIO_Init+0x64c>)
 80011d2:	f7ff fa37 	bl	8000644 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin, LL_GPIO_MODE_INPUT);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011dc:	4833      	ldr	r0, [pc, #204]	; (80012ac <MX_GPIO_Init+0x650>)
 80011de:	f7ff fa31 	bl	8000644 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ARD_D3_GPIO_Port, ARD_D3_Pin, LL_GPIO_MODE_INPUT);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2101      	movs	r1, #1
 80011e6:	4832      	ldr	r0, [pc, #200]	; (80012b0 <MX_GPIO_Init+0x654>)
 80011e8:	f7ff fa2c 	bl	8000644 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LPS22HB_INT_DRDY_EXTI0_GPIO_Port, LPS22HB_INT_DRDY_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f2:	4830      	ldr	r0, [pc, #192]	; (80012b4 <MX_GPIO_Init+0x658>)
 80011f4:	f7ff fa26 	bl	8000644 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin, LL_GPIO_MODE_INPUT);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011fe:	482d      	ldr	r0, [pc, #180]	; (80012b4 <MX_GPIO_Init+0x658>)
 8001200:	f7ff fa20 	bl	8000644 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ARD_D2_GPIO_Port, ARD_D2_Pin, LL_GPIO_MODE_INPUT);
 8001204:	2200      	movs	r2, #0
 8001206:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800120a:	482a      	ldr	r0, [pc, #168]	; (80012b4 <MX_GPIO_Init+0x658>)
 800120c:	f7ff fa1a 	bl	8000644 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(HTS221_DRDY_EXTI15_GPIO_Port, HTS221_DRDY_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8001210:	2200      	movs	r2, #0
 8001212:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001216:	4827      	ldr	r0, [pc, #156]	; (80012b4 <MX_GPIO_Init+0x658>)
 8001218:	f7ff fa14 	bl	8000644 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(VL53L0X_GPIO1_EXTI7_GPIO_Port, VL53L0X_GPIO1_EXTI7_Pin, LL_GPIO_MODE_INPUT);
 800121c:	2200      	movs	r2, #0
 800121e:	2180      	movs	r1, #128	; 0x80
 8001220:	4822      	ldr	r0, [pc, #136]	; (80012ac <MX_GPIO_Init+0x650>)
 8001222:	f7ff fa0f 	bl	8000644 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LSM3MDL_DRDY_EXTI8_GPIO_Port, LSM3MDL_DRDY_EXTI8_Pin, LL_GPIO_MODE_INPUT);
 8001226:	2200      	movs	r2, #0
 8001228:	f44f 7180 	mov.w	r1, #256	; 0x100
 800122c:	481f      	ldr	r0, [pc, #124]	; (80012ac <MX_GPIO_Init+0x650>)
 800122e:	f7ff fa09 	bl	8000644 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(PMOD_IRQ_EXTI12_GPIO_Port, PMOD_IRQ_EXTI12_Pin, LL_GPIO_MODE_INPUT);
 8001232:	2200      	movs	r2, #0
 8001234:	2104      	movs	r1, #4
 8001236:	481f      	ldr	r0, [pc, #124]	; (80012b4 <MX_GPIO_Init+0x658>)
 8001238:	f7ff fa04 	bl	8000644 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ISM43362_DRDY_EXTI1_GPIO_Port, ISM43362_DRDY_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 800123c:	2200      	movs	r2, #0
 800123e:	2102      	movs	r1, #2
 8001240:	4819      	ldr	r0, [pc, #100]	; (80012a8 <MX_GPIO_Init+0x64c>)
 8001242:	f7ff f9ff 	bl	8000644 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_EnablePinAnalogControl(GPIOC, ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001246:	213f      	movs	r1, #63	; 0x3f
 8001248:	4818      	ldr	r0, [pc, #96]	; (80012ac <MX_GPIO_Init+0x650>)
 800124a:	f7ff fa75 	bl	8000738 <LL_GPIO_EnablePinAnalogControl>
                          |ARD_A1_Pin|ARD_A0_Pin);

  /**/
  LL_GPIO_EnablePinAnalogControl(ARD_D7_GPIO_Port, ARD_D7_Pin);
 800124e:	2110      	movs	r1, #16
 8001250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001254:	f7ff fa70 	bl	8000738 <LL_GPIO_EnablePinAnalogControl>

  /**/
  LL_GPIO_EnablePinAnalogControl(ARD_D6_GPIO_Port, ARD_D6_Pin);
 8001258:	2102      	movs	r1, #2
 800125a:	4815      	ldr	r0, [pc, #84]	; (80012b0 <MX_GPIO_Init+0x654>)
 800125c:	f7ff fa6c 	bl	8000738 <LL_GPIO_EnablePinAnalogControl>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001260:	f7ff f930 	bl	80004c4 <__NVIC_GetPriorityGrouping>
 8001264:	4603      	mov	r3, r0
 8001266:	2200      	movs	r2, #0
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f980 	bl	8000570 <NVIC_EncodePriority>
 8001270:	4603      	mov	r3, r0
 8001272:	4619      	mov	r1, r3
 8001274:	2017      	movs	r0, #23
 8001276:	f7ff f951 	bl	800051c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 800127a:	2017      	movs	r0, #23
 800127c:	f7ff f930 	bl	80004e0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001280:	f7ff f920 	bl	80004c4 <__NVIC_GetPriorityGrouping>
 8001284:	4603      	mov	r3, r0
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f970 	bl	8000570 <NVIC_EncodePriority>
 8001290:	4603      	mov	r3, r0
 8001292:	4619      	mov	r1, r3
 8001294:	2028      	movs	r0, #40	; 0x28
 8001296:	f7ff f941 	bl	800051c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800129a:	2028      	movs	r0, #40	; 0x28
 800129c:	f7ff f920 	bl	80004e0 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	48001000 	.word	0x48001000
 80012ac:	48000800 	.word	0x48000800
 80012b0:	48000400 	.word	0x48000400
 80012b4:	48000c00 	.word	0x48000c00

080012b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012bc:	b672      	cpsid	i
}
 80012be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <Error_Handler+0x8>
	...

080012c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_MspInit+0x44>)
 80012cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ce:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <HAL_MspInit+0x44>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6613      	str	r3, [r2, #96]	; 0x60
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <HAL_MspInit+0x44>)
 80012d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_MspInit+0x44>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e6:	4a08      	ldr	r2, [pc, #32]	; (8001308 <HAL_MspInit+0x44>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	6593      	str	r3, [r2, #88]	; 0x58
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_MspInit+0x44>)
 80012f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000

0800130c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b0ac      	sub	sp, #176	; 0xb0
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2288      	movs	r2, #136	; 0x88
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f004 fa6b 	bl	8005808 <memset>
  if(DFSDM1_Init == 0)
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d142      	bne.n	80013c0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800133a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800133e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4618      	mov	r0, r3
 800134c:	f002 f948 	bl	80035e0 <HAL_RCCEx_PeriphCLKConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001356:	f7ff ffaf 	bl	80012b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 800135c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135e:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001360:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001364:	6613      	str	r3, [r2, #96]	; 0x60
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	4a15      	ldr	r2, [pc, #84]	; (80013cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001378:	f043 0310 	orr.w	r3, r3, #16
 800137c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800138a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800138e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80013a4:	2306      	movs	r3, #6
 80013a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013ae:	4619      	mov	r1, r3
 80013b0:	4807      	ldr	r0, [pc, #28]	; (80013d0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80013b2:	f000 fdb1 	bl	8001f18 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	4a02      	ldr	r2, [pc, #8]	; (80013c8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80013be:	6013      	str	r3, [r2, #0]
  }

}
 80013c0:	bf00      	nop
 80013c2:	37b0      	adds	r7, #176	; 0xb0
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000778 	.word	0x20000778
 80013cc:	40021000 	.word	0x40021000
 80013d0:	48001000 	.word	0x48001000

080013d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b0ac      	sub	sp, #176	; 0xb0
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	2288      	movs	r2, #136	; 0x88
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f004 fa07 	bl	8005808 <memset>
  if(hi2c->Instance==I2C2)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a21      	ldr	r2, [pc, #132]	; (8001484 <HAL_I2C_MspInit+0xb0>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d13b      	bne.n	800147c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001408:	2300      	movs	r3, #0
 800140a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4618      	mov	r0, r3
 8001412:	f002 f8e5 	bl	80035e0 <HAL_RCCEx_PeriphCLKConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800141c:	f7ff ff4c 	bl	80012b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001420:	4b19      	ldr	r3, [pc, #100]	; (8001488 <HAL_I2C_MspInit+0xb4>)
 8001422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001424:	4a18      	ldr	r2, [pc, #96]	; (8001488 <HAL_I2C_MspInit+0xb4>)
 8001426:	f043 0302 	orr.w	r3, r3, #2
 800142a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_I2C_MspInit+0xb4>)
 800142e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001438:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800143c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001440:	2312      	movs	r3, #18
 8001442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001446:	2301      	movs	r3, #1
 8001448:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144c:	2303      	movs	r3, #3
 800144e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001452:	2304      	movs	r3, #4
 8001454:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001458:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800145c:	4619      	mov	r1, r3
 800145e:	480b      	ldr	r0, [pc, #44]	; (800148c <HAL_I2C_MspInit+0xb8>)
 8001460:	f000 fd5a 	bl	8001f18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_I2C_MspInit+0xb4>)
 8001466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001468:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_I2C_MspInit+0xb4>)
 800146a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800146e:	6593      	str	r3, [r2, #88]	; 0x58
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_I2C_MspInit+0xb4>)
 8001472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800147c:	bf00      	nop
 800147e:	37b0      	adds	r7, #176	; 0xb0
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40005800 	.word	0x40005800
 8001488:	40021000 	.word	0x40021000
 800148c:	48000400 	.word	0x48000400

08001490 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a17      	ldr	r2, [pc, #92]	; (800150c <HAL_QSPI_MspInit+0x7c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d128      	bne.n	8001504 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80014b2:	4b17      	ldr	r3, [pc, #92]	; (8001510 <HAL_QSPI_MspInit+0x80>)
 80014b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014b6:	4a16      	ldr	r2, [pc, #88]	; (8001510 <HAL_QSPI_MspInit+0x80>)
 80014b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014bc:	6513      	str	r3, [r2, #80]	; 0x50
 80014be:	4b14      	ldr	r3, [pc, #80]	; (8001510 <HAL_QSPI_MspInit+0x80>)
 80014c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HAL_QSPI_MspInit+0x80>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	4a10      	ldr	r2, [pc, #64]	; (8001510 <HAL_QSPI_MspInit+0x80>)
 80014d0:	f043 0310 	orr.w	r3, r3, #16
 80014d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_QSPI_MspInit+0x80>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80014e2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80014e6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80014f4:	230a      	movs	r3, #10
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <HAL_QSPI_MspInit+0x84>)
 8001500:	f000 fd0a 	bl	8001f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001504:	bf00      	nop
 8001506:	3728      	adds	r7, #40	; 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	a0001000 	.word	0xa0001000
 8001510:	40021000 	.word	0x40021000
 8001514:	48001000 	.word	0x48001000

08001518 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a17      	ldr	r2, [pc, #92]	; (8001594 <HAL_SPI_MspInit+0x7c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d128      	bne.n	800158c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <HAL_SPI_MspInit+0x80>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153e:	4a16      	ldr	r2, [pc, #88]	; (8001598 <HAL_SPI_MspInit+0x80>)
 8001540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001544:	6593      	str	r3, [r2, #88]	; 0x58
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <HAL_SPI_MspInit+0x80>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <HAL_SPI_MspInit+0x80>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	4a10      	ldr	r2, [pc, #64]	; (8001598 <HAL_SPI_MspInit+0x80>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <HAL_SPI_MspInit+0x80>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800156a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800157c:	2306      	movs	r3, #6
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <HAL_SPI_MspInit+0x84>)
 8001588:	f000 fcc6 	bl	8001f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800158c:	bf00      	nop
 800158e:	3728      	adds	r7, #40	; 0x28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40003c00 	.word	0x40003c00
 8001598:	40021000 	.word	0x40021000
 800159c:	48000800 	.word	0x48000800

080015a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b0ae      	sub	sp, #184	; 0xb8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	2288      	movs	r2, #136	; 0x88
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f004 f921 	bl	8005808 <memset>
  if(huart->Instance==USART1)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a42      	ldr	r2, [pc, #264]	; (80016d4 <HAL_UART_MspInit+0x134>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d13b      	bne.n	8001648 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015d0:	2301      	movs	r3, #1
 80015d2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015d4:	2300      	movs	r3, #0
 80015d6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4618      	mov	r0, r3
 80015de:	f001 ffff 	bl	80035e0 <HAL_RCCEx_PeriphCLKConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015e8:	f7ff fe66 	bl	80012b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015ec:	4b3a      	ldr	r3, [pc, #232]	; (80016d8 <HAL_UART_MspInit+0x138>)
 80015ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f0:	4a39      	ldr	r2, [pc, #228]	; (80016d8 <HAL_UART_MspInit+0x138>)
 80015f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f6:	6613      	str	r3, [r2, #96]	; 0x60
 80015f8:	4b37      	ldr	r3, [pc, #220]	; (80016d8 <HAL_UART_MspInit+0x138>)
 80015fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001604:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <HAL_UART_MspInit+0x138>)
 8001606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001608:	4a33      	ldr	r2, [pc, #204]	; (80016d8 <HAL_UART_MspInit+0x138>)
 800160a:	f043 0302 	orr.w	r3, r3, #2
 800160e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001610:	4b31      	ldr	r3, [pc, #196]	; (80016d8 <HAL_UART_MspInit+0x138>)
 8001612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800161c:	23c0      	movs	r3, #192	; 0xc0
 800161e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001634:	2307      	movs	r3, #7
 8001636:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800163e:	4619      	mov	r1, r3
 8001640:	4826      	ldr	r0, [pc, #152]	; (80016dc <HAL_UART_MspInit+0x13c>)
 8001642:	f000 fc69 	bl	8001f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001646:	e040      	b.n	80016ca <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a24      	ldr	r2, [pc, #144]	; (80016e0 <HAL_UART_MspInit+0x140>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d13b      	bne.n	80016ca <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001652:	2304      	movs	r3, #4
 8001654:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001656:	2300      	movs	r3, #0
 8001658:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4618      	mov	r0, r3
 8001660:	f001 ffbe 	bl	80035e0 <HAL_RCCEx_PeriphCLKConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800166a:	f7ff fe25 	bl	80012b8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800166e:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <HAL_UART_MspInit+0x138>)
 8001670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001672:	4a19      	ldr	r2, [pc, #100]	; (80016d8 <HAL_UART_MspInit+0x138>)
 8001674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001678:	6593      	str	r3, [r2, #88]	; 0x58
 800167a:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <HAL_UART_MspInit+0x138>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <HAL_UART_MspInit+0x138>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	4a13      	ldr	r2, [pc, #76]	; (80016d8 <HAL_UART_MspInit+0x138>)
 800168c:	f043 0308 	orr.w	r3, r3, #8
 8001690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_UART_MspInit+0x138>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800169e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016b8:	2307      	movs	r3, #7
 80016ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016be:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016c2:	4619      	mov	r1, r3
 80016c4:	4807      	ldr	r0, [pc, #28]	; (80016e4 <HAL_UART_MspInit+0x144>)
 80016c6:	f000 fc27 	bl	8001f18 <HAL_GPIO_Init>
}
 80016ca:	bf00      	nop
 80016cc:	37b8      	adds	r7, #184	; 0xb8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40013800 	.word	0x40013800
 80016d8:	40021000 	.word	0x40021000
 80016dc:	48000400 	.word	0x48000400
 80016e0:	40004800 	.word	0x40004800
 80016e4:	48000c00 	.word	0x48000c00

080016e8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b0ac      	sub	sp, #176	; 0xb0
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2288      	movs	r2, #136	; 0x88
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f004 f87d 	bl	8005808 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001716:	d17c      	bne.n	8001812 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800171c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800171e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001722:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001726:	2301      	movs	r3, #1
 8001728:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800172a:	2301      	movs	r3, #1
 800172c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800172e:	2318      	movs	r3, #24
 8001730:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001732:	2307      	movs	r3, #7
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001736:	2302      	movs	r3, #2
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800173a:	2302      	movs	r3, #2
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800173e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001742:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4618      	mov	r0, r3
 800174a:	f001 ff49 	bl	80035e0 <HAL_RCCEx_PeriphCLKConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001754:	f7ff fdb0 	bl	80012b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001758:	4b30      	ldr	r3, [pc, #192]	; (800181c <HAL_PCD_MspInit+0x134>)
 800175a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175c:	4a2f      	ldr	r2, [pc, #188]	; (800181c <HAL_PCD_MspInit+0x134>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001764:	4b2d      	ldr	r3, [pc, #180]	; (800181c <HAL_PCD_MspInit+0x134>)
 8001766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001774:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001788:	4619      	mov	r1, r3
 800178a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178e:	f000 fbc3 	bl	8001f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001792:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001796:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a6:	2303      	movs	r3, #3
 80017a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017ac:	230a      	movs	r3, #10
 80017ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017b6:	4619      	mov	r1, r3
 80017b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017bc:	f000 fbac 	bl	8001f18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017c0:	4b16      	ldr	r3, [pc, #88]	; (800181c <HAL_PCD_MspInit+0x134>)
 80017c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c4:	4a15      	ldr	r2, [pc, #84]	; (800181c <HAL_PCD_MspInit+0x134>)
 80017c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <HAL_PCD_MspInit+0x134>)
 80017ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d8:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_PCD_MspInit+0x134>)
 80017da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d114      	bne.n	800180e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_PCD_MspInit+0x134>)
 80017e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e8:	4a0c      	ldr	r2, [pc, #48]	; (800181c <HAL_PCD_MspInit+0x134>)
 80017ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ee:	6593      	str	r3, [r2, #88]	; 0x58
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_PCD_MspInit+0x134>)
 80017f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80017fc:	f001 f824 	bl	8002848 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_PCD_MspInit+0x134>)
 8001802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001804:	4a05      	ldr	r2, [pc, #20]	; (800181c <HAL_PCD_MspInit+0x134>)
 8001806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800180a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800180c:	e001      	b.n	8001812 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800180e:	f001 f81b 	bl	8002848 <HAL_PWREx_EnableVddUSB>
}
 8001812:	bf00      	nop
 8001814:	37b0      	adds	r7, #176	; 0xb0
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000

08001820 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4013      	ands	r3, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	429a      	cmp	r2, r3
 8001834:	d101      	bne.n	800183a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	40010400 	.word	0x40010400

0800184c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001854:	4a04      	ldr	r2, [pc, #16]	; (8001868 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6153      	str	r3, [r2, #20]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40010400 	.word	0x40010400

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <NMI_Handler+0x4>

08001872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <MemManage_Handler+0x4>

0800187e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <UsageFault_Handler+0x4>

0800188a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b8:	f000 f8f8 	bl	8001aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}

080018c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 80018c4:	2020      	movs	r0, #32
 80018c6:	f7ff ffab 	bl	8001820 <LL_EXTI_IsActiveFlag_0_31>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d002      	beq.n	80018d6 <EXTI9_5_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 80018d0:	2020      	movs	r0, #32
 80018d2:	f7ff ffbb 	bl	800184c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_5 */

    /* USER CODE END LL_EXTI_LINE_5 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 80018d6:	2040      	movs	r0, #64	; 0x40
 80018d8:	f7ff ffa2 	bl	8001820 <LL_EXTI_IsActiveFlag_0_31>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <EXTI9_5_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 80018e2:	2040      	movs	r0, #64	; 0x40
 80018e4:	f7ff ffb2 	bl	800184c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_6 */

    /* USER CODE END LL_EXTI_LINE_6 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_7) != RESET)
 80018e8:	2080      	movs	r0, #128	; 0x80
 80018ea:	f7ff ff99 	bl	8001820 <LL_EXTI_IsActiveFlag_0_31>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <EXTI9_5_IRQHandler+0x3a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_7);
 80018f4:	2080      	movs	r0, #128	; 0x80
 80018f6:	f7ff ffa9 	bl	800184c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_7 */

    /* USER CODE END LL_EXTI_LINE_7 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_8) != RESET)
 80018fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80018fe:	f7ff ff8f 	bl	8001820 <LL_EXTI_IsActiveFlag_0_31>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <EXTI9_5_IRQHandler+0x50>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_8);
 8001908:	f44f 7080 	mov.w	r0, #256	; 0x100
 800190c:	f7ff ff9e 	bl	800184c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_8 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}

08001914 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_10) != RESET)
 8001918:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800191c:	f7ff ff80 	bl	8001820 <LL_EXTI_IsActiveFlag_0_31>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_10);
 8001926:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800192a:	f7ff ff8f 	bl	800184c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_10 */

    /* USER CODE END LL_EXTI_LINE_10 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_11) != RESET)
 800192e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001932:	f7ff ff75 	bl	8001820 <LL_EXTI_IsActiveFlag_0_31>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <EXTI15_10_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_11);
 800193c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001940:	f7ff ff84 	bl	800184c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_11 */

    /* USER CODE END LL_EXTI_LINE_11 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8001944:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001948:	f7ff ff6a 	bl	8001820 <LL_EXTI_IsActiveFlag_0_31>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8001952:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001956:	f7ff ff79 	bl	800184c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */

    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 800195a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800195e:	f7ff ff5f 	bl	8001820 <LL_EXTI_IsActiveFlag_0_31>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8001968:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800196c:	f7ff ff6e 	bl	800184c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */

    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8001970:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001974:	f7ff ff54 	bl	8001820 <LL_EXTI_IsActiveFlag_0_31>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <EXTI15_10_IRQHandler+0x72>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 800197e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001982:	f7ff ff63 	bl	800184c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <SystemInit+0x20>)
 8001992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <SystemInit+0x20>)
 8001998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800199c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019b4:	f7ff ffea 	bl	800198c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b8:	480c      	ldr	r0, [pc, #48]	; (80019ec <LoopForever+0x6>)
  ldr r1, =_edata
 80019ba:	490d      	ldr	r1, [pc, #52]	; (80019f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019bc:	4a0d      	ldr	r2, [pc, #52]	; (80019f4 <LoopForever+0xe>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c0:	e002      	b.n	80019c8 <LoopCopyDataInit>

080019c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c6:	3304      	adds	r3, #4

080019c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019cc:	d3f9      	bcc.n	80019c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ce:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019d0:	4c0a      	ldr	r4, [pc, #40]	; (80019fc <LoopForever+0x16>)
  movs r3, #0
 80019d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d4:	e001      	b.n	80019da <LoopFillZerobss>

080019d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d8:	3204      	adds	r2, #4

080019da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019dc:	d3fb      	bcc.n	80019d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019de:	f003 ff1b 	bl	8005818 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019e2:	f7fe ff33 	bl	800084c <main>

080019e6 <LoopForever>:

LoopForever:
    b LoopForever
 80019e6:	e7fe      	b.n	80019e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80019f4:	080058d0 	.word	0x080058d0
  ldr r2, =_sbss
 80019f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80019fc:	200007a4 	.word	0x200007a4

08001a00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <ADC1_2_IRQHandler>

08001a02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a0c:	2003      	movs	r0, #3
 8001a0e:	f000 f943 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a12:	2000      	movs	r0, #0
 8001a14:	f000 f80e 	bl	8001a34 <HAL_InitTick>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	71fb      	strb	r3, [r7, #7]
 8001a22:	e001      	b.n	8001a28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a24:	f7ff fc4e 	bl	80012c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a28:	79fb      	ldrb	r3, [r7, #7]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a40:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_InitTick+0x6c>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d023      	beq.n	8001a90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <HAL_InitTick+0x70>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <HAL_InitTick+0x6c>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4619      	mov	r1, r3
 8001a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f941 	bl	8001ce6 <HAL_SYSTICK_Config>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10f      	bne.n	8001a8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b0f      	cmp	r3, #15
 8001a6e:	d809      	bhi.n	8001a84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a70:	2200      	movs	r2, #0
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a78:	f000 f919 	bl	8001cae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a7c:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <HAL_InitTick+0x74>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e007      	b.n	8001a94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
 8001a88:	e004      	b.n	8001a94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	73fb      	strb	r3, [r7, #15]
 8001a8e:	e001      	b.n	8001a94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000008 	.word	0x20000008
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	20000004 	.word	0x20000004

08001aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x20>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x24>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <HAL_IncTick+0x24>)
 8001abe:	6013      	str	r3, [r2, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000008 	.word	0x20000008
 8001ad0:	2000077c 	.word	0x2000077c

08001ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <HAL_GetTick+0x14>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	2000077c 	.word	0x2000077c

08001aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff ffee 	bl	8001ad4 <HAL_GetTick>
 8001af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b04:	d005      	beq.n	8001b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_Delay+0x44>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4413      	add	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b12:	bf00      	nop
 8001b14:	f7ff ffde 	bl	8001ad4 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d8f7      	bhi.n	8001b14 <HAL_Delay+0x28>
  {
  }
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000008 	.word	0x20000008

08001b34 <__NVIC_SetPriorityGrouping>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b50:	4013      	ands	r3, r2
 8001b52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b66:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	60d3      	str	r3, [r2, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_GetPriorityGrouping>:
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <__NVIC_GetPriorityGrouping+0x18>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	f003 0307 	and.w	r3, r3, #7
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_SetPriority>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	; (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	; (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	; 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	; 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c78:	f7ff ff8e 	bl	8001b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff47 	bl	8001b34 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc0:	f7ff ff5c 	bl	8001b7c <__NVIC_GetPriorityGrouping>
 8001cc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7ff ff8e 	bl	8001bec <NVIC_EncodePriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff5d 	bl	8001b98 <__NVIC_SetPriority>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ffb0 	bl	8001c54 <SysTick_Config>
 8001cf4:	4603      	mov	r3, r0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e0ac      	b.n	8001e6c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f8b2 	bl	8001e80 <DFSDM_GetChannelFromInstance>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4a55      	ldr	r2, [pc, #340]	; (8001e74 <HAL_DFSDM_ChannelInit+0x174>)
 8001d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e09f      	b.n	8001e6c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff faed 	bl	800130c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001d32:	4b51      	ldr	r3, [pc, #324]	; (8001e78 <HAL_DFSDM_ChannelInit+0x178>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	3301      	adds	r3, #1
 8001d38:	4a4f      	ldr	r2, [pc, #316]	; (8001e78 <HAL_DFSDM_ChannelInit+0x178>)
 8001d3a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001d3c:	4b4e      	ldr	r3, [pc, #312]	; (8001e78 <HAL_DFSDM_ChannelInit+0x178>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d125      	bne.n	8001d90 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001d44:	4b4d      	ldr	r3, [pc, #308]	; (8001e7c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a4c      	ldr	r2, [pc, #304]	; (8001e7c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d4e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001d50:	4b4a      	ldr	r3, [pc, #296]	; (8001e7c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	4948      	ldr	r1, [pc, #288]	; (8001e7c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001d5e:	4b47      	ldr	r3, [pc, #284]	; (8001e7c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a46      	ldr	r2, [pc, #280]	; (8001e7c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d64:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001d68:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	791b      	ldrb	r3, [r3, #4]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d108      	bne.n	8001d84 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001d72:	4b42      	ldr	r3, [pc, #264]	; (8001e7c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	041b      	lsls	r3, r3, #16
 8001d7e:	493f      	ldr	r1, [pc, #252]	; (8001e7c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001d84:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a3c      	ldr	r2, [pc, #240]	; (8001e7c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d8e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001d9e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6819      	ldr	r1, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001dae:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001db4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 020f 	bic.w	r2, r2, #15
 8001dcc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6819      	ldr	r1, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001df4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6899      	ldr	r1, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	3b01      	subs	r3, #1
 8001e06:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f002 0207 	and.w	r2, r2, #7
 8001e20:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6859      	ldr	r1, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e4c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f810 	bl	8001e80 <DFSDM_GetChannelFromInstance>
 8001e60:	4602      	mov	r2, r0
 8001e62:	4904      	ldr	r1, [pc, #16]	; (8001e74 <HAL_DFSDM_ChannelInit+0x174>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000784 	.word	0x20000784
 8001e78:	20000780 	.word	0x20000780
 8001e7c:	40016000 	.word	0x40016000

08001e80 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <DFSDM_GetChannelFromInstance+0x7c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d102      	bne.n	8001e96 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	e02b      	b.n	8001eee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a19      	ldr	r2, [pc, #100]	; (8001f00 <DFSDM_GetChannelFromInstance+0x80>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d102      	bne.n	8001ea4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	e024      	b.n	8001eee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <DFSDM_GetChannelFromInstance+0x84>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d102      	bne.n	8001eb2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001eac:	2302      	movs	r3, #2
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	e01d      	b.n	8001eee <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <DFSDM_GetChannelFromInstance+0x88>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d102      	bne.n	8001ec0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001eba:	2304      	movs	r3, #4
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	e016      	b.n	8001eee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a12      	ldr	r2, [pc, #72]	; (8001f0c <DFSDM_GetChannelFromInstance+0x8c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d102      	bne.n	8001ece <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001ec8:	2305      	movs	r3, #5
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	e00f      	b.n	8001eee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <DFSDM_GetChannelFromInstance+0x90>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d102      	bne.n	8001edc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001ed6:	2306      	movs	r3, #6
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	e008      	b.n	8001eee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a0d      	ldr	r2, [pc, #52]	; (8001f14 <DFSDM_GetChannelFromInstance+0x94>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d102      	bne.n	8001eea <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001ee4:	2307      	movs	r3, #7
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	e001      	b.n	8001eee <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001eea:	2303      	movs	r3, #3
 8001eec:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	40016000 	.word	0x40016000
 8001f00:	40016020 	.word	0x40016020
 8001f04:	40016040 	.word	0x40016040
 8001f08:	40016080 	.word	0x40016080
 8001f0c:	400160a0 	.word	0x400160a0
 8001f10:	400160c0 	.word	0x400160c0
 8001f14:	400160e0 	.word	0x400160e0

08001f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f26:	e17f      	b.n	8002228 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	fa01 f303 	lsl.w	r3, r1, r3
 8001f34:	4013      	ands	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 8171 	beq.w	8002222 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d005      	beq.n	8001f58 <HAL_GPIO_Init+0x40>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d130      	bne.n	8001fba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	2203      	movs	r2, #3
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f8e:	2201      	movs	r2, #1
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	091b      	lsrs	r3, r3, #4
 8001fa4:	f003 0201 	and.w	r2, r3, #1
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d118      	bne.n	8001ff8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001fcc:	2201      	movs	r2, #1
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	08db      	lsrs	r3, r3, #3
 8001fe2:	f003 0201 	and.w	r2, r3, #1
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	2b03      	cmp	r3, #3
 8002002:	d017      	beq.n	8002034 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	2203      	movs	r2, #3
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4313      	orrs	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d123      	bne.n	8002088 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	08da      	lsrs	r2, r3, #3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3208      	adds	r2, #8
 8002048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	220f      	movs	r2, #15
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	08da      	lsrs	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3208      	adds	r2, #8
 8002082:	6939      	ldr	r1, [r7, #16]
 8002084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	2203      	movs	r2, #3
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4013      	ands	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0203 	and.w	r2, r3, #3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80ac 	beq.w	8002222 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ca:	4b5f      	ldr	r3, [pc, #380]	; (8002248 <HAL_GPIO_Init+0x330>)
 80020cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ce:	4a5e      	ldr	r2, [pc, #376]	; (8002248 <HAL_GPIO_Init+0x330>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6613      	str	r3, [r2, #96]	; 0x60
 80020d6:	4b5c      	ldr	r3, [pc, #368]	; (8002248 <HAL_GPIO_Init+0x330>)
 80020d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020e2:	4a5a      	ldr	r2, [pc, #360]	; (800224c <HAL_GPIO_Init+0x334>)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	3302      	adds	r3, #2
 80020ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	220f      	movs	r2, #15
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800210c:	d025      	beq.n	800215a <HAL_GPIO_Init+0x242>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a4f      	ldr	r2, [pc, #316]	; (8002250 <HAL_GPIO_Init+0x338>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d01f      	beq.n	8002156 <HAL_GPIO_Init+0x23e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a4e      	ldr	r2, [pc, #312]	; (8002254 <HAL_GPIO_Init+0x33c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d019      	beq.n	8002152 <HAL_GPIO_Init+0x23a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a4d      	ldr	r2, [pc, #308]	; (8002258 <HAL_GPIO_Init+0x340>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d013      	beq.n	800214e <HAL_GPIO_Init+0x236>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4c      	ldr	r2, [pc, #304]	; (800225c <HAL_GPIO_Init+0x344>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d00d      	beq.n	800214a <HAL_GPIO_Init+0x232>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a4b      	ldr	r2, [pc, #300]	; (8002260 <HAL_GPIO_Init+0x348>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d007      	beq.n	8002146 <HAL_GPIO_Init+0x22e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a4a      	ldr	r2, [pc, #296]	; (8002264 <HAL_GPIO_Init+0x34c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d101      	bne.n	8002142 <HAL_GPIO_Init+0x22a>
 800213e:	2306      	movs	r3, #6
 8002140:	e00c      	b.n	800215c <HAL_GPIO_Init+0x244>
 8002142:	2307      	movs	r3, #7
 8002144:	e00a      	b.n	800215c <HAL_GPIO_Init+0x244>
 8002146:	2305      	movs	r3, #5
 8002148:	e008      	b.n	800215c <HAL_GPIO_Init+0x244>
 800214a:	2304      	movs	r3, #4
 800214c:	e006      	b.n	800215c <HAL_GPIO_Init+0x244>
 800214e:	2303      	movs	r3, #3
 8002150:	e004      	b.n	800215c <HAL_GPIO_Init+0x244>
 8002152:	2302      	movs	r3, #2
 8002154:	e002      	b.n	800215c <HAL_GPIO_Init+0x244>
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <HAL_GPIO_Init+0x244>
 800215a:	2300      	movs	r3, #0
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	f002 0203 	and.w	r2, r2, #3
 8002162:	0092      	lsls	r2, r2, #2
 8002164:	4093      	lsls	r3, r2
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800216c:	4937      	ldr	r1, [pc, #220]	; (800224c <HAL_GPIO_Init+0x334>)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	089b      	lsrs	r3, r3, #2
 8002172:	3302      	adds	r3, #2
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800217a:	4b3b      	ldr	r3, [pc, #236]	; (8002268 <HAL_GPIO_Init+0x350>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	43db      	mvns	r3, r3
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4013      	ands	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800219e:	4a32      	ldr	r2, [pc, #200]	; (8002268 <HAL_GPIO_Init+0x350>)
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021a4:	4b30      	ldr	r3, [pc, #192]	; (8002268 <HAL_GPIO_Init+0x350>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021c8:	4a27      	ldr	r2, [pc, #156]	; (8002268 <HAL_GPIO_Init+0x350>)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021ce:	4b26      	ldr	r3, [pc, #152]	; (8002268 <HAL_GPIO_Init+0x350>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021f2:	4a1d      	ldr	r2, [pc, #116]	; (8002268 <HAL_GPIO_Init+0x350>)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021f8:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <HAL_GPIO_Init+0x350>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	43db      	mvns	r3, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800221c:	4a12      	ldr	r2, [pc, #72]	; (8002268 <HAL_GPIO_Init+0x350>)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	3301      	adds	r3, #1
 8002226:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	fa22 f303 	lsr.w	r3, r2, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	f47f ae78 	bne.w	8001f28 <HAL_GPIO_Init+0x10>
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	371c      	adds	r7, #28
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	40010000 	.word	0x40010000
 8002250:	48000400 	.word	0x48000400
 8002254:	48000800 	.word	0x48000800
 8002258:	48000c00 	.word	0x48000c00
 800225c:	48001000 	.word	0x48001000
 8002260:	48001400 	.word	0x48001400
 8002264:	48001800 	.word	0x48001800
 8002268:	40010400 	.word	0x40010400

0800226c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e08d      	b.n	800239a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d106      	bne.n	8002298 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff f89e 	bl	80013d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2224      	movs	r2, #36	; 0x24
 800229c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0201 	bic.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d107      	bne.n	80022e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	e006      	b.n	80022f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d108      	bne.n	800230e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800230a:	605a      	str	r2, [r3, #4]
 800230c:	e007      	b.n	800231e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800231c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800232c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002330:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002340:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691a      	ldr	r2, [r3, #16]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69d9      	ldr	r1, [r3, #28]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1a      	ldr	r2, [r3, #32]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0201 	orr.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2220      	movs	r2, #32
 8002386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	d138      	bne.n	800242a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e032      	b.n	800242c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2224      	movs	r2, #36	; 0x24
 80023d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0201 	bic.w	r2, r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023f4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6819      	ldr	r1, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0201 	orr.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2220      	movs	r2, #32
 800241a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	e000      	b.n	800242c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800242a:	2302      	movs	r3, #2
  }
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b20      	cmp	r3, #32
 800244c:	d139      	bne.n	80024c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002458:	2302      	movs	r3, #2
 800245a:	e033      	b.n	80024c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2224      	movs	r2, #36	; 0x24
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0201 	bic.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800248a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0201 	orr.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	e000      	b.n	80024c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024c2:	2302      	movs	r3, #2
  }
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024d2:	b08f      	sub	sp, #60	; 0x3c
 80024d4:	af0a      	add	r7, sp, #40	; 0x28
 80024d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e116      	b.n	8002710 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d106      	bne.n	8002502 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff f8f3 	bl	80016e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2203      	movs	r2, #3
 8002506:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d102      	bne.n	800251c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f002 fef2 	bl	800530a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	687e      	ldr	r6, [r7, #4]
 800252e:	466d      	mov	r5, sp
 8002530:	f106 0410 	add.w	r4, r6, #16
 8002534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800253a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800253c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002540:	e885 0003 	stmia.w	r5, {r0, r1}
 8002544:	1d33      	adds	r3, r6, #4
 8002546:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002548:	6838      	ldr	r0, [r7, #0]
 800254a:	f002 feb2 	bl	80052b2 <USB_CoreInit>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0d7      	b.n	8002710 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2100      	movs	r1, #0
 8002566:	4618      	mov	r0, r3
 8002568:	f002 fee0 	bl	800532c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e04a      	b.n	8002608 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002572:	7bfa      	ldrb	r2, [r7, #15]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	333d      	adds	r3, #61	; 0x3d
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002586:	7bfa      	ldrb	r2, [r7, #15]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	333c      	adds	r3, #60	; 0x3c
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800259a:	7bfa      	ldrb	r2, [r7, #15]
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	b298      	uxth	r0, r3
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	3356      	adds	r3, #86	; 0x56
 80025ae:	4602      	mov	r2, r0
 80025b0:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025b2:	7bfa      	ldrb	r2, [r7, #15]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	3340      	adds	r3, #64	; 0x40
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	3344      	adds	r3, #68	; 0x44
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025da:	7bfa      	ldrb	r2, [r7, #15]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4413      	add	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	3348      	adds	r3, #72	; 0x48
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025ee:	7bfa      	ldrb	r2, [r7, #15]
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4413      	add	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	334c      	adds	r3, #76	; 0x4c
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	3301      	adds	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	429a      	cmp	r2, r3
 8002610:	d3af      	bcc.n	8002572 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002612:	2300      	movs	r3, #0
 8002614:	73fb      	strb	r3, [r7, #15]
 8002616:	e044      	b.n	80026a2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800262e:	7bfa      	ldrb	r2, [r7, #15]
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800265a:	7bfa      	ldrb	r2, [r7, #15]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4413      	add	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002686:	7bfa      	ldrb	r2, [r7, #15]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	3301      	adds	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d3b5      	bcc.n	8002618 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	603b      	str	r3, [r7, #0]
 80026b2:	687e      	ldr	r6, [r7, #4]
 80026b4:	466d      	mov	r5, sp
 80026b6:	f106 0410 	add.w	r4, r6, #16
 80026ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80026ca:	1d33      	adds	r3, r6, #4
 80026cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ce:	6838      	ldr	r0, [r7, #0]
 80026d0:	f002 fe78 	bl	80053c4 <USB_DevInit>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d005      	beq.n	80026e6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2202      	movs	r2, #2
 80026de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e014      	b.n	8002710 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d102      	bne.n	8002704 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f80a 	bl	8002718 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f003 f81a 	bl	8005742 <USB_DevDisconnect>

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002718 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274a:	f043 0303 	orr.w	r3, r3, #3
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a04      	ldr	r2, [pc, #16]	; (800277c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800276a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276e:	6013      	str	r3, [r2, #0]
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40007000 	.word	0x40007000

08002780 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <HAL_PWREx_GetVoltageRange+0x18>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40007000 	.word	0x40007000

0800279c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027aa:	d130      	bne.n	800280e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ac:	4b23      	ldr	r3, [pc, #140]	; (800283c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027b8:	d038      	beq.n	800282c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027ba:	4b20      	ldr	r3, [pc, #128]	; (800283c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027c2:	4a1e      	ldr	r2, [pc, #120]	; (800283c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027ca:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2232      	movs	r2, #50	; 0x32
 80027d0:	fb02 f303 	mul.w	r3, r2, r3
 80027d4:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	0c9b      	lsrs	r3, r3, #18
 80027dc:	3301      	adds	r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027e0:	e002      	b.n	80027e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	3b01      	subs	r3, #1
 80027e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027e8:	4b14      	ldr	r3, [pc, #80]	; (800283c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f4:	d102      	bne.n	80027fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f2      	bne.n	80027e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027fc:	4b0f      	ldr	r3, [pc, #60]	; (800283c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002808:	d110      	bne.n	800282c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e00f      	b.n	800282e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800280e:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800281a:	d007      	beq.n	800282c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800281c:	4b07      	ldr	r3, [pc, #28]	; (800283c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002824:	4a05      	ldr	r2, [pc, #20]	; (800283c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800282a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40007000 	.word	0x40007000
 8002840:	20000000 	.word	0x20000000
 8002844:	431bde83 	.word	0x431bde83

08002848 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_PWREx_EnableVddUSB+0x1c>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4a04      	ldr	r2, [pc, #16]	; (8002864 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002852:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002856:	6053      	str	r3, [r2, #4]
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40007000 	.word	0x40007000

08002868 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af02      	add	r7, sp, #8
 800286e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002870:	f7ff f930 	bl	8001ad4 <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e063      	b.n	8002948 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10b      	bne.n	80028a4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7fe fdfb 	bl	8001490 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800289a:	f241 3188 	movw	r1, #5000	; 0x1388
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f858 	bl	8002954 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	021a      	lsls	r2, r3, #8
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	2120      	movs	r1, #32
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f850 	bl	8002970 <QSPI_WaitFlagStateUntilTimeout>
 80028d0:	4603      	mov	r3, r0
 80028d2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80028d4:	7afb      	ldrb	r3, [r7, #11]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d131      	bne.n	800293e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80028e4:	f023 0310 	bic.w	r3, r3, #16
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6852      	ldr	r2, [r2, #4]
 80028ec:	0611      	lsls	r1, r2, #24
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68d2      	ldr	r2, [r2, #12]
 80028f2:	4311      	orrs	r1, r2
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	430b      	orrs	r3, r1
 80028fa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	4b13      	ldr	r3, [pc, #76]	; (8002950 <HAL_QSPI_Init+0xe8>)
 8002904:	4013      	ands	r3, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6912      	ldr	r2, [r2, #16]
 800290a:	0411      	lsls	r1, r2, #16
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6952      	ldr	r2, [r2, #20]
 8002910:	4311      	orrs	r1, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6992      	ldr	r2, [r2, #24]
 8002916:	4311      	orrs	r1, r2
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	430b      	orrs	r3, r1
 800291e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002946:	7afb      	ldrb	r3, [r7, #11]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	ffe0f8fe 	.word	0xffe0f8fe

08002954 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	4613      	mov	r3, r2
 800297e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002980:	e01a      	b.n	80029b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002988:	d016      	beq.n	80029b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298a:	f7ff f8a3 	bl	8001ad4 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	429a      	cmp	r2, r3
 8002998:	d302      	bcc.n	80029a0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10b      	bne.n	80029b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2204      	movs	r2, #4
 80029a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ac:	f043 0201 	orr.w	r2, r3, #1
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e00e      	b.n	80029d6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	bf14      	ite	ne
 80029c6:	2301      	movne	r3, #1
 80029c8:	2300      	moveq	r3, #0
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	461a      	mov	r2, r3
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d1d6      	bne.n	8002982 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e3ca      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029f2:	4b97      	ldr	r3, [pc, #604]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029fc:	4b94      	ldr	r3, [pc, #592]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 80e4 	beq.w	8002bdc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d007      	beq.n	8002a2a <HAL_RCC_OscConfig+0x4a>
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	2b0c      	cmp	r3, #12
 8002a1e:	f040 808b 	bne.w	8002b38 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	f040 8087 	bne.w	8002b38 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a2a:	4b89      	ldr	r3, [pc, #548]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <HAL_RCC_OscConfig+0x62>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e3a2      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1a      	ldr	r2, [r3, #32]
 8002a46:	4b82      	ldr	r3, [pc, #520]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d004      	beq.n	8002a5c <HAL_RCC_OscConfig+0x7c>
 8002a52:	4b7f      	ldr	r3, [pc, #508]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a5a:	e005      	b.n	8002a68 <HAL_RCC_OscConfig+0x88>
 8002a5c:	4b7c      	ldr	r3, [pc, #496]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d223      	bcs.n	8002ab4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 fd55 	bl	8003520 <RCC_SetFlashLatencyFromMSIRange>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e383      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a80:	4b73      	ldr	r3, [pc, #460]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a72      	ldr	r2, [pc, #456]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a86:	f043 0308 	orr.w	r3, r3, #8
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	4b70      	ldr	r3, [pc, #448]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	496d      	ldr	r1, [pc, #436]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a9e:	4b6c      	ldr	r3, [pc, #432]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	4968      	ldr	r1, [pc, #416]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]
 8002ab2:	e025      	b.n	8002b00 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ab4:	4b66      	ldr	r3, [pc, #408]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a65      	ldr	r2, [pc, #404]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002aba:	f043 0308 	orr.w	r3, r3, #8
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	4b63      	ldr	r3, [pc, #396]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	4960      	ldr	r1, [pc, #384]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ad2:	4b5f      	ldr	r3, [pc, #380]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	021b      	lsls	r3, r3, #8
 8002ae0:	495b      	ldr	r1, [pc, #364]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d109      	bne.n	8002b00 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fd15 	bl	8003520 <RCC_SetFlashLatencyFromMSIRange>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e343      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b00:	f000 fc4a 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8002b04:	4602      	mov	r2, r0
 8002b06:	4b52      	ldr	r3, [pc, #328]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	091b      	lsrs	r3, r3, #4
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	4950      	ldr	r1, [pc, #320]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002b12:	5ccb      	ldrb	r3, [r1, r3]
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1c:	4a4e      	ldr	r2, [pc, #312]	; (8002c58 <HAL_RCC_OscConfig+0x278>)
 8002b1e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b20:	4b4e      	ldr	r3, [pc, #312]	; (8002c5c <HAL_RCC_OscConfig+0x27c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fe ff85 	bl	8001a34 <HAL_InitTick>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d052      	beq.n	8002bda <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	e327      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d032      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b40:	4b43      	ldr	r3, [pc, #268]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a42      	ldr	r2, [pc, #264]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b4c:	f7fe ffc2 	bl	8001ad4 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b54:	f7fe ffbe 	bl	8001ad4 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e310      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b66:	4b3a      	ldr	r3, [pc, #232]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b72:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a36      	ldr	r2, [pc, #216]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b78:	f043 0308 	orr.w	r3, r3, #8
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	4b34      	ldr	r3, [pc, #208]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	4931      	ldr	r1, [pc, #196]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b90:	4b2f      	ldr	r3, [pc, #188]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	021b      	lsls	r3, r3, #8
 8002b9e:	492c      	ldr	r1, [pc, #176]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	604b      	str	r3, [r1, #4]
 8002ba4:	e01a      	b.n	8002bdc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ba6:	4b2a      	ldr	r3, [pc, #168]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a29      	ldr	r2, [pc, #164]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002bac:	f023 0301 	bic.w	r3, r3, #1
 8002bb0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bb2:	f7fe ff8f 	bl	8001ad4 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bba:	f7fe ff8b 	bl	8001ad4 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e2dd      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bcc:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f0      	bne.n	8002bba <HAL_RCC_OscConfig+0x1da>
 8002bd8:	e000      	b.n	8002bdc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bda:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d074      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d005      	beq.n	8002bfa <HAL_RCC_OscConfig+0x21a>
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	2b0c      	cmp	r3, #12
 8002bf2:	d10e      	bne.n	8002c12 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d10b      	bne.n	8002c12 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfa:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d064      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x2f0>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d160      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e2ba      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1a:	d106      	bne.n	8002c2a <HAL_RCC_OscConfig+0x24a>
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0b      	ldr	r2, [pc, #44]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	e026      	b.n	8002c78 <HAL_RCC_OscConfig+0x298>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c32:	d115      	bne.n	8002c60 <HAL_RCC_OscConfig+0x280>
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a05      	ldr	r2, [pc, #20]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002c3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a02      	ldr	r2, [pc, #8]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	e014      	b.n	8002c78 <HAL_RCC_OscConfig+0x298>
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
 8002c54:	08005878 	.word	0x08005878
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	20000004 	.word	0x20000004
 8002c60:	4ba0      	ldr	r3, [pc, #640]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a9f      	ldr	r2, [pc, #636]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b9d      	ldr	r3, [pc, #628]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a9c      	ldr	r2, [pc, #624]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d013      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe ff28 	bl	8001ad4 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c88:	f7fe ff24 	bl	8001ad4 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	; 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e276      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c9a:	4b92      	ldr	r3, [pc, #584]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0x2a8>
 8002ca6:	e014      	b.n	8002cd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7fe ff14 	bl	8001ad4 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7fe ff10 	bl	8001ad4 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	; 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e262      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cc2:	4b88      	ldr	r3, [pc, #544]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x2d0>
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d060      	beq.n	8002da0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x310>
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	2b0c      	cmp	r3, #12
 8002ce8:	d119      	bne.n	8002d1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d116      	bne.n	8002d1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cf0:	4b7c      	ldr	r3, [pc, #496]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_OscConfig+0x328>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e23f      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d08:	4b76      	ldr	r3, [pc, #472]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	061b      	lsls	r3, r3, #24
 8002d16:	4973      	ldr	r1, [pc, #460]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d1c:	e040      	b.n	8002da0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d023      	beq.n	8002d6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d26:	4b6f      	ldr	r3, [pc, #444]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a6e      	ldr	r2, [pc, #440]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d32:	f7fe fecf 	bl	8001ad4 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3a:	f7fe fecb 	bl	8001ad4 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e21d      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d4c:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d58:	4b62      	ldr	r3, [pc, #392]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	061b      	lsls	r3, r3, #24
 8002d66:	495f      	ldr	r1, [pc, #380]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
 8002d6c:	e018      	b.n	8002da0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d6e:	4b5d      	ldr	r3, [pc, #372]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a5c      	ldr	r2, [pc, #368]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7a:	f7fe feab 	bl	8001ad4 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d82:	f7fe fea7 	bl	8001ad4 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e1f9      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d94:	4b53      	ldr	r3, [pc, #332]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f0      	bne.n	8002d82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d03c      	beq.n	8002e26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01c      	beq.n	8002dee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db4:	4b4b      	ldr	r3, [pc, #300]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dba:	4a4a      	ldr	r2, [pc, #296]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc4:	f7fe fe86 	bl	8001ad4 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dcc:	f7fe fe82 	bl	8001ad4 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e1d4      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dde:	4b41      	ldr	r3, [pc, #260]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0ef      	beq.n	8002dcc <HAL_RCC_OscConfig+0x3ec>
 8002dec:	e01b      	b.n	8002e26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dee:	4b3d      	ldr	r3, [pc, #244]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002df4:	4a3b      	ldr	r2, [pc, #236]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002df6:	f023 0301 	bic.w	r3, r3, #1
 8002dfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfe:	f7fe fe69 	bl	8001ad4 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e06:	f7fe fe65 	bl	8001ad4 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e1b7      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e18:	4b32      	ldr	r3, [pc, #200]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1ef      	bne.n	8002e06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 80a6 	beq.w	8002f80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e34:	2300      	movs	r3, #0
 8002e36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e38:	4b2a      	ldr	r3, [pc, #168]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10d      	bne.n	8002e60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e44:	4b27      	ldr	r3, [pc, #156]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e48:	4a26      	ldr	r2, [pc, #152]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e50:	4b24      	ldr	r3, [pc, #144]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e60:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <HAL_RCC_OscConfig+0x508>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d118      	bne.n	8002e9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ee8 <HAL_RCC_OscConfig+0x508>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1d      	ldr	r2, [pc, #116]	; (8002ee8 <HAL_RCC_OscConfig+0x508>)
 8002e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e78:	f7fe fe2c 	bl	8001ad4 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e80:	f7fe fe28 	bl	8001ad4 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e17a      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <HAL_RCC_OscConfig+0x508>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d108      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x4d8>
 8002ea6:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eac:	4a0d      	ldr	r2, [pc, #52]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eb6:	e029      	b.n	8002f0c <HAL_RCC_OscConfig+0x52c>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b05      	cmp	r3, #5
 8002ebe:	d115      	bne.n	8002eec <HAL_RCC_OscConfig+0x50c>
 8002ec0:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	4a07      	ldr	r2, [pc, #28]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002ec8:	f043 0304 	orr.w	r3, r3, #4
 8002ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed6:	4a03      	ldr	r2, [pc, #12]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ee0:	e014      	b.n	8002f0c <HAL_RCC_OscConfig+0x52c>
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40007000 	.word	0x40007000
 8002eec:	4b9c      	ldr	r3, [pc, #624]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef2:	4a9b      	ldr	r2, [pc, #620]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002efc:	4b98      	ldr	r3, [pc, #608]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f02:	4a97      	ldr	r2, [pc, #604]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8002f04:	f023 0304 	bic.w	r3, r3, #4
 8002f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d016      	beq.n	8002f42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f14:	f7fe fdde 	bl	8001ad4 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1c:	f7fe fdda 	bl	8001ad4 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e12a      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f32:	4b8b      	ldr	r3, [pc, #556]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0ed      	beq.n	8002f1c <HAL_RCC_OscConfig+0x53c>
 8002f40:	e015      	b.n	8002f6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f42:	f7fe fdc7 	bl	8001ad4 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f48:	e00a      	b.n	8002f60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4a:	f7fe fdc3 	bl	8001ad4 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e113      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f60:	4b7f      	ldr	r3, [pc, #508]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1ed      	bne.n	8002f4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f6e:	7ffb      	ldrb	r3, [r7, #31]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f74:	4b7a      	ldr	r3, [pc, #488]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8002f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f78:	4a79      	ldr	r2, [pc, #484]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8002f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 80fe 	beq.w	8003186 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	f040 80d0 	bne.w	8003134 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f94:	4b72      	ldr	r3, [pc, #456]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f003 0203 	and.w	r2, r3, #3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d130      	bne.n	800300a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d127      	bne.n	800300a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d11f      	bne.n	800300a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fd4:	2a07      	cmp	r2, #7
 8002fd6:	bf14      	ite	ne
 8002fd8:	2201      	movne	r2, #1
 8002fda:	2200      	moveq	r2, #0
 8002fdc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d113      	bne.n	800300a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fec:	085b      	lsrs	r3, r3, #1
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d109      	bne.n	800300a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	085b      	lsrs	r3, r3, #1
 8003002:	3b01      	subs	r3, #1
 8003004:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d06e      	beq.n	80030e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b0c      	cmp	r3, #12
 800300e:	d069      	beq.n	80030e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003010:	4b53      	ldr	r3, [pc, #332]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d105      	bne.n	8003028 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800301c:	4b50      	ldr	r3, [pc, #320]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0ad      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800302c:	4b4c      	ldr	r3, [pc, #304]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a4b      	ldr	r2, [pc, #300]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8003032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003036:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003038:	f7fe fd4c 	bl	8001ad4 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003040:	f7fe fd48 	bl	8001ad4 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e09a      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003052:	4b43      	ldr	r3, [pc, #268]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800305e:	4b40      	ldr	r3, [pc, #256]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	4b40      	ldr	r3, [pc, #256]	; (8003164 <HAL_RCC_OscConfig+0x784>)
 8003064:	4013      	ands	r3, r2
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800306e:	3a01      	subs	r2, #1
 8003070:	0112      	lsls	r2, r2, #4
 8003072:	4311      	orrs	r1, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003078:	0212      	lsls	r2, r2, #8
 800307a:	4311      	orrs	r1, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003080:	0852      	lsrs	r2, r2, #1
 8003082:	3a01      	subs	r2, #1
 8003084:	0552      	lsls	r2, r2, #21
 8003086:	4311      	orrs	r1, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800308c:	0852      	lsrs	r2, r2, #1
 800308e:	3a01      	subs	r2, #1
 8003090:	0652      	lsls	r2, r2, #25
 8003092:	4311      	orrs	r1, r2
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003098:	0912      	lsrs	r2, r2, #4
 800309a:	0452      	lsls	r2, r2, #17
 800309c:	430a      	orrs	r2, r1
 800309e:	4930      	ldr	r1, [pc, #192]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030a4:	4b2e      	ldr	r3, [pc, #184]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a2d      	ldr	r2, [pc, #180]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 80030aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030b0:	4b2b      	ldr	r3, [pc, #172]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4a2a      	ldr	r2, [pc, #168]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 80030b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030bc:	f7fe fd0a 	bl	8001ad4 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c4:	f7fe fd06 	bl	8001ad4 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e058      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d6:	4b22      	ldr	r3, [pc, #136]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f0      	beq.n	80030c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030e2:	e050      	b.n	8003186 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e04f      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e8:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d148      	bne.n	8003186 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030f4:	4b1a      	ldr	r3, [pc, #104]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a19      	ldr	r2, [pc, #100]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 80030fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003100:	4b17      	ldr	r3, [pc, #92]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4a16      	ldr	r2, [pc, #88]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8003106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800310a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800310c:	f7fe fce2 	bl	8001ad4 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003114:	f7fe fcde 	bl	8001ad4 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e030      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003126:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x734>
 8003132:	e028      	b.n	8003186 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	2b0c      	cmp	r3, #12
 8003138:	d023      	beq.n	8003182 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313a:	4b09      	ldr	r3, [pc, #36]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a08      	ldr	r2, [pc, #32]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8003140:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003146:	f7fe fcc5 	bl	8001ad4 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800314c:	e00c      	b.n	8003168 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314e:	f7fe fcc1 	bl	8001ad4 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d905      	bls.n	8003168 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e013      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
 8003160:	40021000 	.word	0x40021000
 8003164:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003168:	4b09      	ldr	r3, [pc, #36]	; (8003190 <HAL_RCC_OscConfig+0x7b0>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1ec      	bne.n	800314e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003174:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_RCC_OscConfig+0x7b0>)
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	4905      	ldr	r1, [pc, #20]	; (8003190 <HAL_RCC_OscConfig+0x7b0>)
 800317a:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_RCC_OscConfig+0x7b4>)
 800317c:	4013      	ands	r3, r2
 800317e:	60cb      	str	r3, [r1, #12]
 8003180:	e001      	b.n	8003186 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3720      	adds	r7, #32
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40021000 	.word	0x40021000
 8003194:	feeefffc 	.word	0xfeeefffc

08003198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0e7      	b.n	800337c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031ac:	4b75      	ldr	r3, [pc, #468]	; (8003384 <HAL_RCC_ClockConfig+0x1ec>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d910      	bls.n	80031dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b72      	ldr	r3, [pc, #456]	; (8003384 <HAL_RCC_ClockConfig+0x1ec>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 0207 	bic.w	r2, r3, #7
 80031c2:	4970      	ldr	r1, [pc, #448]	; (8003384 <HAL_RCC_ClockConfig+0x1ec>)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b6e      	ldr	r3, [pc, #440]	; (8003384 <HAL_RCC_ClockConfig+0x1ec>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0cf      	b.n	800337c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d010      	beq.n	800320a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	4b66      	ldr	r3, [pc, #408]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d908      	bls.n	800320a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f8:	4b63      	ldr	r3, [pc, #396]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4960      	ldr	r1, [pc, #384]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d04c      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b03      	cmp	r3, #3
 800321c:	d107      	bne.n	800322e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800321e:	4b5a      	ldr	r3, [pc, #360]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d121      	bne.n	800326e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e0a6      	b.n	800337c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d107      	bne.n	8003246 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003236:	4b54      	ldr	r3, [pc, #336]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d115      	bne.n	800326e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e09a      	b.n	800337c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d107      	bne.n	800325e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800324e:	4b4e      	ldr	r3, [pc, #312]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e08e      	b.n	800337c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800325e:	4b4a      	ldr	r3, [pc, #296]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e086      	b.n	800337c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800326e:	4b46      	ldr	r3, [pc, #280]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f023 0203 	bic.w	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4943      	ldr	r1, [pc, #268]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 800327c:	4313      	orrs	r3, r2
 800327e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003280:	f7fe fc28 	bl	8001ad4 <HAL_GetTick>
 8003284:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003286:	e00a      	b.n	800329e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003288:	f7fe fc24 	bl	8001ad4 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f241 3288 	movw	r2, #5000	; 0x1388
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e06e      	b.n	800337c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329e:	4b3a      	ldr	r3, [pc, #232]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 020c 	and.w	r2, r3, #12
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d1eb      	bne.n	8003288 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d010      	beq.n	80032de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	4b31      	ldr	r3, [pc, #196]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d208      	bcs.n	80032de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032cc:	4b2e      	ldr	r3, [pc, #184]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	492b      	ldr	r1, [pc, #172]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032de:	4b29      	ldr	r3, [pc, #164]	; (8003384 <HAL_RCC_ClockConfig+0x1ec>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d210      	bcs.n	800330e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ec:	4b25      	ldr	r3, [pc, #148]	; (8003384 <HAL_RCC_ClockConfig+0x1ec>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f023 0207 	bic.w	r2, r3, #7
 80032f4:	4923      	ldr	r1, [pc, #140]	; (8003384 <HAL_RCC_ClockConfig+0x1ec>)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fc:	4b21      	ldr	r3, [pc, #132]	; (8003384 <HAL_RCC_ClockConfig+0x1ec>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d001      	beq.n	800330e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e036      	b.n	800337c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	2b00      	cmp	r3, #0
 8003318:	d008      	beq.n	800332c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800331a:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	4918      	ldr	r1, [pc, #96]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 8003328:	4313      	orrs	r3, r2
 800332a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d009      	beq.n	800334c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003338:	4b13      	ldr	r3, [pc, #76]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4910      	ldr	r1, [pc, #64]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 8003348:	4313      	orrs	r3, r2
 800334a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800334c:	f000 f824 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8003350:	4602      	mov	r2, r0
 8003352:	4b0d      	ldr	r3, [pc, #52]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	091b      	lsrs	r3, r3, #4
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	490b      	ldr	r1, [pc, #44]	; (800338c <HAL_RCC_ClockConfig+0x1f4>)
 800335e:	5ccb      	ldrb	r3, [r1, r3]
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	fa22 f303 	lsr.w	r3, r2, r3
 8003368:	4a09      	ldr	r2, [pc, #36]	; (8003390 <HAL_RCC_ClockConfig+0x1f8>)
 800336a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800336c:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_RCC_ClockConfig+0x1fc>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f7fe fb5f 	bl	8001a34 <HAL_InitTick>
 8003376:	4603      	mov	r3, r0
 8003378:	72fb      	strb	r3, [r7, #11]

  return status;
 800337a:	7afb      	ldrb	r3, [r7, #11]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40022000 	.word	0x40022000
 8003388:	40021000 	.word	0x40021000
 800338c:	08005878 	.word	0x08005878
 8003390:	20000000 	.word	0x20000000
 8003394:	20000004 	.word	0x20000004

08003398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003398:	b480      	push	{r7}
 800339a:	b089      	sub	sp, #36	; 0x24
 800339c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	2300      	movs	r3, #0
 80033a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a6:	4b3e      	ldr	r3, [pc, #248]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033b0:	4b3b      	ldr	r3, [pc, #236]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0x34>
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	2b0c      	cmp	r3, #12
 80033c4:	d121      	bne.n	800340a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d11e      	bne.n	800340a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033cc:	4b34      	ldr	r3, [pc, #208]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d107      	bne.n	80033e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033d8:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033de:	0a1b      	lsrs	r3, r3, #8
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	61fb      	str	r3, [r7, #28]
 80033e6:	e005      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033e8:	4b2d      	ldr	r3, [pc, #180]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033f4:	4a2b      	ldr	r2, [pc, #172]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10d      	bne.n	8003420 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003408:	e00a      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b04      	cmp	r3, #4
 800340e:	d102      	bne.n	8003416 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003410:	4b25      	ldr	r3, [pc, #148]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003412:	61bb      	str	r3, [r7, #24]
 8003414:	e004      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b08      	cmp	r3, #8
 800341a:	d101      	bne.n	8003420 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800341c:	4b23      	ldr	r3, [pc, #140]	; (80034ac <HAL_RCC_GetSysClockFreq+0x114>)
 800341e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	2b0c      	cmp	r3, #12
 8003424:	d134      	bne.n	8003490 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003426:	4b1e      	ldr	r3, [pc, #120]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d003      	beq.n	800343e <HAL_RCC_GetSysClockFreq+0xa6>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b03      	cmp	r3, #3
 800343a:	d003      	beq.n	8003444 <HAL_RCC_GetSysClockFreq+0xac>
 800343c:	e005      	b.n	800344a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800343e:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003440:	617b      	str	r3, [r7, #20]
      break;
 8003442:	e005      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003444:	4b19      	ldr	r3, [pc, #100]	; (80034ac <HAL_RCC_GetSysClockFreq+0x114>)
 8003446:	617b      	str	r3, [r7, #20]
      break;
 8003448:	e002      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	617b      	str	r3, [r7, #20]
      break;
 800344e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003450:	4b13      	ldr	r3, [pc, #76]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	3301      	adds	r3, #1
 800345c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800345e:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	0a1b      	lsrs	r3, r3, #8
 8003464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	fb03 f202 	mul.w	r2, r3, r2
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	fbb2 f3f3 	udiv	r3, r2, r3
 8003474:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003476:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	0e5b      	lsrs	r3, r3, #25
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	3301      	adds	r3, #1
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	fbb2 f3f3 	udiv	r3, r2, r3
 800348e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003490:	69bb      	ldr	r3, [r7, #24]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3724      	adds	r7, #36	; 0x24
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
 80034a4:	08005890 	.word	0x08005890
 80034a8:	00f42400 	.word	0x00f42400
 80034ac:	007a1200 	.word	0x007a1200

080034b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b4:	4b03      	ldr	r3, [pc, #12]	; (80034c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034b6:	681b      	ldr	r3, [r3, #0]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	20000000 	.word	0x20000000

080034c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034cc:	f7ff fff0 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 80034d0:	4602      	mov	r2, r0
 80034d2:	4b06      	ldr	r3, [pc, #24]	; (80034ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	0a1b      	lsrs	r3, r3, #8
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	4904      	ldr	r1, [pc, #16]	; (80034f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034de:	5ccb      	ldrb	r3, [r1, r3]
 80034e0:	f003 031f 	and.w	r3, r3, #31
 80034e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40021000 	.word	0x40021000
 80034f0:	08005888 	.word	0x08005888

080034f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034f8:	f7ff ffda 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	0adb      	lsrs	r3, r3, #11
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	4904      	ldr	r1, [pc, #16]	; (800351c <HAL_RCC_GetPCLK2Freq+0x28>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003514:	4618      	mov	r0, r3
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40021000 	.word	0x40021000
 800351c:	08005888 	.word	0x08005888

08003520 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003528:	2300      	movs	r3, #0
 800352a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800352c:	4b2a      	ldr	r3, [pc, #168]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800352e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003538:	f7ff f922 	bl	8002780 <HAL_PWREx_GetVoltageRange>
 800353c:	6178      	str	r0, [r7, #20]
 800353e:	e014      	b.n	800356a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003540:	4b25      	ldr	r3, [pc, #148]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003544:	4a24      	ldr	r2, [pc, #144]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800354a:	6593      	str	r3, [r2, #88]	; 0x58
 800354c:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003558:	f7ff f912 	bl	8002780 <HAL_PWREx_GetVoltageRange>
 800355c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800355e:	4b1e      	ldr	r3, [pc, #120]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003562:	4a1d      	ldr	r2, [pc, #116]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003568:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003570:	d10b      	bne.n	800358a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b80      	cmp	r3, #128	; 0x80
 8003576:	d919      	bls.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2ba0      	cmp	r3, #160	; 0xa0
 800357c:	d902      	bls.n	8003584 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800357e:	2302      	movs	r3, #2
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	e013      	b.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003584:	2301      	movs	r3, #1
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	e010      	b.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b80      	cmp	r3, #128	; 0x80
 800358e:	d902      	bls.n	8003596 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003590:	2303      	movs	r3, #3
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	e00a      	b.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b80      	cmp	r3, #128	; 0x80
 800359a:	d102      	bne.n	80035a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800359c:	2302      	movs	r3, #2
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	e004      	b.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b70      	cmp	r3, #112	; 0x70
 80035a6:	d101      	bne.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035a8:	2301      	movs	r3, #1
 80035aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f023 0207 	bic.w	r2, r3, #7
 80035b4:	4909      	ldr	r1, [pc, #36]	; (80035dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035bc:	4b07      	ldr	r3, [pc, #28]	; (80035dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d001      	beq.n	80035ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40022000 	.word	0x40022000

080035e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035e8:	2300      	movs	r3, #0
 80035ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035ec:	2300      	movs	r3, #0
 80035ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d041      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003600:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003604:	d02a      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003606:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800360a:	d824      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800360c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003610:	d008      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003612:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003616:	d81e      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800361c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003620:	d010      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003622:	e018      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003624:	4b86      	ldr	r3, [pc, #536]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4a85      	ldr	r2, [pc, #532]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800362e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003630:	e015      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3304      	adds	r3, #4
 8003636:	2100      	movs	r1, #0
 8003638:	4618      	mov	r0, r3
 800363a:	f000 facb 	bl	8003bd4 <RCCEx_PLLSAI1_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003642:	e00c      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3320      	adds	r3, #32
 8003648:	2100      	movs	r1, #0
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fbb6 	bl	8003dbc <RCCEx_PLLSAI2_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003654:	e003      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	74fb      	strb	r3, [r7, #19]
      break;
 800365a:	e000      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800365c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800365e:	7cfb      	ldrb	r3, [r7, #19]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10b      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003664:	4b76      	ldr	r3, [pc, #472]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003672:	4973      	ldr	r1, [pc, #460]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800367a:	e001      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367c:	7cfb      	ldrb	r3, [r7, #19]
 800367e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d041      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003690:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003694:	d02a      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003696:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800369a:	d824      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800369c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036a0:	d008      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036a6:	d81e      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80036ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036b0:	d010      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036b2:	e018      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036b4:	4b62      	ldr	r3, [pc, #392]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	4a61      	ldr	r2, [pc, #388]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036c0:	e015      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3304      	adds	r3, #4
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 fa83 	bl	8003bd4 <RCCEx_PLLSAI1_Config>
 80036ce:	4603      	mov	r3, r0
 80036d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036d2:	e00c      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3320      	adds	r3, #32
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fb6e 	bl	8003dbc <RCCEx_PLLSAI2_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036e4:	e003      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	74fb      	strb	r3, [r7, #19]
      break;
 80036ea:	e000      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80036ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ee:	7cfb      	ldrb	r3, [r7, #19]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10b      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036f4:	4b52      	ldr	r3, [pc, #328]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003702:	494f      	ldr	r1, [pc, #316]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800370a:	e001      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80a0 	beq.w	800385e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800371e:	2300      	movs	r3, #0
 8003720:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003732:	2300      	movs	r3, #0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00d      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003738:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373c:	4a40      	ldr	r2, [pc, #256]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003742:	6593      	str	r3, [r2, #88]	; 0x58
 8003744:	4b3e      	ldr	r3, [pc, #248]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003750:	2301      	movs	r3, #1
 8003752:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003754:	4b3b      	ldr	r3, [pc, #236]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a3a      	ldr	r2, [pc, #232]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800375a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800375e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003760:	f7fe f9b8 	bl	8001ad4 <HAL_GetTick>
 8003764:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003766:	e009      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003768:	f7fe f9b4 	bl	8001ad4 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d902      	bls.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	74fb      	strb	r3, [r7, #19]
        break;
 800377a:	e005      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800377c:	4b31      	ldr	r3, [pc, #196]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0ef      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003788:	7cfb      	ldrb	r3, [r7, #19]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d15c      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800378e:	4b2c      	ldr	r3, [pc, #176]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003794:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003798:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01f      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d019      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037ac:	4b24      	ldr	r3, [pc, #144]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037b8:	4b21      	ldr	r3, [pc, #132]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037be:	4a20      	ldr	r2, [pc, #128]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037c8:	4b1d      	ldr	r3, [pc, #116]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ce:	4a1c      	ldr	r2, [pc, #112]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037d8:	4a19      	ldr	r2, [pc, #100]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d016      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ea:	f7fe f973 	bl	8001ad4 <HAL_GetTick>
 80037ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037f0:	e00b      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f2:	f7fe f96f 	bl	8001ad4 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003800:	4293      	cmp	r3, r2
 8003802:	d902      	bls.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	74fb      	strb	r3, [r7, #19]
            break;
 8003808:	e006      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800380a:	4b0d      	ldr	r3, [pc, #52]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0ec      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003818:	7cfb      	ldrb	r3, [r7, #19]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10c      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800381e:	4b08      	ldr	r3, [pc, #32]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003824:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800382e:	4904      	ldr	r1, [pc, #16]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003836:	e009      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003838:	7cfb      	ldrb	r3, [r7, #19]
 800383a:	74bb      	strb	r3, [r7, #18]
 800383c:	e006      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000
 8003844:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003848:	7cfb      	ldrb	r3, [r7, #19]
 800384a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800384c:	7c7b      	ldrb	r3, [r7, #17]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d105      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003852:	4b9e      	ldr	r3, [pc, #632]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003856:	4a9d      	ldr	r2, [pc, #628]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800385c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800386a:	4b98      	ldr	r3, [pc, #608]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003870:	f023 0203 	bic.w	r2, r3, #3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003878:	4994      	ldr	r1, [pc, #592]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800388c:	4b8f      	ldr	r3, [pc, #572]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003892:	f023 020c 	bic.w	r2, r3, #12
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389a:	498c      	ldr	r1, [pc, #560]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038ae:	4b87      	ldr	r3, [pc, #540]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	4983      	ldr	r1, [pc, #524]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038d0:	4b7e      	ldr	r3, [pc, #504]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038de:	497b      	ldr	r1, [pc, #492]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038f2:	4b76      	ldr	r3, [pc, #472]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003900:	4972      	ldr	r1, [pc, #456]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003914:	4b6d      	ldr	r3, [pc, #436]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003922:	496a      	ldr	r1, [pc, #424]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003936:	4b65      	ldr	r3, [pc, #404]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003944:	4961      	ldr	r1, [pc, #388]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003958:	4b5c      	ldr	r3, [pc, #368]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003966:	4959      	ldr	r1, [pc, #356]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800397a:	4b54      	ldr	r3, [pc, #336]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003980:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003988:	4950      	ldr	r1, [pc, #320]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800399c:	4b4b      	ldr	r3, [pc, #300]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039aa:	4948      	ldr	r1, [pc, #288]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039be:	4b43      	ldr	r3, [pc, #268]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039cc:	493f      	ldr	r1, [pc, #252]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d028      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039e0:	4b3a      	ldr	r3, [pc, #232]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ee:	4937      	ldr	r1, [pc, #220]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039fe:	d106      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a00:	4b32      	ldr	r3, [pc, #200]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4a31      	ldr	r2, [pc, #196]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a0a:	60d3      	str	r3, [r2, #12]
 8003a0c:	e011      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a16:	d10c      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 f8d8 	bl	8003bd4 <RCCEx_PLLSAI1_Config>
 8003a24:	4603      	mov	r3, r0
 8003a26:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a28:	7cfb      	ldrb	r3, [r7, #19]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a2e:	7cfb      	ldrb	r3, [r7, #19]
 8003a30:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d028      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a3e:	4b23      	ldr	r3, [pc, #140]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4c:	491f      	ldr	r1, [pc, #124]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a5c:	d106      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a5e:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	4a1a      	ldr	r2, [pc, #104]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a68:	60d3      	str	r3, [r2, #12]
 8003a6a:	e011      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a74:	d10c      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 f8a9 	bl	8003bd4 <RCCEx_PLLSAI1_Config>
 8003a82:	4603      	mov	r3, r0
 8003a84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a86:	7cfb      	ldrb	r3, [r7, #19]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a8c:	7cfb      	ldrb	r3, [r7, #19]
 8003a8e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d02b      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aaa:	4908      	ldr	r1, [pc, #32]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aba:	d109      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003abc:	4b03      	ldr	r3, [pc, #12]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	4a02      	ldr	r2, [pc, #8]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ac6:	60d3      	str	r3, [r2, #12]
 8003ac8:	e014      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ad8:	d10c      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3304      	adds	r3, #4
 8003ade:	2101      	movs	r1, #1
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 f877 	bl	8003bd4 <RCCEx_PLLSAI1_Config>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aea:	7cfb      	ldrb	r3, [r7, #19]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003af0:	7cfb      	ldrb	r3, [r7, #19]
 8003af2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d02f      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b00:	4b2b      	ldr	r3, [pc, #172]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b0e:	4928      	ldr	r1, [pc, #160]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b1e:	d10d      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3304      	adds	r3, #4
 8003b24:	2102      	movs	r1, #2
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 f854 	bl	8003bd4 <RCCEx_PLLSAI1_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b30:	7cfb      	ldrb	r3, [r7, #19]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d014      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b36:	7cfb      	ldrb	r3, [r7, #19]
 8003b38:	74bb      	strb	r3, [r7, #18]
 8003b3a:	e011      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b44:	d10c      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3320      	adds	r3, #32
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 f935 	bl	8003dbc <RCCEx_PLLSAI2_Config>
 8003b52:	4603      	mov	r3, r0
 8003b54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b56:	7cfb      	ldrb	r3, [r7, #19]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b5c:	7cfb      	ldrb	r3, [r7, #19]
 8003b5e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b6c:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b72:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b7a:	490d      	ldr	r1, [pc, #52]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00b      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b8e:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b9e:	4904      	ldr	r1, [pc, #16]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ba6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40021000 	.word	0x40021000

08003bb4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003bb8:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a04      	ldr	r2, [pc, #16]	; (8003bd0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003bbe:	f043 0304 	orr.w	r3, r3, #4
 8003bc2:	6013      	str	r3, [r2, #0]
}
 8003bc4:	bf00      	nop
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000

08003bd4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003be2:	4b75      	ldr	r3, [pc, #468]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d018      	beq.n	8003c20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bee:	4b72      	ldr	r3, [pc, #456]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f003 0203 	and.w	r2, r3, #3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d10d      	bne.n	8003c1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
       ||
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d009      	beq.n	8003c1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c06:	4b6c      	ldr	r3, [pc, #432]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	091b      	lsrs	r3, r3, #4
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
       ||
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d047      	beq.n	8003caa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	73fb      	strb	r3, [r7, #15]
 8003c1e:	e044      	b.n	8003caa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d018      	beq.n	8003c5a <RCCEx_PLLSAI1_Config+0x86>
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d825      	bhi.n	8003c78 <RCCEx_PLLSAI1_Config+0xa4>
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d002      	beq.n	8003c36 <RCCEx_PLLSAI1_Config+0x62>
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d009      	beq.n	8003c48 <RCCEx_PLLSAI1_Config+0x74>
 8003c34:	e020      	b.n	8003c78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c36:	4b60      	ldr	r3, [pc, #384]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d11d      	bne.n	8003c7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c46:	e01a      	b.n	8003c7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c48:	4b5b      	ldr	r3, [pc, #364]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d116      	bne.n	8003c82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c58:	e013      	b.n	8003c82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c5a:	4b57      	ldr	r3, [pc, #348]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10f      	bne.n	8003c86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c66:	4b54      	ldr	r3, [pc, #336]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d109      	bne.n	8003c86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c76:	e006      	b.n	8003c86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c7c:	e004      	b.n	8003c88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c7e:	bf00      	nop
 8003c80:	e002      	b.n	8003c88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c82:	bf00      	nop
 8003c84:	e000      	b.n	8003c88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c86:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10d      	bne.n	8003caa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c8e:	4b4a      	ldr	r3, [pc, #296]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6819      	ldr	r1, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	4944      	ldr	r1, [pc, #272]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d17d      	bne.n	8003dac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003cb0:	4b41      	ldr	r3, [pc, #260]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a40      	ldr	r2, [pc, #256]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cbc:	f7fd ff0a 	bl	8001ad4 <HAL_GetTick>
 8003cc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cc2:	e009      	b.n	8003cd8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cc4:	f7fd ff06 	bl	8001ad4 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d902      	bls.n	8003cd8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	73fb      	strb	r3, [r7, #15]
        break;
 8003cd6:	e005      	b.n	8003ce4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cd8:	4b37      	ldr	r3, [pc, #220]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1ef      	bne.n	8003cc4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d160      	bne.n	8003dac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d111      	bne.n	8003d14 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cf0:	4b31      	ldr	r3, [pc, #196]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6892      	ldr	r2, [r2, #8]
 8003d00:	0211      	lsls	r1, r2, #8
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68d2      	ldr	r2, [r2, #12]
 8003d06:	0912      	lsrs	r2, r2, #4
 8003d08:	0452      	lsls	r2, r2, #17
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	492a      	ldr	r1, [pc, #168]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	610b      	str	r3, [r1, #16]
 8003d12:	e027      	b.n	8003d64 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d112      	bne.n	8003d40 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d1a:	4b27      	ldr	r3, [pc, #156]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d22:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6892      	ldr	r2, [r2, #8]
 8003d2a:	0211      	lsls	r1, r2, #8
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6912      	ldr	r2, [r2, #16]
 8003d30:	0852      	lsrs	r2, r2, #1
 8003d32:	3a01      	subs	r2, #1
 8003d34:	0552      	lsls	r2, r2, #21
 8003d36:	430a      	orrs	r2, r1
 8003d38:	491f      	ldr	r1, [pc, #124]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	610b      	str	r3, [r1, #16]
 8003d3e:	e011      	b.n	8003d64 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d40:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6892      	ldr	r2, [r2, #8]
 8003d50:	0211      	lsls	r1, r2, #8
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6952      	ldr	r2, [r2, #20]
 8003d56:	0852      	lsrs	r2, r2, #1
 8003d58:	3a01      	subs	r2, #1
 8003d5a:	0652      	lsls	r2, r2, #25
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	4916      	ldr	r1, [pc, #88]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d64:	4b14      	ldr	r3, [pc, #80]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a13      	ldr	r2, [pc, #76]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d70:	f7fd feb0 	bl	8001ad4 <HAL_GetTick>
 8003d74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d76:	e009      	b.n	8003d8c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d78:	f7fd feac 	bl	8001ad4 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d902      	bls.n	8003d8c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	73fb      	strb	r3, [r7, #15]
          break;
 8003d8a:	e005      	b.n	8003d98 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d8c:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0ef      	beq.n	8003d78 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d9e:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	4904      	ldr	r1, [pc, #16]	; (8003db8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40021000 	.word	0x40021000

08003dbc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dca:	4b6a      	ldr	r3, [pc, #424]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d018      	beq.n	8003e08 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003dd6:	4b67      	ldr	r3, [pc, #412]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f003 0203 	and.w	r2, r3, #3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d10d      	bne.n	8003e02 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
       ||
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003dee:	4b61      	ldr	r3, [pc, #388]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	091b      	lsrs	r3, r3, #4
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
       ||
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d047      	beq.n	8003e92 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
 8003e06:	e044      	b.n	8003e92 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d018      	beq.n	8003e42 <RCCEx_PLLSAI2_Config+0x86>
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d825      	bhi.n	8003e60 <RCCEx_PLLSAI2_Config+0xa4>
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d002      	beq.n	8003e1e <RCCEx_PLLSAI2_Config+0x62>
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d009      	beq.n	8003e30 <RCCEx_PLLSAI2_Config+0x74>
 8003e1c:	e020      	b.n	8003e60 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e1e:	4b55      	ldr	r3, [pc, #340]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d11d      	bne.n	8003e66 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e2e:	e01a      	b.n	8003e66 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e30:	4b50      	ldr	r3, [pc, #320]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d116      	bne.n	8003e6a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e40:	e013      	b.n	8003e6a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e42:	4b4c      	ldr	r3, [pc, #304]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10f      	bne.n	8003e6e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e4e:	4b49      	ldr	r3, [pc, #292]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d109      	bne.n	8003e6e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e5e:	e006      	b.n	8003e6e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]
      break;
 8003e64:	e004      	b.n	8003e70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e66:	bf00      	nop
 8003e68:	e002      	b.n	8003e70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e6a:	bf00      	nop
 8003e6c:	e000      	b.n	8003e70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10d      	bne.n	8003e92 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e76:	4b3f      	ldr	r3, [pc, #252]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6819      	ldr	r1, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	430b      	orrs	r3, r1
 8003e8c:	4939      	ldr	r1, [pc, #228]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d167      	bne.n	8003f68 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e98:	4b36      	ldr	r3, [pc, #216]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a35      	ldr	r2, [pc, #212]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ea4:	f7fd fe16 	bl	8001ad4 <HAL_GetTick>
 8003ea8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003eaa:	e009      	b.n	8003ec0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003eac:	f7fd fe12 	bl	8001ad4 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d902      	bls.n	8003ec0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	73fb      	strb	r3, [r7, #15]
        break;
 8003ebe:	e005      	b.n	8003ecc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ec0:	4b2c      	ldr	r3, [pc, #176]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1ef      	bne.n	8003eac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d14a      	bne.n	8003f68 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d111      	bne.n	8003efc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ed8:	4b26      	ldr	r3, [pc, #152]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6892      	ldr	r2, [r2, #8]
 8003ee8:	0211      	lsls	r1, r2, #8
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	68d2      	ldr	r2, [r2, #12]
 8003eee:	0912      	lsrs	r2, r2, #4
 8003ef0:	0452      	lsls	r2, r2, #17
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	491f      	ldr	r1, [pc, #124]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	614b      	str	r3, [r1, #20]
 8003efa:	e011      	b.n	8003f20 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003efc:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6892      	ldr	r2, [r2, #8]
 8003f0c:	0211      	lsls	r1, r2, #8
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6912      	ldr	r2, [r2, #16]
 8003f12:	0852      	lsrs	r2, r2, #1
 8003f14:	3a01      	subs	r2, #1
 8003f16:	0652      	lsls	r2, r2, #25
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	4916      	ldr	r1, [pc, #88]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f20:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a13      	ldr	r2, [pc, #76]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2c:	f7fd fdd2 	bl	8001ad4 <HAL_GetTick>
 8003f30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f32:	e009      	b.n	8003f48 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f34:	f7fd fdce 	bl	8001ad4 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d902      	bls.n	8003f48 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	73fb      	strb	r3, [r7, #15]
          break;
 8003f46:	e005      	b.n	8003f54 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f48:	4b0a      	ldr	r3, [pc, #40]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0ef      	beq.n	8003f34 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f5a:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5c:	695a      	ldr	r2, [r3, #20]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	4904      	ldr	r1, [pc, #16]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40021000 	.word	0x40021000

08003f78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e095      	b.n	80040b6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d108      	bne.n	8003fa4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f9a:	d009      	beq.n	8003fb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	61da      	str	r2, [r3, #28]
 8003fa2:	e005      	b.n	8003fb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fd faa4 	bl	8001518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ff0:	d902      	bls.n	8003ff8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	e002      	b.n	8003ffe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ffc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004006:	d007      	beq.n	8004018 <HAL_SPI_Init+0xa0>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004010:	d002      	beq.n	8004018 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405a:	ea42 0103 	orr.w	r1, r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004062:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	0c1b      	lsrs	r3, r3, #16
 8004074:	f003 0204 	and.w	r2, r3, #4
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	431a      	orrs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004094:	ea42 0103 	orr.w	r1, r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e040      	b.n	8004152 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d106      	bne.n	80040e6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7fd fa5d 	bl	80015a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2224      	movs	r2, #36	; 0x24
 80040ea:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0201 	bic.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fae1 	bl	80046cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f826 	bl	800415c <UART_SetConfig>
 8004110:	4603      	mov	r3, r0
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e01b      	b.n	8004152 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004128:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004138:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0201 	orr.w	r2, r2, #1
 8004148:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fb60 	bl	8004810 <UART_CheckIdleState>
 8004150:	4603      	mov	r3, r0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800415c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004160:	b08a      	sub	sp, #40	; 0x28
 8004162:	af00      	add	r7, sp, #0
 8004164:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004166:	2300      	movs	r3, #0
 8004168:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	431a      	orrs	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	431a      	orrs	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	4313      	orrs	r3, r2
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	4ba4      	ldr	r3, [pc, #656]	; (800441c <UART_SetConfig+0x2c0>)
 800418c:	4013      	ands	r3, r2
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	6812      	ldr	r2, [r2, #0]
 8004192:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004194:	430b      	orrs	r3, r1
 8004196:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a99      	ldr	r2, [pc, #612]	; (8004420 <UART_SetConfig+0x2c4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d004      	beq.n	80041c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c4:	4313      	orrs	r3, r2
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d8:	430a      	orrs	r2, r1
 80041da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a90      	ldr	r2, [pc, #576]	; (8004424 <UART_SetConfig+0x2c8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d126      	bne.n	8004234 <UART_SetConfig+0xd8>
 80041e6:	4b90      	ldr	r3, [pc, #576]	; (8004428 <UART_SetConfig+0x2cc>)
 80041e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ec:	f003 0303 	and.w	r3, r3, #3
 80041f0:	2b03      	cmp	r3, #3
 80041f2:	d81b      	bhi.n	800422c <UART_SetConfig+0xd0>
 80041f4:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <UART_SetConfig+0xa0>)
 80041f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fa:	bf00      	nop
 80041fc:	0800420d 	.word	0x0800420d
 8004200:	0800421d 	.word	0x0800421d
 8004204:	08004215 	.word	0x08004215
 8004208:	08004225 	.word	0x08004225
 800420c:	2301      	movs	r3, #1
 800420e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004212:	e116      	b.n	8004442 <UART_SetConfig+0x2e6>
 8004214:	2302      	movs	r3, #2
 8004216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800421a:	e112      	b.n	8004442 <UART_SetConfig+0x2e6>
 800421c:	2304      	movs	r3, #4
 800421e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004222:	e10e      	b.n	8004442 <UART_SetConfig+0x2e6>
 8004224:	2308      	movs	r3, #8
 8004226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800422a:	e10a      	b.n	8004442 <UART_SetConfig+0x2e6>
 800422c:	2310      	movs	r3, #16
 800422e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004232:	e106      	b.n	8004442 <UART_SetConfig+0x2e6>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a7c      	ldr	r2, [pc, #496]	; (800442c <UART_SetConfig+0x2d0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d138      	bne.n	80042b0 <UART_SetConfig+0x154>
 800423e:	4b7a      	ldr	r3, [pc, #488]	; (8004428 <UART_SetConfig+0x2cc>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	2b0c      	cmp	r3, #12
 800424a:	d82d      	bhi.n	80042a8 <UART_SetConfig+0x14c>
 800424c:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <UART_SetConfig+0xf8>)
 800424e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004252:	bf00      	nop
 8004254:	08004289 	.word	0x08004289
 8004258:	080042a9 	.word	0x080042a9
 800425c:	080042a9 	.word	0x080042a9
 8004260:	080042a9 	.word	0x080042a9
 8004264:	08004299 	.word	0x08004299
 8004268:	080042a9 	.word	0x080042a9
 800426c:	080042a9 	.word	0x080042a9
 8004270:	080042a9 	.word	0x080042a9
 8004274:	08004291 	.word	0x08004291
 8004278:	080042a9 	.word	0x080042a9
 800427c:	080042a9 	.word	0x080042a9
 8004280:	080042a9 	.word	0x080042a9
 8004284:	080042a1 	.word	0x080042a1
 8004288:	2300      	movs	r3, #0
 800428a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428e:	e0d8      	b.n	8004442 <UART_SetConfig+0x2e6>
 8004290:	2302      	movs	r3, #2
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004296:	e0d4      	b.n	8004442 <UART_SetConfig+0x2e6>
 8004298:	2304      	movs	r3, #4
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429e:	e0d0      	b.n	8004442 <UART_SetConfig+0x2e6>
 80042a0:	2308      	movs	r3, #8
 80042a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a6:	e0cc      	b.n	8004442 <UART_SetConfig+0x2e6>
 80042a8:	2310      	movs	r3, #16
 80042aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ae:	e0c8      	b.n	8004442 <UART_SetConfig+0x2e6>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a5e      	ldr	r2, [pc, #376]	; (8004430 <UART_SetConfig+0x2d4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d125      	bne.n	8004306 <UART_SetConfig+0x1aa>
 80042ba:	4b5b      	ldr	r3, [pc, #364]	; (8004428 <UART_SetConfig+0x2cc>)
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042c4:	2b30      	cmp	r3, #48	; 0x30
 80042c6:	d016      	beq.n	80042f6 <UART_SetConfig+0x19a>
 80042c8:	2b30      	cmp	r3, #48	; 0x30
 80042ca:	d818      	bhi.n	80042fe <UART_SetConfig+0x1a2>
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	d00a      	beq.n	80042e6 <UART_SetConfig+0x18a>
 80042d0:	2b20      	cmp	r3, #32
 80042d2:	d814      	bhi.n	80042fe <UART_SetConfig+0x1a2>
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <UART_SetConfig+0x182>
 80042d8:	2b10      	cmp	r3, #16
 80042da:	d008      	beq.n	80042ee <UART_SetConfig+0x192>
 80042dc:	e00f      	b.n	80042fe <UART_SetConfig+0x1a2>
 80042de:	2300      	movs	r3, #0
 80042e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e4:	e0ad      	b.n	8004442 <UART_SetConfig+0x2e6>
 80042e6:	2302      	movs	r3, #2
 80042e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ec:	e0a9      	b.n	8004442 <UART_SetConfig+0x2e6>
 80042ee:	2304      	movs	r3, #4
 80042f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f4:	e0a5      	b.n	8004442 <UART_SetConfig+0x2e6>
 80042f6:	2308      	movs	r3, #8
 80042f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fc:	e0a1      	b.n	8004442 <UART_SetConfig+0x2e6>
 80042fe:	2310      	movs	r3, #16
 8004300:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004304:	e09d      	b.n	8004442 <UART_SetConfig+0x2e6>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a4a      	ldr	r2, [pc, #296]	; (8004434 <UART_SetConfig+0x2d8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d125      	bne.n	800435c <UART_SetConfig+0x200>
 8004310:	4b45      	ldr	r3, [pc, #276]	; (8004428 <UART_SetConfig+0x2cc>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800431a:	2bc0      	cmp	r3, #192	; 0xc0
 800431c:	d016      	beq.n	800434c <UART_SetConfig+0x1f0>
 800431e:	2bc0      	cmp	r3, #192	; 0xc0
 8004320:	d818      	bhi.n	8004354 <UART_SetConfig+0x1f8>
 8004322:	2b80      	cmp	r3, #128	; 0x80
 8004324:	d00a      	beq.n	800433c <UART_SetConfig+0x1e0>
 8004326:	2b80      	cmp	r3, #128	; 0x80
 8004328:	d814      	bhi.n	8004354 <UART_SetConfig+0x1f8>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <UART_SetConfig+0x1d8>
 800432e:	2b40      	cmp	r3, #64	; 0x40
 8004330:	d008      	beq.n	8004344 <UART_SetConfig+0x1e8>
 8004332:	e00f      	b.n	8004354 <UART_SetConfig+0x1f8>
 8004334:	2300      	movs	r3, #0
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433a:	e082      	b.n	8004442 <UART_SetConfig+0x2e6>
 800433c:	2302      	movs	r3, #2
 800433e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004342:	e07e      	b.n	8004442 <UART_SetConfig+0x2e6>
 8004344:	2304      	movs	r3, #4
 8004346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434a:	e07a      	b.n	8004442 <UART_SetConfig+0x2e6>
 800434c:	2308      	movs	r3, #8
 800434e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004352:	e076      	b.n	8004442 <UART_SetConfig+0x2e6>
 8004354:	2310      	movs	r3, #16
 8004356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800435a:	e072      	b.n	8004442 <UART_SetConfig+0x2e6>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a35      	ldr	r2, [pc, #212]	; (8004438 <UART_SetConfig+0x2dc>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d12a      	bne.n	80043bc <UART_SetConfig+0x260>
 8004366:	4b30      	ldr	r3, [pc, #192]	; (8004428 <UART_SetConfig+0x2cc>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004370:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004374:	d01a      	beq.n	80043ac <UART_SetConfig+0x250>
 8004376:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800437a:	d81b      	bhi.n	80043b4 <UART_SetConfig+0x258>
 800437c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004380:	d00c      	beq.n	800439c <UART_SetConfig+0x240>
 8004382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004386:	d815      	bhi.n	80043b4 <UART_SetConfig+0x258>
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <UART_SetConfig+0x238>
 800438c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004390:	d008      	beq.n	80043a4 <UART_SetConfig+0x248>
 8004392:	e00f      	b.n	80043b4 <UART_SetConfig+0x258>
 8004394:	2300      	movs	r3, #0
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439a:	e052      	b.n	8004442 <UART_SetConfig+0x2e6>
 800439c:	2302      	movs	r3, #2
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a2:	e04e      	b.n	8004442 <UART_SetConfig+0x2e6>
 80043a4:	2304      	movs	r3, #4
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043aa:	e04a      	b.n	8004442 <UART_SetConfig+0x2e6>
 80043ac:	2308      	movs	r3, #8
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b2:	e046      	b.n	8004442 <UART_SetConfig+0x2e6>
 80043b4:	2310      	movs	r3, #16
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ba:	e042      	b.n	8004442 <UART_SetConfig+0x2e6>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a17      	ldr	r2, [pc, #92]	; (8004420 <UART_SetConfig+0x2c4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d13a      	bne.n	800443c <UART_SetConfig+0x2e0>
 80043c6:	4b18      	ldr	r3, [pc, #96]	; (8004428 <UART_SetConfig+0x2cc>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043d4:	d01a      	beq.n	800440c <UART_SetConfig+0x2b0>
 80043d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043da:	d81b      	bhi.n	8004414 <UART_SetConfig+0x2b8>
 80043dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e0:	d00c      	beq.n	80043fc <UART_SetConfig+0x2a0>
 80043e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e6:	d815      	bhi.n	8004414 <UART_SetConfig+0x2b8>
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <UART_SetConfig+0x298>
 80043ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f0:	d008      	beq.n	8004404 <UART_SetConfig+0x2a8>
 80043f2:	e00f      	b.n	8004414 <UART_SetConfig+0x2b8>
 80043f4:	2300      	movs	r3, #0
 80043f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043fa:	e022      	b.n	8004442 <UART_SetConfig+0x2e6>
 80043fc:	2302      	movs	r3, #2
 80043fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004402:	e01e      	b.n	8004442 <UART_SetConfig+0x2e6>
 8004404:	2304      	movs	r3, #4
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440a:	e01a      	b.n	8004442 <UART_SetConfig+0x2e6>
 800440c:	2308      	movs	r3, #8
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004412:	e016      	b.n	8004442 <UART_SetConfig+0x2e6>
 8004414:	2310      	movs	r3, #16
 8004416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441a:	e012      	b.n	8004442 <UART_SetConfig+0x2e6>
 800441c:	efff69f3 	.word	0xefff69f3
 8004420:	40008000 	.word	0x40008000
 8004424:	40013800 	.word	0x40013800
 8004428:	40021000 	.word	0x40021000
 800442c:	40004400 	.word	0x40004400
 8004430:	40004800 	.word	0x40004800
 8004434:	40004c00 	.word	0x40004c00
 8004438:	40005000 	.word	0x40005000
 800443c:	2310      	movs	r3, #16
 800443e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a9f      	ldr	r2, [pc, #636]	; (80046c4 <UART_SetConfig+0x568>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d17a      	bne.n	8004542 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800444c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004450:	2b08      	cmp	r3, #8
 8004452:	d824      	bhi.n	800449e <UART_SetConfig+0x342>
 8004454:	a201      	add	r2, pc, #4	; (adr r2, 800445c <UART_SetConfig+0x300>)
 8004456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445a:	bf00      	nop
 800445c:	08004481 	.word	0x08004481
 8004460:	0800449f 	.word	0x0800449f
 8004464:	08004489 	.word	0x08004489
 8004468:	0800449f 	.word	0x0800449f
 800446c:	0800448f 	.word	0x0800448f
 8004470:	0800449f 	.word	0x0800449f
 8004474:	0800449f 	.word	0x0800449f
 8004478:	0800449f 	.word	0x0800449f
 800447c:	08004497 	.word	0x08004497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004480:	f7ff f822 	bl	80034c8 <HAL_RCC_GetPCLK1Freq>
 8004484:	61f8      	str	r0, [r7, #28]
        break;
 8004486:	e010      	b.n	80044aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004488:	4b8f      	ldr	r3, [pc, #572]	; (80046c8 <UART_SetConfig+0x56c>)
 800448a:	61fb      	str	r3, [r7, #28]
        break;
 800448c:	e00d      	b.n	80044aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800448e:	f7fe ff83 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8004492:	61f8      	str	r0, [r7, #28]
        break;
 8004494:	e009      	b.n	80044aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800449a:	61fb      	str	r3, [r7, #28]
        break;
 800449c:	e005      	b.n	80044aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 80fb 	beq.w	80046a8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	4413      	add	r3, r2
 80044bc:	69fa      	ldr	r2, [r7, #28]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d305      	bcc.n	80044ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044c8:	69fa      	ldr	r2, [r7, #28]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d903      	bls.n	80044d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044d4:	e0e8      	b.n	80046a8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	2200      	movs	r2, #0
 80044da:	461c      	mov	r4, r3
 80044dc:	4615      	mov	r5, r2
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	022b      	lsls	r3, r5, #8
 80044e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80044ec:	0222      	lsls	r2, r4, #8
 80044ee:	68f9      	ldr	r1, [r7, #12]
 80044f0:	6849      	ldr	r1, [r1, #4]
 80044f2:	0849      	lsrs	r1, r1, #1
 80044f4:	2000      	movs	r0, #0
 80044f6:	4688      	mov	r8, r1
 80044f8:	4681      	mov	r9, r0
 80044fa:	eb12 0a08 	adds.w	sl, r2, r8
 80044fe:	eb43 0b09 	adc.w	fp, r3, r9
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	603b      	str	r3, [r7, #0]
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004510:	4650      	mov	r0, sl
 8004512:	4659      	mov	r1, fp
 8004514:	f7fb fe58 	bl	80001c8 <__aeabi_uldivmod>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4613      	mov	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004526:	d308      	bcc.n	800453a <UART_SetConfig+0x3de>
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800452e:	d204      	bcs.n	800453a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	60da      	str	r2, [r3, #12]
 8004538:	e0b6      	b.n	80046a8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004540:	e0b2      	b.n	80046a8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800454a:	d15e      	bne.n	800460a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800454c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004550:	2b08      	cmp	r3, #8
 8004552:	d828      	bhi.n	80045a6 <UART_SetConfig+0x44a>
 8004554:	a201      	add	r2, pc, #4	; (adr r2, 800455c <UART_SetConfig+0x400>)
 8004556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455a:	bf00      	nop
 800455c:	08004581 	.word	0x08004581
 8004560:	08004589 	.word	0x08004589
 8004564:	08004591 	.word	0x08004591
 8004568:	080045a7 	.word	0x080045a7
 800456c:	08004597 	.word	0x08004597
 8004570:	080045a7 	.word	0x080045a7
 8004574:	080045a7 	.word	0x080045a7
 8004578:	080045a7 	.word	0x080045a7
 800457c:	0800459f 	.word	0x0800459f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004580:	f7fe ffa2 	bl	80034c8 <HAL_RCC_GetPCLK1Freq>
 8004584:	61f8      	str	r0, [r7, #28]
        break;
 8004586:	e014      	b.n	80045b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004588:	f7fe ffb4 	bl	80034f4 <HAL_RCC_GetPCLK2Freq>
 800458c:	61f8      	str	r0, [r7, #28]
        break;
 800458e:	e010      	b.n	80045b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004590:	4b4d      	ldr	r3, [pc, #308]	; (80046c8 <UART_SetConfig+0x56c>)
 8004592:	61fb      	str	r3, [r7, #28]
        break;
 8004594:	e00d      	b.n	80045b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004596:	f7fe feff 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 800459a:	61f8      	str	r0, [r7, #28]
        break;
 800459c:	e009      	b.n	80045b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800459e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045a2:	61fb      	str	r3, [r7, #28]
        break;
 80045a4:	e005      	b.n	80045b2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d077      	beq.n	80046a8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	005a      	lsls	r2, r3, #1
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	085b      	lsrs	r3, r3, #1
 80045c2:	441a      	add	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	2b0f      	cmp	r3, #15
 80045d2:	d916      	bls.n	8004602 <UART_SetConfig+0x4a6>
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045da:	d212      	bcs.n	8004602 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	f023 030f 	bic.w	r3, r3, #15
 80045e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	085b      	lsrs	r3, r3, #1
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	8afb      	ldrh	r3, [r7, #22]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	8afa      	ldrh	r2, [r7, #22]
 80045fe:	60da      	str	r2, [r3, #12]
 8004600:	e052      	b.n	80046a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004608:	e04e      	b.n	80046a8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800460a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800460e:	2b08      	cmp	r3, #8
 8004610:	d827      	bhi.n	8004662 <UART_SetConfig+0x506>
 8004612:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <UART_SetConfig+0x4bc>)
 8004614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004618:	0800463d 	.word	0x0800463d
 800461c:	08004645 	.word	0x08004645
 8004620:	0800464d 	.word	0x0800464d
 8004624:	08004663 	.word	0x08004663
 8004628:	08004653 	.word	0x08004653
 800462c:	08004663 	.word	0x08004663
 8004630:	08004663 	.word	0x08004663
 8004634:	08004663 	.word	0x08004663
 8004638:	0800465b 	.word	0x0800465b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800463c:	f7fe ff44 	bl	80034c8 <HAL_RCC_GetPCLK1Freq>
 8004640:	61f8      	str	r0, [r7, #28]
        break;
 8004642:	e014      	b.n	800466e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004644:	f7fe ff56 	bl	80034f4 <HAL_RCC_GetPCLK2Freq>
 8004648:	61f8      	str	r0, [r7, #28]
        break;
 800464a:	e010      	b.n	800466e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800464c:	4b1e      	ldr	r3, [pc, #120]	; (80046c8 <UART_SetConfig+0x56c>)
 800464e:	61fb      	str	r3, [r7, #28]
        break;
 8004650:	e00d      	b.n	800466e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004652:	f7fe fea1 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8004656:	61f8      	str	r0, [r7, #28]
        break;
 8004658:	e009      	b.n	800466e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800465a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800465e:	61fb      	str	r3, [r7, #28]
        break;
 8004660:	e005      	b.n	800466e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800466c:	bf00      	nop
    }

    if (pclk != 0U)
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d019      	beq.n	80046a8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	085a      	lsrs	r2, r3, #1
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	441a      	add	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	fbb2 f3f3 	udiv	r3, r2, r3
 8004686:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	2b0f      	cmp	r3, #15
 800468c:	d909      	bls.n	80046a2 <UART_SetConfig+0x546>
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004694:	d205      	bcs.n	80046a2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60da      	str	r2, [r3, #12]
 80046a0:	e002      	b.n	80046a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80046b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3728      	adds	r7, #40	; 0x28
 80046bc:	46bd      	mov	sp, r7
 80046be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046c2:	bf00      	nop
 80046c4:	40008000 	.word	0x40008000
 80046c8:	00f42400 	.word	0x00f42400

080046cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	f003 0320 	and.w	r3, r3, #32
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d01a      	beq.n	80047e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ca:	d10a      	bne.n	80047e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	605a      	str	r2, [r3, #4]
  }
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b098      	sub	sp, #96	; 0x60
 8004814:	af02      	add	r7, sp, #8
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004820:	f7fd f958 	bl	8001ad4 <HAL_GetTick>
 8004824:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b08      	cmp	r3, #8
 8004832:	d12e      	bne.n	8004892 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004834:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800483c:	2200      	movs	r2, #0
 800483e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f88c 	bl	8004960 <UART_WaitOnFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d021      	beq.n	8004892 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004856:	e853 3f00 	ldrex	r3, [r3]
 800485a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800485c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004862:	653b      	str	r3, [r7, #80]	; 0x50
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	461a      	mov	r2, r3
 800486a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800486c:	647b      	str	r3, [r7, #68]	; 0x44
 800486e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004870:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004872:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004874:	e841 2300 	strex	r3, r2, [r1]
 8004878:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800487a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1e6      	bne.n	800484e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e062      	b.n	8004958 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b04      	cmp	r3, #4
 800489e:	d149      	bne.n	8004934 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048a8:	2200      	movs	r2, #0
 80048aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f856 	bl	8004960 <UART_WaitOnFlagUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d03c      	beq.n	8004934 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	623b      	str	r3, [r7, #32]
   return(result);
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048d8:	633b      	str	r3, [r7, #48]	; 0x30
 80048da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048e0:	e841 2300 	strex	r3, r2, [r1]
 80048e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e6      	bne.n	80048ba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3308      	adds	r3, #8
 80048f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0301 	bic.w	r3, r3, #1
 8004902:	64bb      	str	r3, [r7, #72]	; 0x48
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3308      	adds	r3, #8
 800490a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800490c:	61fa      	str	r2, [r7, #28]
 800490e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	69b9      	ldr	r1, [r7, #24]
 8004912:	69fa      	ldr	r2, [r7, #28]
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	617b      	str	r3, [r7, #20]
   return(result);
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e5      	bne.n	80048ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e011      	b.n	8004958 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2220      	movs	r2, #32
 800493e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3758      	adds	r7, #88	; 0x58
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	603b      	str	r3, [r7, #0]
 800496c:	4613      	mov	r3, r2
 800496e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004970:	e049      	b.n	8004a06 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004978:	d045      	beq.n	8004a06 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800497a:	f7fd f8ab 	bl	8001ad4 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	429a      	cmp	r2, r3
 8004988:	d302      	bcc.n	8004990 <UART_WaitOnFlagUntilTimeout+0x30>
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e048      	b.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d031      	beq.n	8004a06 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d110      	bne.n	80049d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2208      	movs	r2, #8
 80049b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f838 	bl	8004a2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2208      	movs	r2, #8
 80049c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e029      	b.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049e0:	d111      	bne.n	8004a06 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f81e 	bl	8004a2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e00f      	b.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69da      	ldr	r2, [r3, #28]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	bf0c      	ite	eq
 8004a16:	2301      	moveq	r3, #1
 8004a18:	2300      	movne	r3, #0
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	79fb      	ldrb	r3, [r7, #7]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d0a6      	beq.n	8004972 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b095      	sub	sp, #84	; 0x54
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3e:	e853 3f00 	ldrex	r3, [r3]
 8004a42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	461a      	mov	r2, r3
 8004a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a54:	643b      	str	r3, [r7, #64]	; 0x40
 8004a56:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a5c:	e841 2300 	strex	r3, r2, [r1]
 8004a60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1e6      	bne.n	8004a36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3308      	adds	r3, #8
 8004a6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	e853 3f00 	ldrex	r3, [r3]
 8004a76:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	f023 0301 	bic.w	r3, r3, #1
 8004a7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3308      	adds	r3, #8
 8004a86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a90:	e841 2300 	strex	r3, r2, [r1]
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1e5      	bne.n	8004a68 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d118      	bne.n	8004ad6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f023 0310 	bic.w	r3, r3, #16
 8004ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ac2:	61bb      	str	r3, [r7, #24]
 8004ac4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	6979      	ldr	r1, [r7, #20]
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e6      	bne.n	8004aa4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004aea:	bf00      	nop
 8004aec:	3754      	adds	r7, #84	; 0x54
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
	...

08004af8 <LL_EXTI_EnableIT_0_31>:
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <LL_EXTI_EnableIT_0_31+0x20>)
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	4904      	ldr	r1, [pc, #16]	; (8004b18 <LL_EXTI_EnableIT_0_31+0x20>)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	600b      	str	r3, [r1, #0]
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	40010400 	.word	0x40010400

08004b1c <LL_EXTI_EnableIT_32_63>:
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <LL_EXTI_EnableIT_32_63+0x20>)
 8004b26:	6a1a      	ldr	r2, [r3, #32]
 8004b28:	4904      	ldr	r1, [pc, #16]	; (8004b3c <LL_EXTI_EnableIT_32_63+0x20>)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	620b      	str	r3, [r1, #32]
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	40010400 	.word	0x40010400

08004b40 <LL_EXTI_DisableIT_0_31>:
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004b48:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <LL_EXTI_DisableIT_0_31+0x24>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	4904      	ldr	r1, [pc, #16]	; (8004b64 <LL_EXTI_DisableIT_0_31+0x24>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	600b      	str	r3, [r1, #0]
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40010400 	.word	0x40010400

08004b68 <LL_EXTI_DisableIT_32_63>:
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8004b70:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <LL_EXTI_DisableIT_32_63+0x24>)
 8004b72:	6a1a      	ldr	r2, [r3, #32]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	43db      	mvns	r3, r3
 8004b78:	4904      	ldr	r1, [pc, #16]	; (8004b8c <LL_EXTI_DisableIT_32_63+0x24>)
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	620b      	str	r3, [r1, #32]
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40010400 	.word	0x40010400

08004b90 <LL_EXTI_EnableEvent_0_31>:
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004b98:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	4904      	ldr	r1, [pc, #16]	; (8004bb0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	604b      	str	r3, [r1, #4]
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	40010400 	.word	0x40010400

08004bb4 <LL_EXTI_EnableEvent_32_63>:
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8004bbc:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <LL_EXTI_EnableEvent_32_63+0x20>)
 8004bbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bc0:	4904      	ldr	r1, [pc, #16]	; (8004bd4 <LL_EXTI_EnableEvent_32_63+0x20>)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	40010400 	.word	0x40010400

08004bd8 <LL_EXTI_DisableEvent_0_31>:
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004be0:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <LL_EXTI_DisableEvent_0_31+0x24>)
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	43db      	mvns	r3, r3
 8004be8:	4904      	ldr	r1, [pc, #16]	; (8004bfc <LL_EXTI_DisableEvent_0_31+0x24>)
 8004bea:	4013      	ands	r3, r2
 8004bec:	604b      	str	r3, [r1, #4]
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40010400 	.word	0x40010400

08004c00 <LL_EXTI_DisableEvent_32_63>:
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8004c08:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <LL_EXTI_DisableEvent_32_63+0x24>)
 8004c0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	43db      	mvns	r3, r3
 8004c10:	4904      	ldr	r1, [pc, #16]	; (8004c24 <LL_EXTI_DisableEvent_32_63+0x24>)
 8004c12:	4013      	ands	r3, r2
 8004c14:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	40010400 	.word	0x40010400

08004c28 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004c30:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	4904      	ldr	r1, [pc, #16]	; (8004c48 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	608b      	str	r3, [r1, #8]
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	40010400 	.word	0x40010400

08004c4c <LL_EXTI_EnableRisingTrig_32_63>:
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8004c54:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8004c56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c58:	4904      	ldr	r1, [pc, #16]	; (8004c6c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	40010400 	.word	0x40010400

08004c70 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004c78:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	4904      	ldr	r1, [pc, #16]	; (8004c94 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	608b      	str	r3, [r1, #8]
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40010400 	.word	0x40010400

08004c98 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8004ca0:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004ca2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	43db      	mvns	r3, r3
 8004ca8:	4904      	ldr	r1, [pc, #16]	; (8004cbc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40010400 	.word	0x40010400

08004cc0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004cc8:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	4904      	ldr	r1, [pc, #16]	; (8004ce0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60cb      	str	r3, [r1, #12]
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	40010400 	.word	0x40010400

08004ce4 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8004cec:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8004cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf0:	4904      	ldr	r1, [pc, #16]	; (8004d04 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	40010400 	.word	0x40010400

08004d08 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004d10:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	43db      	mvns	r3, r3
 8004d18:	4904      	ldr	r1, [pc, #16]	; (8004d2c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	60cb      	str	r3, [r1, #12]
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40010400 	.word	0x40010400

08004d30 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8004d38:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8004d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	43db      	mvns	r3, r3
 8004d40:	4904      	ldr	r1, [pc, #16]	; (8004d54 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40010400 	.word	0x40010400

08004d58 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	7a1b      	ldrb	r3, [r3, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80d0 	beq.w	8004f0e <LL_EXTI_Init+0x1b6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d063      	beq.n	8004e3e <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	7a5b      	ldrb	r3, [r3, #9]
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d01c      	beq.n	8004db8 <LL_EXTI_Init+0x60>
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	dc25      	bgt.n	8004dce <LL_EXTI_Init+0x76>
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <LL_EXTI_Init+0x34>
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d00b      	beq.n	8004da2 <LL_EXTI_Init+0x4a>
 8004d8a:	e020      	b.n	8004dce <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff ff21 	bl	8004bd8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff feac 	bl	8004af8 <LL_EXTI_EnableIT_0_31>
          break;
 8004da0:	e018      	b.n	8004dd4 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff feca 	bl	8004b40 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff feed 	bl	8004b90 <LL_EXTI_EnableEvent_0_31>
          break;
 8004db6:	e00d      	b.n	8004dd4 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff fe9b 	bl	8004af8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff fee2 	bl	8004b90 <LL_EXTI_EnableEvent_0_31>
          break;
 8004dcc:	e002      	b.n	8004dd4 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	60fb      	str	r3, [r7, #12]
          break;
 8004dd2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	7a9b      	ldrb	r3, [r3, #10]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d030      	beq.n	8004e3e <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	7a9b      	ldrb	r3, [r3, #10]
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d01c      	beq.n	8004e1e <LL_EXTI_Init+0xc6>
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	dc25      	bgt.n	8004e34 <LL_EXTI_Init+0xdc>
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d002      	beq.n	8004df2 <LL_EXTI_Init+0x9a>
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d00b      	beq.n	8004e08 <LL_EXTI_Init+0xb0>
 8004df0:	e020      	b.n	8004e34 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff ff86 	bl	8004d08 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff ff11 	bl	8004c28 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8004e06:	e01a      	b.n	8004e3e <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7ff ff2f 	bl	8004c70 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff ff52 	bl	8004cc0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004e1c:	e00f      	b.n	8004e3e <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff ff00 	bl	8004c28 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff ff47 	bl	8004cc0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004e32:	e004      	b.n	8004e3e <LL_EXTI_Init+0xe6>
          default:
            status |= 0x02u;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f043 0302 	orr.w	r3, r3, #2
 8004e3a:	60fb      	str	r3, [r7, #12]
            break;
 8004e3c:	bf00      	nop
        }
      }
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d077      	beq.n	8004f36 <LL_EXTI_Init+0x1de>
    {
      switch (EXTI_InitStruct->Mode)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	7a5b      	ldrb	r3, [r3, #9]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d01c      	beq.n	8004e88 <LL_EXTI_Init+0x130>
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	dc25      	bgt.n	8004e9e <LL_EXTI_Init+0x146>
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <LL_EXTI_Init+0x104>
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d00b      	beq.n	8004e72 <LL_EXTI_Init+0x11a>
 8004e5a:	e020      	b.n	8004e9e <LL_EXTI_Init+0x146>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff fecd 	bl	8004c00 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff fe56 	bl	8004b1c <LL_EXTI_EnableIT_32_63>
          break;
 8004e70:	e01a      	b.n	8004ea8 <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff fe76 	bl	8004b68 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff fe97 	bl	8004bb4 <LL_EXTI_EnableEvent_32_63>
          break;
 8004e86:	e00f      	b.n	8004ea8 <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff fe45 	bl	8004b1c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff fe8c 	bl	8004bb4 <LL_EXTI_EnableEvent_32_63>
          break;
 8004e9c:	e004      	b.n	8004ea8 <LL_EXTI_Init+0x150>
        default:
          status |= 0x04u;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f043 0304 	orr.w	r3, r3, #4
 8004ea4:	60fb      	str	r3, [r7, #12]
          break;
 8004ea6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	7a9b      	ldrb	r3, [r3, #10]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d042      	beq.n	8004f36 <LL_EXTI_Init+0x1de>
      {
        switch (EXTI_InitStruct->Trigger)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	7a9b      	ldrb	r3, [r3, #10]
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d01c      	beq.n	8004ef2 <LL_EXTI_Init+0x19a>
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	dc25      	bgt.n	8004f08 <LL_EXTI_Init+0x1b0>
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d002      	beq.n	8004ec6 <LL_EXTI_Init+0x16e>
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d00b      	beq.n	8004edc <LL_EXTI_Init+0x184>
 8004ec4:	e020      	b.n	8004f08 <LL_EXTI_Init+0x1b0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff ff30 	bl	8004d30 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff feb9 	bl	8004c4c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8004eda:	e02c      	b.n	8004f36 <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff fed9 	bl	8004c98 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff fefa 	bl	8004ce4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8004ef0:	e021      	b.n	8004f36 <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7ff fea8 	bl	8004c4c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7ff feef 	bl	8004ce4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8004f06:	e016      	b.n	8004f36 <LL_EXTI_Init+0x1de>
          default:
            status = ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	60fb      	str	r3, [r7, #12]
            break;
 8004f0c:	e013      	b.n	8004f36 <LL_EXTI_Init+0x1de>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff fe14 	bl	8004b40 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff fe5b 	bl	8004bd8 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff fe1e 	bl	8004b68 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff fe65 	bl	8004c00 <LL_EXTI_DisableEvent_32_63>
  }

  return status;
 8004f36:	68fb      	ldr	r3, [r7, #12]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <LL_GPIO_SetPinMode>:
{
 8004f40:	b480      	push	{r7}
 8004f42:	b08b      	sub	sp, #44	; 0x2c
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	fa93 f3a3 	rbit	r3, r3
 8004f5a:	613b      	str	r3, [r7, #16]
  return result;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8004f66:	2320      	movs	r3, #32
 8004f68:	e003      	b.n	8004f72 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	fab3 f383 	clz	r3, r3
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	2103      	movs	r1, #3
 8004f76:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	401a      	ands	r2, r3
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	fa93 f3a3 	rbit	r3, r3
 8004f88:	61fb      	str	r3, [r7, #28]
  return result;
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8004f94:	2320      	movs	r3, #32
 8004f96:	e003      	b.n	8004fa0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	fab3 f383 	clz	r3, r3
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	601a      	str	r2, [r3, #0]
}
 8004fae:	bf00      	nop
 8004fb0:	372c      	adds	r7, #44	; 0x2c
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <LL_GPIO_SetPinOutputType>:
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	401a      	ands	r2, r3
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	fb01 f303 	mul.w	r3, r1, r3
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	605a      	str	r2, [r3, #4]
}
 8004fde:	bf00      	nop
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <LL_GPIO_SetPinSpeed>:
{
 8004fea:	b480      	push	{r7}
 8004fec:	b08b      	sub	sp, #44	; 0x2c
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	fa93 f3a3 	rbit	r3, r3
 8005004:	613b      	str	r3, [r7, #16]
  return result;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005010:	2320      	movs	r3, #32
 8005012:	e003      	b.n	800501c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	fab3 f383 	clz	r3, r3
 800501a:	b2db      	uxtb	r3, r3
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	2103      	movs	r1, #3
 8005020:	fa01 f303 	lsl.w	r3, r1, r3
 8005024:	43db      	mvns	r3, r3
 8005026:	401a      	ands	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	fa93 f3a3 	rbit	r3, r3
 8005032:	61fb      	str	r3, [r7, #28]
  return result;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800503e:	2320      	movs	r3, #32
 8005040:	e003      	b.n	800504a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	fab3 f383 	clz	r3, r3
 8005048:	b2db      	uxtb	r3, r3
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	fa01 f303 	lsl.w	r3, r1, r3
 8005052:	431a      	orrs	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	609a      	str	r2, [r3, #8]
}
 8005058:	bf00      	nop
 800505a:	372c      	adds	r7, #44	; 0x2c
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <LL_GPIO_SetPinPull>:
{
 8005064:	b480      	push	{r7}
 8005066:	b08b      	sub	sp, #44	; 0x2c
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	fa93 f3a3 	rbit	r3, r3
 800507e:	613b      	str	r3, [r7, #16]
  return result;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800508a:	2320      	movs	r3, #32
 800508c:	e003      	b.n	8005096 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	fab3 f383 	clz	r3, r3
 8005094:	b2db      	uxtb	r3, r3
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	2103      	movs	r1, #3
 800509a:	fa01 f303 	lsl.w	r3, r1, r3
 800509e:	43db      	mvns	r3, r3
 80050a0:	401a      	ands	r2, r3
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	fa93 f3a3 	rbit	r3, r3
 80050ac:	61fb      	str	r3, [r7, #28]
  return result;
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80050b8:	2320      	movs	r3, #32
 80050ba:	e003      	b.n	80050c4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	fab3 f383 	clz	r3, r3
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	6879      	ldr	r1, [r7, #4]
 80050c8:	fa01 f303 	lsl.w	r3, r1, r3
 80050cc:	431a      	orrs	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	60da      	str	r2, [r3, #12]
}
 80050d2:	bf00      	nop
 80050d4:	372c      	adds	r7, #44	; 0x2c
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <LL_GPIO_SetAFPin_0_7>:
{
 80050de:	b480      	push	{r7}
 80050e0:	b08b      	sub	sp, #44	; 0x2c
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a1a      	ldr	r2, [r3, #32]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	fa93 f3a3 	rbit	r3, r3
 80050f8:	613b      	str	r3, [r7, #16]
  return result;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005104:	2320      	movs	r3, #32
 8005106:	e003      	b.n	8005110 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	fab3 f383 	clz	r3, r3
 800510e:	b2db      	uxtb	r3, r3
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	210f      	movs	r1, #15
 8005114:	fa01 f303 	lsl.w	r3, r1, r3
 8005118:	43db      	mvns	r3, r3
 800511a:	401a      	ands	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	fa93 f3a3 	rbit	r3, r3
 8005126:	61fb      	str	r3, [r7, #28]
  return result;
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005132:	2320      	movs	r3, #32
 8005134:	e003      	b.n	800513e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	fab3 f383 	clz	r3, r3
 800513c:	b2db      	uxtb	r3, r3
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	fa01 f303 	lsl.w	r3, r1, r3
 8005146:	431a      	orrs	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	621a      	str	r2, [r3, #32]
}
 800514c:	bf00      	nop
 800514e:	372c      	adds	r7, #44	; 0x2c
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <LL_GPIO_SetAFPin_8_15>:
{
 8005158:	b480      	push	{r7}
 800515a:	b08b      	sub	sp, #44	; 0x2c
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	0a1b      	lsrs	r3, r3, #8
 800516c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	fa93 f3a3 	rbit	r3, r3
 8005174:	613b      	str	r3, [r7, #16]
  return result;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005180:	2320      	movs	r3, #32
 8005182:	e003      	b.n	800518c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	fab3 f383 	clz	r3, r3
 800518a:	b2db      	uxtb	r3, r3
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	210f      	movs	r1, #15
 8005190:	fa01 f303 	lsl.w	r3, r1, r3
 8005194:	43db      	mvns	r3, r3
 8005196:	401a      	ands	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	0a1b      	lsrs	r3, r3, #8
 800519c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	fa93 f3a3 	rbit	r3, r3
 80051a4:	61fb      	str	r3, [r7, #28]
  return result;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80051b0:	2320      	movs	r3, #32
 80051b2:	e003      	b.n	80051bc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	fab3 f383 	clz	r3, r3
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	fa01 f303 	lsl.w	r3, r1, r3
 80051c4:	431a      	orrs	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80051ca:	bf00      	nop
 80051cc:	372c      	adds	r7, #44	; 0x2c
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b088      	sub	sp, #32
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	fa93 f3a3 	rbit	r3, r3
 80051ec:	60fb      	str	r3, [r7, #12]
  return result;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <LL_GPIO_Init+0x26>
    return 32U;
 80051f8:	2320      	movs	r3, #32
 80051fa:	e003      	b.n	8005204 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	fab3 f383 	clz	r3, r3
 8005202:	b2db      	uxtb	r3, r3
 8005204:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005206:	e048      	b.n	800529a <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	2101      	movs	r1, #1
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	fa01 f303 	lsl.w	r3, r1, r3
 8005214:	4013      	ands	r3, r2
 8005216:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d03a      	beq.n	8005294 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d003      	beq.n	800522e <LL_GPIO_Init+0x58>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d10e      	bne.n	800524c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	461a      	mov	r2, r3
 8005234:	69b9      	ldr	r1, [r7, #24]
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7ff fed7 	bl	8004fea <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	6819      	ldr	r1, [r3, #0]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	461a      	mov	r2, r3
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7ff feb7 	bl	8004fba <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	461a      	mov	r2, r3
 8005252:	69b9      	ldr	r1, [r7, #24]
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff ff05 	bl	8005064 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b02      	cmp	r3, #2
 8005260:	d111      	bne.n	8005286 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	2bff      	cmp	r3, #255	; 0xff
 8005266:	d807      	bhi.n	8005278 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	461a      	mov	r2, r3
 800526e:	69b9      	ldr	r1, [r7, #24]
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff ff34 	bl	80050de <LL_GPIO_SetAFPin_0_7>
 8005276:	e006      	b.n	8005286 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	461a      	mov	r2, r3
 800527e:	69b9      	ldr	r1, [r7, #24]
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7ff ff69 	bl	8005158 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	461a      	mov	r2, r3
 800528c:	69b9      	ldr	r1, [r7, #24]
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7ff fe56 	bl	8004f40 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	3301      	adds	r3, #1
 8005298:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	fa22 f303 	lsr.w	r3, r2, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1af      	bne.n	8005208 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3720      	adds	r7, #32
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052b2:	b084      	sub	sp, #16
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	f107 001c 	add.w	r0, r7, #28
 80052c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 fa65 	bl	80057a0 <USB_CoreReset>
 80052d6:	4603      	mov	r3, r0
 80052d8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80052da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d106      	bne.n	80052ee <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	639a      	str	r2, [r3, #56]	; 0x38
 80052ec:	e005      	b.n	80052fa <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005306:	b004      	add	sp, #16
 8005308:	4770      	bx	lr

0800530a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f023 0201 	bic.w	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	460b      	mov	r3, r1
 8005336:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005348:	78fb      	ldrb	r3, [r7, #3]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d115      	bne.n	800537a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800535a:	2001      	movs	r0, #1
 800535c:	f7fc fbc6 	bl	8001aec <HAL_Delay>
      ms++;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	3301      	adds	r3, #1
 8005364:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fa0c 	bl	8005784 <USB_GetMode>
 800536c:	4603      	mov	r3, r0
 800536e:	2b01      	cmp	r3, #1
 8005370:	d01e      	beq.n	80053b0 <USB_SetCurrentMode+0x84>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2b31      	cmp	r3, #49	; 0x31
 8005376:	d9f0      	bls.n	800535a <USB_SetCurrentMode+0x2e>
 8005378:	e01a      	b.n	80053b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800537a:	78fb      	ldrb	r3, [r7, #3]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d115      	bne.n	80053ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800538c:	2001      	movs	r0, #1
 800538e:	f7fc fbad 	bl	8001aec <HAL_Delay>
      ms++;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	3301      	adds	r3, #1
 8005396:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f9f3 	bl	8005784 <USB_GetMode>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d005      	beq.n	80053b0 <USB_SetCurrentMode+0x84>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b31      	cmp	r3, #49	; 0x31
 80053a8:	d9f0      	bls.n	800538c <USB_SetCurrentMode+0x60>
 80053aa:	e001      	b.n	80053b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e005      	b.n	80053bc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2b32      	cmp	r3, #50	; 0x32
 80053b4:	d101      	bne.n	80053ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e000      	b.n	80053bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053c4:	b084      	sub	sp, #16
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b086      	sub	sp, #24
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
 80053ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053de:	2300      	movs	r3, #0
 80053e0:	613b      	str	r3, [r7, #16]
 80053e2:	e009      	b.n	80053f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	3340      	adds	r3, #64	; 0x40
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4413      	add	r3, r2
 80053ee:	2200      	movs	r2, #0
 80053f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	3301      	adds	r3, #1
 80053f6:	613b      	str	r3, [r7, #16]
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	2b0e      	cmp	r3, #14
 80053fc:	d9f2      	bls.n	80053e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005400:	2b00      	cmp	r3, #0
 8005402:	d11c      	bne.n	800543e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005412:	f043 0302 	orr.w	r3, r3, #2
 8005416:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	e005      	b.n	800544a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005450:	461a      	mov	r2, r3
 8005452:	2300      	movs	r3, #0
 8005454:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005456:	2103      	movs	r1, #3
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f959 	bl	8005710 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800545e:	2110      	movs	r1, #16
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f8f1 	bl	8005648 <USB_FlushTxFifo>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f91d 	bl	80056b0 <USB_FlushRxFifo>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005486:	461a      	mov	r2, r3
 8005488:	2300      	movs	r3, #0
 800548a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	461a      	mov	r2, r3
 8005494:	2300      	movs	r3, #0
 8005496:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549e:	461a      	mov	r2, r3
 80054a0:	2300      	movs	r3, #0
 80054a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054a4:	2300      	movs	r3, #0
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	e043      	b.n	8005532 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054c0:	d118      	bne.n	80054f4 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10a      	bne.n	80054de <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d4:	461a      	mov	r2, r3
 80054d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	e013      	b.n	8005506 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ea:	461a      	mov	r2, r3
 80054ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	e008      	b.n	8005506 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005500:	461a      	mov	r2, r3
 8005502:	2300      	movs	r3, #0
 8005504:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005512:	461a      	mov	r2, r3
 8005514:	2300      	movs	r3, #0
 8005516:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005524:	461a      	mov	r2, r3
 8005526:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800552a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	3301      	adds	r3, #1
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	429a      	cmp	r2, r3
 8005538:	d3b7      	bcc.n	80054aa <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800553a:	2300      	movs	r3, #0
 800553c:	613b      	str	r3, [r7, #16]
 800553e:	e043      	b.n	80055c8 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005552:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005556:	d118      	bne.n	800558a <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10a      	bne.n	8005574 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556a:	461a      	mov	r2, r3
 800556c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	e013      	b.n	800559c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005580:	461a      	mov	r2, r3
 8005582:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	e008      	b.n	800559c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005596:	461a      	mov	r2, r3
 8005598:	2300      	movs	r3, #0
 800559a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a8:	461a      	mov	r2, r3
 80055aa:	2300      	movs	r3, #0
 80055ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ba:	461a      	mov	r2, r3
 80055bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	3301      	adds	r3, #1
 80055c6:	613b      	str	r3, [r7, #16]
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d3b7      	bcc.n	8005540 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80055f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	f043 0210 	orr.w	r2, r3, #16
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	4b10      	ldr	r3, [pc, #64]	; (8005644 <USB_DevInit+0x280>)
 8005604:	4313      	orrs	r3, r2
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800560a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	f043 0208 	orr.w	r2, r3, #8
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800561c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800561e:	2b01      	cmp	r3, #1
 8005620:	d107      	bne.n	8005632 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800562a:	f043 0304 	orr.w	r3, r3, #4
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005632:	7dfb      	ldrb	r3, [r7, #23]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3718      	adds	r7, #24
 8005638:	46bd      	mov	sp, r7
 800563a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800563e:	b004      	add	sp, #16
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	803c3800 	.word	0x803c3800

08005648 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	3301      	adds	r3, #1
 800565a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4a13      	ldr	r2, [pc, #76]	; (80056ac <USB_FlushTxFifo+0x64>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d901      	bls.n	8005668 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e01b      	b.n	80056a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	daf2      	bge.n	8005656 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	019b      	lsls	r3, r3, #6
 8005678:	f043 0220 	orr.w	r2, r3, #32
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3301      	adds	r3, #1
 8005684:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4a08      	ldr	r2, [pc, #32]	; (80056ac <USB_FlushTxFifo+0x64>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d901      	bls.n	8005692 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e006      	b.n	80056a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f003 0320 	and.w	r3, r3, #32
 800569a:	2b20      	cmp	r3, #32
 800569c:	d0f0      	beq.n	8005680 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	00030d40 	.word	0x00030d40

080056b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	3301      	adds	r3, #1
 80056c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4a11      	ldr	r2, [pc, #68]	; (800570c <USB_FlushRxFifo+0x5c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d901      	bls.n	80056ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e018      	b.n	8005700 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	daf2      	bge.n	80056bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2210      	movs	r2, #16
 80056de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3301      	adds	r3, #1
 80056e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4a08      	ldr	r2, [pc, #32]	; (800570c <USB_FlushRxFifo+0x5c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d901      	bls.n	80056f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e006      	b.n	8005700 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	f003 0310 	and.w	r3, r3, #16
 80056fa:	2b10      	cmp	r3, #16
 80056fc:	d0f0      	beq.n	80056e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	00030d40 	.word	0x00030d40

08005710 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	78fb      	ldrb	r3, [r7, #3]
 800572a:	68f9      	ldr	r1, [r7, #12]
 800572c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005730:	4313      	orrs	r3, r2
 8005732:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005742:	b480      	push	{r7}
 8005744:	b085      	sub	sp, #20
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800575c:	f023 0303 	bic.w	r3, r3, #3
 8005760:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005770:	f043 0302 	orr.w	r3, r3, #2
 8005774:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	f003 0301 	and.w	r3, r3, #1
}
 8005794:	4618      	mov	r0, r3
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057a8:	2300      	movs	r3, #0
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3301      	adds	r3, #1
 80057b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4a13      	ldr	r2, [pc, #76]	; (8005804 <USB_CoreReset+0x64>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d901      	bls.n	80057be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e01b      	b.n	80057f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	daf2      	bge.n	80057ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f043 0201 	orr.w	r2, r3, #1
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3301      	adds	r3, #1
 80057da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4a09      	ldr	r2, [pc, #36]	; (8005804 <USB_CoreReset+0x64>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d901      	bls.n	80057e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e006      	b.n	80057f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d0f0      	beq.n	80057d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	00030d40 	.word	0x00030d40

08005808 <memset>:
 8005808:	4402      	add	r2, r0
 800580a:	4603      	mov	r3, r0
 800580c:	4293      	cmp	r3, r2
 800580e:	d100      	bne.n	8005812 <memset+0xa>
 8005810:	4770      	bx	lr
 8005812:	f803 1b01 	strb.w	r1, [r3], #1
 8005816:	e7f9      	b.n	800580c <memset+0x4>

08005818 <__libc_init_array>:
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	4d0d      	ldr	r5, [pc, #52]	; (8005850 <__libc_init_array+0x38>)
 800581c:	4c0d      	ldr	r4, [pc, #52]	; (8005854 <__libc_init_array+0x3c>)
 800581e:	1b64      	subs	r4, r4, r5
 8005820:	10a4      	asrs	r4, r4, #2
 8005822:	2600      	movs	r6, #0
 8005824:	42a6      	cmp	r6, r4
 8005826:	d109      	bne.n	800583c <__libc_init_array+0x24>
 8005828:	4d0b      	ldr	r5, [pc, #44]	; (8005858 <__libc_init_array+0x40>)
 800582a:	4c0c      	ldr	r4, [pc, #48]	; (800585c <__libc_init_array+0x44>)
 800582c:	f000 f818 	bl	8005860 <_init>
 8005830:	1b64      	subs	r4, r4, r5
 8005832:	10a4      	asrs	r4, r4, #2
 8005834:	2600      	movs	r6, #0
 8005836:	42a6      	cmp	r6, r4
 8005838:	d105      	bne.n	8005846 <__libc_init_array+0x2e>
 800583a:	bd70      	pop	{r4, r5, r6, pc}
 800583c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005840:	4798      	blx	r3
 8005842:	3601      	adds	r6, #1
 8005844:	e7ee      	b.n	8005824 <__libc_init_array+0xc>
 8005846:	f855 3b04 	ldr.w	r3, [r5], #4
 800584a:	4798      	blx	r3
 800584c:	3601      	adds	r6, #1
 800584e:	e7f2      	b.n	8005836 <__libc_init_array+0x1e>
 8005850:	080058c8 	.word	0x080058c8
 8005854:	080058c8 	.word	0x080058c8
 8005858:	080058c8 	.word	0x080058c8
 800585c:	080058cc 	.word	0x080058cc

08005860 <_init>:
 8005860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005862:	bf00      	nop
 8005864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005866:	bc08      	pop	{r3}
 8005868:	469e      	mov	lr, r3
 800586a:	4770      	bx	lr

0800586c <_fini>:
 800586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586e:	bf00      	nop
 8005870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005872:	bc08      	pop	{r3}
 8005874:	469e      	mov	lr, r3
 8005876:	4770      	bx	lr


HelloUART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005568  08005568  00015568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055f0  080055f0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080055f0  080055f0  000155f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055f8  080055f8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055f8  080055f8  000155f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055fc  080055fc  000155fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e4  2000005c  0800565c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000940  0800565c  00020940  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017345  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e9e  00000000  00000000  00037414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001570  00000000  00000000  0003a2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a2  00000000  00000000  0003b828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000275a0  00000000  00000000  0003c8ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018b1e  00000000  00000000  00063e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f19dc  00000000  00000000  0007c988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060f8  00000000  00000000  0016e364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0017445c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005550 	.word	0x08005550

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005550 	.word	0x08005550

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 ff2a 	bl	80013da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f833 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f9fb 	bl	8000984 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800058e:	f000 f891 	bl	80006b4 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000592:	f000 f8c7 	bl	8000724 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000596:	f000 f903 	bl	80007a0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800059a:	f000 f927 	bl	80007ec <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800059e:	f000 f963 	bl	8000868 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80005a2:	f000 f991 	bl	80008c8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005a6:	f000 f9bf 	bl	8000928 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  int counter = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61fb      	str	r3, [r7, #28]
//	  }
//	  HAL_Delay(5000);
//	  counter++;

	  char msg[20];
	  sprintf(msg, "UART1: %d, ", counter);
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	69fa      	ldr	r2, [r7, #28]
 80005b2:	490d      	ldr	r1, [pc, #52]	; (80005e8 <main+0x6c>)
 80005b4:	4618      	mov	r0, r3
 80005b6:	f004 fb27 	bl	8004c08 <siprintf>
	  int len = strlen(msg) + 1;
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe07 	bl	80001d0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	3301      	adds	r3, #1
 80005c6:	61bb      	str	r3, [r7, #24]
	  HAL_UART_Transmit(&huart1, (uint8_t *) msg, len, HAL_MAX_DELAY);
 80005c8:	69bb      	ldr	r3, [r7, #24]
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	1d39      	adds	r1, r7, #4
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005d2:	4806      	ldr	r0, [pc, #24]	; (80005ec <main+0x70>)
 80005d4:	f003 fb15 	bl	8003c02 <HAL_UART_Transmit>
	  HAL_Delay(5000);
 80005d8:	f241 3088 	movw	r0, #5000	; 0x1388
 80005dc:	f000 ff72 	bl	80014c4 <HAL_Delay>
	  counter++;
 80005e0:	69fb      	ldr	r3, [r7, #28]
 80005e2:	3301      	adds	r3, #1
 80005e4:	61fb      	str	r3, [r7, #28]
  {
 80005e6:	e7e2      	b.n	80005ae <main+0x32>
 80005e8:	08005568 	.word	0x08005568
 80005ec:	200001ac 	.word	0x200001ac

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b096      	sub	sp, #88	; 0x58
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2244      	movs	r2, #68	; 0x44
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f004 fb22 	bl	8004c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	463b      	mov	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000612:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000616:	f001 fe15 	bl	8002244 <HAL_PWREx_ControlVoltageScaling>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000620:	f000 fb62 	bl	8000ce8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000624:	f001 fdf0 	bl	8002208 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000628:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <SystemClock_Config+0xc0>)
 800062a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800062e:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <SystemClock_Config+0xc0>)
 8000630:	f023 0318 	bic.w	r3, r3, #24
 8000634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000638:	2314      	movs	r3, #20
 800063a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000648:	2360      	movs	r3, #96	; 0x60
 800064a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000650:	2301      	movs	r3, #1
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000654:	2301      	movs	r3, #1
 8000656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000658:	2328      	movs	r3, #40	; 0x28
 800065a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800065c:	2307      	movs	r3, #7
 800065e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4618      	mov	r0, r3
 800066e:	f001 ff0b 	bl	8002488 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000678:	f000 fb36 	bl	8000ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2303      	movs	r3, #3
 8000682:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	2104      	movs	r1, #4
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fad3 	bl	8002c40 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006a0:	f000 fb22 	bl	8000ce8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006a4:	f002 ffda 	bl	800365c <HAL_RCCEx_EnableMSIPLLMode>
}
 80006a8:	bf00      	nop
 80006aa:	3758      	adds	r7, #88	; 0x58
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000

080006b4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006ba:	4a19      	ldr	r2, [pc, #100]	; (8000720 <MX_DFSDM1_Init+0x6c>)
 80006bc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006cc:	2202      	movs	r2, #2
 80006ce:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006e2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006ec:	2204      	movs	r2, #4
 80006ee:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_DFSDM1_Init+0x68>)
 80006fe:	2200      	movs	r2, #0
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_DFSDM1_Init+0x68>)
 8000704:	2200      	movs	r2, #0
 8000706:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_DFSDM1_Init+0x68>)
 800070a:	f001 f811 	bl	8001730 <HAL_DFSDM_ChannelInit>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000714:	f000 fae8 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000078 	.word	0x20000078
 8000720:	40016020 	.word	0x40016020

08000724 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_I2C2_Init+0x74>)
 800072a:	4a1c      	ldr	r2, [pc, #112]	; (800079c <MX_I2C2_Init+0x78>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_I2C2_Init+0x74>)
 8000730:	f640 6214 	movw	r2, #3604	; 0xe14
 8000734:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_I2C2_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_I2C2_Init+0x74>)
 800073e:	2201      	movs	r2, #1
 8000740:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_I2C2_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_I2C2_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_I2C2_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_I2C2_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_I2C2_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <MX_I2C2_Init+0x74>)
 8000762:	f001 fad6 	bl	8001d12 <HAL_I2C_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800076c:	f000 fabc 	bl	8000ce8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000770:	2100      	movs	r1, #0
 8000772:	4809      	ldr	r0, [pc, #36]	; (8000798 <MX_I2C2_Init+0x74>)
 8000774:	f001 fb68 	bl	8001e48 <HAL_I2CEx_ConfigAnalogFilter>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800077e:	f000 fab3 	bl	8000ce8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000782:	2100      	movs	r1, #0
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_I2C2_Init+0x74>)
 8000786:	f001 fbaa 	bl	8001ede <HAL_I2CEx_ConfigDigitalFilter>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000790:	f000 faaa 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200000b0 	.word	0x200000b0
 800079c:	40005800 	.word	0x40005800

080007a0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_QUADSPI_Init+0x44>)
 80007a6:	4a10      	ldr	r2, [pc, #64]	; (80007e8 <MX_QUADSPI_Init+0x48>)
 80007a8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_QUADSPI_Init+0x44>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_QUADSPI_Init+0x44>)
 80007b2:	2204      	movs	r2, #4
 80007b4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_QUADSPI_Init+0x44>)
 80007b8:	2210      	movs	r2, #16
 80007ba:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_QUADSPI_Init+0x44>)
 80007be:	2217      	movs	r2, #23
 80007c0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_QUADSPI_Init+0x44>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_QUADSPI_Init+0x44>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_QUADSPI_Init+0x44>)
 80007d0:	f001 fd9e 	bl	8002310 <HAL_QSPI_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007da:	f000 fa85 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000104 	.word	0x20000104
 80007e8:	a0001000 	.word	0xa0001000

080007ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_SPI3_Init+0x74>)
 80007f2:	4a1c      	ldr	r2, [pc, #112]	; (8000864 <MX_SPI3_Init+0x78>)
 80007f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_SPI3_Init+0x74>)
 80007f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_SPI3_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_SPI3_Init+0x74>)
 8000806:	f44f 7240 	mov.w	r2, #768	; 0x300
 800080a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_SPI3_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_SPI3_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_SPI3_Init+0x74>)
 800081a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800081e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_SPI3_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_SPI3_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_SPI3_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_SPI3_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_SPI3_Init+0x74>)
 800083a:	2207      	movs	r2, #7
 800083c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_SPI3_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_SPI3_Init+0x74>)
 8000846:	2208      	movs	r2, #8
 8000848:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_SPI3_Init+0x74>)
 800084c:	f003 f8e8 	bl	8003a20 <HAL_SPI_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000856:	f000 fa47 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000148 	.word	0x20000148
 8000864:	40003c00 	.word	0x40003c00

08000868 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 800086e:	4a15      	ldr	r2, [pc, #84]	; (80008c4 <MX_USART1_UART_Init+0x5c>)
 8000870:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 80008ac:	f003 f95b 	bl	8003b66 <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008b6:	f000 fa17 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200001ac 	.word	0x200001ac
 80008c4:	40013800 	.word	0x40013800

080008c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008ce:	4a15      	ldr	r2, [pc, #84]	; (8000924 <MX_USART3_UART_Init+0x5c>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART3_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USART3_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USART3_UART_Init+0x58>)
 800090c:	f003 f92b 	bl	8003b66 <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000916:	f000 f9e7 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000234 	.word	0x20000234
 8000924:	40004800 	.word	0x40004800

08000928 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000932:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000936:	2206      	movs	r2, #6
 8000938:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093c:	2202      	movs	r2, #2
 800093e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000942:	2202      	movs	r2, #2
 8000944:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096c:	f001 fb03 	bl	8001f76 <HAL_PCD_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000976:	f000 f9b7 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200002bc 	.word	0x200002bc

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800099a:	4bbd      	ldr	r3, [pc, #756]	; (8000c90 <MX_GPIO_Init+0x30c>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	4abc      	ldr	r2, [pc, #752]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009a0:	f043 0310 	orr.w	r3, r3, #16
 80009a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a6:	4bba      	ldr	r3, [pc, #744]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	f003 0310 	and.w	r3, r3, #16
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	4bb7      	ldr	r3, [pc, #732]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4ab6      	ldr	r2, [pc, #728]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4bb4      	ldr	r3, [pc, #720]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4bb1      	ldr	r3, [pc, #708]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4ab0      	ldr	r2, [pc, #704]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4bae      	ldr	r3, [pc, #696]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	4bab      	ldr	r3, [pc, #684]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4aaa      	ldr	r2, [pc, #680]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4ba8      	ldr	r3, [pc, #672]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fa:	4ba5      	ldr	r3, [pc, #660]	; (8000c90 <MX_GPIO_Init+0x30c>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	4aa4      	ldr	r2, [pc, #656]	; (8000c90 <MX_GPIO_Init+0x30c>)
 8000a00:	f043 0308 	orr.w	r3, r3, #8
 8000a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a06:	4ba2      	ldr	r3, [pc, #648]	; (8000c90 <MX_GPIO_Init+0x30c>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	f003 0308 	and.w	r3, r3, #8
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000a18:	489e      	ldr	r0, [pc, #632]	; (8000c94 <MX_GPIO_Init+0x310>)
 8000a1a:	f001 f93f 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f248 1104 	movw	r1, #33028	; 0x8104
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f001 f938 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000a32:	4899      	ldr	r0, [pc, #612]	; (8000c98 <MX_GPIO_Init+0x314>)
 8000a34:	f001 f932 	bl	8001c9c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f241 0181 	movw	r1, #4225	; 0x1081
 8000a3e:	4897      	ldr	r0, [pc, #604]	; (8000c9c <MX_GPIO_Init+0x318>)
 8000a40:	f001 f92c 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a4a:	4894      	ldr	r0, [pc, #592]	; (8000c9c <MX_GPIO_Init+0x318>)
 8000a4c:	f001 f926 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000a56:	4892      	ldr	r0, [pc, #584]	; (8000ca0 <MX_GPIO_Init+0x31c>)
 8000a58:	f001 f920 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2120      	movs	r1, #32
 8000a60:	488d      	ldr	r0, [pc, #564]	; (8000c98 <MX_GPIO_Init+0x314>)
 8000a62:	f001 f91b 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	2101      	movs	r1, #1
 8000a6a:	488a      	ldr	r0, [pc, #552]	; (8000c94 <MX_GPIO_Init+0x310>)
 8000a6c:	f001 f916 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a70:	f240 1315 	movw	r3, #277	; 0x115
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4882      	ldr	r0, [pc, #520]	; (8000c94 <MX_GPIO_Init+0x310>)
 8000a8a:	f000 ff5d 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a8e:	236a      	movs	r3, #106	; 0x6a
 8000a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	487c      	ldr	r0, [pc, #496]	; (8000c94 <MX_GPIO_Init+0x310>)
 8000aa4:	f000 ff50 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000aa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4878      	ldr	r0, [pc, #480]	; (8000ca0 <MX_GPIO_Init+0x31c>)
 8000ac0:	f000 ff42 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000ac4:	233f      	movs	r3, #63	; 0x3f
 8000ac6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ac8:	230b      	movs	r3, #11
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4872      	ldr	r0, [pc, #456]	; (8000ca0 <MX_GPIO_Init+0x31c>)
 8000ad8:	f000 ff36 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000adc:	2303      	movs	r3, #3
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000aec:	2308      	movs	r3, #8
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afa:	f000 ff25 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000afe:	f248 1304 	movw	r3, #33028	; 0x8104
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1a:	f000 ff15 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b1e:	2308      	movs	r3, #8
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3c:	f000 ff04 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b40:	2310      	movs	r3, #16
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b44:	230b      	movs	r3, #11
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b56:	f000 fef7 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000b5a:	23e0      	movs	r3, #224	; 0xe0
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b78:	f000 fee6 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b80:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4841      	ldr	r0, [pc, #260]	; (8000c98 <MX_GPIO_Init+0x314>)
 8000b92:	f000 fed9 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b96:	2302      	movs	r3, #2
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b9a:	230b      	movs	r3, #11
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	483b      	ldr	r0, [pc, #236]	; (8000c98 <MX_GPIO_Init+0x314>)
 8000baa:	f000 fecd 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000bae:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000bb2:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4834      	ldr	r0, [pc, #208]	; (8000c98 <MX_GPIO_Init+0x314>)
 8000bc8:	f000 febe 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000bcc:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000bd0:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	482e      	ldr	r0, [pc, #184]	; (8000c9c <MX_GPIO_Init+0x318>)
 8000be4:	f000 feb0 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000be8:	f243 0381 	movw	r3, #12417	; 0x3081
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4826      	ldr	r0, [pc, #152]	; (8000c9c <MX_GPIO_Init+0x318>)
 8000c02:	f000 fea1 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c06:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4820      	ldr	r0, [pc, #128]	; (8000ca0 <MX_GPIO_Init+0x31c>)
 8000c20:	f000 fe92 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c24:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c2a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4819      	ldr	r0, [pc, #100]	; (8000ca0 <MX_GPIO_Init+0x31c>)
 8000c3c:	f000 fe84 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c40:	2302      	movs	r3, #2
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c50:	2305      	movs	r3, #5
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4810      	ldr	r0, [pc, #64]	; (8000c9c <MX_GPIO_Init+0x318>)
 8000c5c:	f000 fe74 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c60:	2378      	movs	r3, #120	; 0x78
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c70:	2307      	movs	r3, #7
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4808      	ldr	r0, [pc, #32]	; (8000c9c <MX_GPIO_Init+0x318>)
 8000c7c:	f000 fe64 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c86:	2312      	movs	r3, #18
 8000c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e00a      	b.n	8000ca4 <MX_GPIO_Init+0x320>
 8000c8e:	bf00      	nop
 8000c90:	40021000 	.word	0x40021000
 8000c94:	48001000 	.word	0x48001000
 8000c98:	48000400 	.word	0x48000400
 8000c9c:	48000c00 	.word	0x48000c00
 8000ca0:	48000800 	.word	0x48000800
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000caa:	2304      	movs	r3, #4
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <MX_GPIO_Init+0x360>)
 8000cb6:	f000 fe47 	bl	8001948 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2017      	movs	r0, #23
 8000cc0:	f000 fcff 	bl	80016c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cc4:	2017      	movs	r0, #23
 8000cc6:	f000 fd18 	bl	80016fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2028      	movs	r0, #40	; 0x28
 8000cd0:	f000 fcf7 	bl	80016c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cd4:	2028      	movs	r0, #40	; 0x28
 8000cd6:	f000 fd10 	bl	80016fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	48000400 	.word	0x48000400

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
}
 8000cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <Error_Handler+0x8>
	...

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <HAL_MspInit+0x44>)
 8000cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfe:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <HAL_MspInit+0x44>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6613      	str	r3, [r2, #96]	; 0x60
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <HAL_MspInit+0x44>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <HAL_MspInit+0x44>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d16:	4a08      	ldr	r2, [pc, #32]	; (8000d38 <HAL_MspInit+0x44>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_MspInit+0x44>)
 8000d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40021000 	.word	0x40021000

08000d3c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0ac      	sub	sp, #176	; 0xb0
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2288      	movs	r2, #136	; 0x88
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 ff73 	bl	8004c48 <memset>
  if(DFSDM1_Init == 0)
 8000d62:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d142      	bne.n	8000df0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000d6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d6e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f002 f984 	bl	8003088 <HAL_RCCEx_PeriphCLKConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000d86:	f7ff ffaf 	bl	8000ce8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8e:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d94:	6613      	str	r3, [r2, #96]	; 0x60
 8000d96:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	4a15      	ldr	r2, [pc, #84]	; (8000dfc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000da8:	f043 0310 	orr.w	r3, r3, #16
 8000dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	f003 0310 	and.w	r3, r3, #16
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000dba:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000dbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000dd4:	2306      	movs	r3, #6
 8000dd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dda:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dde:	4619      	mov	r1, r3
 8000de0:	4807      	ldr	r0, [pc, #28]	; (8000e00 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000de2:	f000 fdb1 	bl	8001948 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	4a02      	ldr	r2, [pc, #8]	; (8000df8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000dee:	6013      	str	r3, [r2, #0]
  }

}
 8000df0:	bf00      	nop
 8000df2:	37b0      	adds	r7, #176	; 0xb0
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200007c8 	.word	0x200007c8
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	48001000 	.word	0x48001000

08000e04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b0ac      	sub	sp, #176	; 0xb0
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2288      	movs	r2, #136	; 0x88
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f003 ff0f 	bl	8004c48 <memset>
  if(hi2c->Instance==I2C2)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a21      	ldr	r2, [pc, #132]	; (8000eb4 <HAL_I2C_MspInit+0xb0>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d13b      	bne.n	8000eac <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4618      	mov	r0, r3
 8000e42:	f002 f921 	bl	8003088 <HAL_RCCEx_PeriphCLKConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e4c:	f7ff ff4c 	bl	8000ce8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <HAL_I2C_MspInit+0xb4>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e54:	4a18      	ldr	r2, [pc, #96]	; (8000eb8 <HAL_I2C_MspInit+0xb4>)
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <HAL_I2C_MspInit+0xb4>)
 8000e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000e68:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e70:	2312      	movs	r3, #18
 8000e72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e82:	2304      	movs	r3, #4
 8000e84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	480b      	ldr	r0, [pc, #44]	; (8000ebc <HAL_I2C_MspInit+0xb8>)
 8000e90:	f000 fd5a 	bl	8001948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_I2C_MspInit+0xb4>)
 8000e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e98:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_I2C_MspInit+0xb4>)
 8000e9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <HAL_I2C_MspInit+0xb4>)
 8000ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000eac:	bf00      	nop
 8000eae:	37b0      	adds	r7, #176	; 0xb0
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40005800 	.word	0x40005800
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	48000400 	.word	0x48000400

08000ec0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a17      	ldr	r2, [pc, #92]	; (8000f3c <HAL_QSPI_MspInit+0x7c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d128      	bne.n	8000f34 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000ee2:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <HAL_QSPI_MspInit+0x80>)
 8000ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ee6:	4a16      	ldr	r2, [pc, #88]	; (8000f40 <HAL_QSPI_MspInit+0x80>)
 8000ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eec:	6513      	str	r3, [r2, #80]	; 0x50
 8000eee:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <HAL_QSPI_MspInit+0x80>)
 8000ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <HAL_QSPI_MspInit+0x80>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	4a10      	ldr	r2, [pc, #64]	; (8000f40 <HAL_QSPI_MspInit+0x80>)
 8000f00:	f043 0310 	orr.w	r3, r3, #16
 8000f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_QSPI_MspInit+0x80>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	f003 0310 	and.w	r3, r3, #16
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000f12:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f16:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f24:	230a      	movs	r3, #10
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <HAL_QSPI_MspInit+0x84>)
 8000f30:	f000 fd0a 	bl	8001948 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	; 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	a0001000 	.word	0xa0001000
 8000f40:	40021000 	.word	0x40021000
 8000f44:	48001000 	.word	0x48001000

08000f48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <HAL_SPI_MspInit+0x7c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d128      	bne.n	8000fbc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <HAL_SPI_MspInit+0x80>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6e:	4a16      	ldr	r2, [pc, #88]	; (8000fc8 <HAL_SPI_MspInit+0x80>)
 8000f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f74:	6593      	str	r3, [r2, #88]	; 0x58
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <HAL_SPI_MspInit+0x80>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_SPI_MspInit+0x80>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <HAL_SPI_MspInit+0x80>)
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_SPI_MspInit+0x80>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000f9a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fac:	2306      	movs	r3, #6
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <HAL_SPI_MspInit+0x84>)
 8000fb8:	f000 fcc6 	bl	8001948 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	3728      	adds	r7, #40	; 0x28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40003c00 	.word	0x40003c00
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	48000800 	.word	0x48000800

08000fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0ae      	sub	sp, #184	; 0xb8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	2288      	movs	r2, #136	; 0x88
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 fe29 	bl	8004c48 <memset>
  if(huart->Instance==USART1)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a42      	ldr	r2, [pc, #264]	; (8001104 <HAL_UART_MspInit+0x134>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d13b      	bne.n	8001078 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001000:	2301      	movs	r3, #1
 8001002:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001004:	2300      	movs	r3, #0
 8001006:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4618      	mov	r0, r3
 800100e:	f002 f83b 	bl	8003088 <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001018:	f7ff fe66 	bl	8000ce8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800101c:	4b3a      	ldr	r3, [pc, #232]	; (8001108 <HAL_UART_MspInit+0x138>)
 800101e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001020:	4a39      	ldr	r2, [pc, #228]	; (8001108 <HAL_UART_MspInit+0x138>)
 8001022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001026:	6613      	str	r3, [r2, #96]	; 0x60
 8001028:	4b37      	ldr	r3, [pc, #220]	; (8001108 <HAL_UART_MspInit+0x138>)
 800102a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001030:	61bb      	str	r3, [r7, #24]
 8001032:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001034:	4b34      	ldr	r3, [pc, #208]	; (8001108 <HAL_UART_MspInit+0x138>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	4a33      	ldr	r2, [pc, #204]	; (8001108 <HAL_UART_MspInit+0x138>)
 800103a:	f043 0302 	orr.w	r3, r3, #2
 800103e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001040:	4b31      	ldr	r3, [pc, #196]	; (8001108 <HAL_UART_MspInit+0x138>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800104c:	23c0      	movs	r3, #192	; 0xc0
 800104e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001064:	2307      	movs	r3, #7
 8001066:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800106e:	4619      	mov	r1, r3
 8001070:	4826      	ldr	r0, [pc, #152]	; (800110c <HAL_UART_MspInit+0x13c>)
 8001072:	f000 fc69 	bl	8001948 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001076:	e040      	b.n	80010fa <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a24      	ldr	r2, [pc, #144]	; (8001110 <HAL_UART_MspInit+0x140>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d13b      	bne.n	80010fa <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001082:	2304      	movs	r3, #4
 8001084:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001086:	2300      	movs	r3, #0
 8001088:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4618      	mov	r0, r3
 8001090:	f001 fffa 	bl	8003088 <HAL_RCCEx_PeriphCLKConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800109a:	f7ff fe25 	bl	8000ce8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <HAL_UART_MspInit+0x138>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	4a19      	ldr	r2, [pc, #100]	; (8001108 <HAL_UART_MspInit+0x138>)
 80010a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a8:	6593      	str	r3, [r2, #88]	; 0x58
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <HAL_UART_MspInit+0x138>)
 80010ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <HAL_UART_MspInit+0x138>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	4a13      	ldr	r2, [pc, #76]	; (8001108 <HAL_UART_MspInit+0x138>)
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <HAL_UART_MspInit+0x138>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80010ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010e8:	2307      	movs	r3, #7
 80010ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010f2:	4619      	mov	r1, r3
 80010f4:	4807      	ldr	r0, [pc, #28]	; (8001114 <HAL_UART_MspInit+0x144>)
 80010f6:	f000 fc27 	bl	8001948 <HAL_GPIO_Init>
}
 80010fa:	bf00      	nop
 80010fc:	37b8      	adds	r7, #184	; 0xb8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40013800 	.word	0x40013800
 8001108:	40021000 	.word	0x40021000
 800110c:	48000400 	.word	0x48000400
 8001110:	40004800 	.word	0x40004800
 8001114:	48000c00 	.word	0x48000c00

08001118 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b0ac      	sub	sp, #176	; 0xb0
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2288      	movs	r2, #136	; 0x88
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f003 fd85 	bl	8004c48 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001146:	d17c      	bne.n	8001242 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800114c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800114e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001152:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001156:	2301      	movs	r3, #1
 8001158:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800115a:	2301      	movs	r3, #1
 800115c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800115e:	2318      	movs	r3, #24
 8001160:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001162:	2307      	movs	r3, #7
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001166:	2302      	movs	r3, #2
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800116a:	2302      	movs	r3, #2
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800116e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001172:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4618      	mov	r0, r3
 800117a:	f001 ff85 	bl	8003088 <HAL_RCCEx_PeriphCLKConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001184:	f7ff fdb0 	bl	8000ce8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	4b30      	ldr	r3, [pc, #192]	; (800124c <HAL_PCD_MspInit+0x134>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	4a2f      	ldr	r2, [pc, #188]	; (800124c <HAL_PCD_MspInit+0x134>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <HAL_PCD_MspInit+0x134>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80011a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011b8:	4619      	mov	r1, r3
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011be:	f000 fbc3 	bl	8001948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80011c2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011dc:	230a      	movs	r3, #10
 80011de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011e6:	4619      	mov	r1, r3
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ec:	f000 fbac 	bl	8001948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <HAL_PCD_MspInit+0x134>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f4:	4a15      	ldr	r2, [pc, #84]	; (800124c <HAL_PCD_MspInit+0x134>)
 80011f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <HAL_PCD_MspInit+0x134>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001208:	4b10      	ldr	r3, [pc, #64]	; (800124c <HAL_PCD_MspInit+0x134>)
 800120a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d114      	bne.n	800123e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <HAL_PCD_MspInit+0x134>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	4a0c      	ldr	r2, [pc, #48]	; (800124c <HAL_PCD_MspInit+0x134>)
 800121a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121e:	6593      	str	r3, [r2, #88]	; 0x58
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_PCD_MspInit+0x134>)
 8001222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800122c:	f001 f860 	bl	80022f0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_PCD_MspInit+0x134>)
 8001232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001234:	4a05      	ldr	r2, [pc, #20]	; (800124c <HAL_PCD_MspInit+0x134>)
 8001236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800123a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800123c:	e001      	b.n	8001242 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800123e:	f001 f857 	bl	80022f0 <HAL_PWREx_EnableVddUSB>
}
 8001242:	bf00      	nop
 8001244:	37b0      	adds	r7, #176	; 0xb0
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <NMI_Handler+0x4>

08001256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <MemManage_Handler+0x4>

08001262 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <BusFault_Handler+0x4>

08001268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <UsageFault_Handler+0x4>

0800126e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129c:	f000 f8f2 	bl	8001484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80012a8:	2020      	movs	r0, #32
 80012aa:	f000 fd0f 	bl	8001ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80012ae:	2040      	movs	r0, #64	; 0x40
 80012b0:	f000 fd0c 	bl	8001ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80012b4:	2080      	movs	r0, #128	; 0x80
 80012b6:	f000 fd09 	bl	8001ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80012ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80012be:	f000 fd05 	bl	8001ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80012ca:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80012ce:	f000 fcfd 	bl	8001ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80012d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012d6:	f000 fcf9 	bl	8001ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80012da:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012de:	f000 fcf5 	bl	8001ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80012e2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012e6:	f000 fcf1 	bl	8001ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80012ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012ee:	f000 fced 	bl	8001ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001300:	4a14      	ldr	r2, [pc, #80]	; (8001354 <_sbrk+0x5c>)
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <_sbrk+0x60>)
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <_sbrk+0x64>)
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <_sbrk+0x68>)
 8001318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	429a      	cmp	r2, r3
 8001326:	d207      	bcs.n	8001338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001328:	f003 fc96 	bl	8004c58 <__errno>
 800132c:	4603      	mov	r3, r0
 800132e:	220c      	movs	r2, #12
 8001330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001336:	e009      	b.n	800134c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	4a05      	ldr	r2, [pc, #20]	; (800135c <_sbrk+0x64>)
 8001348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134a:	68fb      	ldr	r3, [r7, #12]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20018000 	.word	0x20018000
 8001358:	00000400 	.word	0x00000400
 800135c:	200007cc 	.word	0x200007cc
 8001360:	20000940 	.word	0x20000940

08001364 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <SystemInit+0x20>)
 800136a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800136e:	4a05      	ldr	r2, [pc, #20]	; (8001384 <SystemInit+0x20>)
 8001370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800138c:	f7ff ffea 	bl	8001364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001390:	480c      	ldr	r0, [pc, #48]	; (80013c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001392:	490d      	ldr	r1, [pc, #52]	; (80013c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <LoopForever+0xe>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001398:	e002      	b.n	80013a0 <LoopCopyDataInit>

0800139a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800139c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139e:	3304      	adds	r3, #4

080013a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a4:	d3f9      	bcc.n	800139a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013a8:	4c0a      	ldr	r4, [pc, #40]	; (80013d4 <LoopForever+0x16>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ac:	e001      	b.n	80013b2 <LoopFillZerobss>

080013ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b0:	3204      	adds	r2, #4

080013b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b4:	d3fb      	bcc.n	80013ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013b6:	f003 fc55 	bl	8004c64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ba:	f7ff f8df 	bl	800057c <main>

080013be <LoopForever>:

LoopForever:
    b LoopForever
 80013be:	e7fe      	b.n	80013be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013cc:	08005600 	.word	0x08005600
  ldr r2, =_sbss
 80013d0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013d4:	20000940 	.word	0x20000940

080013d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013d8:	e7fe      	b.n	80013d8 <ADC1_2_IRQHandler>

080013da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e4:	2003      	movs	r0, #3
 80013e6:	f000 f961 	bl	80016ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ea:	2000      	movs	r0, #0
 80013ec:	f000 f80e 	bl	800140c <HAL_InitTick>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d002      	beq.n	80013fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	71fb      	strb	r3, [r7, #7]
 80013fa:	e001      	b.n	8001400 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013fc:	f7ff fc7a 	bl	8000cf4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001400:	79fb      	ldrb	r3, [r7, #7]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001418:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_InitTick+0x6c>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d023      	beq.n	8001468 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_InitTick+0x70>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_InitTick+0x6c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4619      	mov	r1, r3
 800142a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001432:	fbb2 f3f3 	udiv	r3, r2, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f96d 	bl	8001716 <HAL_SYSTICK_Config>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10f      	bne.n	8001462 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b0f      	cmp	r3, #15
 8001446:	d809      	bhi.n	800145c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001448:	2200      	movs	r2, #0
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001450:	f000 f937 	bl	80016c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001454:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <HAL_InitTick+0x74>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e007      	b.n	800146c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	e004      	b.n	800146c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e001      	b.n	800146c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800146c:	7bfb      	ldrb	r3, [r7, #15]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000008 	.word	0x20000008
 800147c:	20000000 	.word	0x20000000
 8001480:	20000004 	.word	0x20000004

08001484 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_IncTick+0x20>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_IncTick+0x24>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4413      	add	r3, r2
 8001494:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <HAL_IncTick+0x24>)
 8001496:	6013      	str	r3, [r2, #0]
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000008 	.word	0x20000008
 80014a8:	200007d0 	.word	0x200007d0

080014ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return uwTick;
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <HAL_GetTick+0x14>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	200007d0 	.word	0x200007d0

080014c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014cc:	f7ff ffee 	bl	80014ac <HAL_GetTick>
 80014d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014dc:	d005      	beq.n	80014ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <HAL_Delay+0x44>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4413      	add	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ea:	bf00      	nop
 80014ec:	f7ff ffde 	bl	80014ac <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d8f7      	bhi.n	80014ec <HAL_Delay+0x28>
  {
  }
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000008 	.word	0x20000008

0800150c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <__NVIC_SetPriorityGrouping+0x44>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001528:	4013      	ands	r3, r2
 800152a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800153c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800153e:	4a04      	ldr	r2, [pc, #16]	; (8001550 <__NVIC_SetPriorityGrouping+0x44>)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	60d3      	str	r3, [r2, #12]
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <__NVIC_GetPriorityGrouping+0x18>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	f003 0307 	and.w	r3, r3, #7
}
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	2b00      	cmp	r3, #0
 8001580:	db0b      	blt.n	800159a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	f003 021f 	and.w	r2, r3, #31
 8001588:	4907      	ldr	r1, [pc, #28]	; (80015a8 <__NVIC_EnableIRQ+0x38>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	095b      	lsrs	r3, r3, #5
 8001590:	2001      	movs	r0, #1
 8001592:	fa00 f202 	lsl.w	r2, r0, r2
 8001596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000e100 	.word	0xe000e100

080015ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	6039      	str	r1, [r7, #0]
 80015b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	db0a      	blt.n	80015d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	490c      	ldr	r1, [pc, #48]	; (80015f8 <__NVIC_SetPriority+0x4c>)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	0112      	lsls	r2, r2, #4
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	440b      	add	r3, r1
 80015d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d4:	e00a      	b.n	80015ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4908      	ldr	r1, [pc, #32]	; (80015fc <__NVIC_SetPriority+0x50>)
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	3b04      	subs	r3, #4
 80015e4:	0112      	lsls	r2, r2, #4
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	440b      	add	r3, r1
 80015ea:	761a      	strb	r2, [r3, #24]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000e100 	.word	0xe000e100
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001600:	b480      	push	{r7}
 8001602:	b089      	sub	sp, #36	; 0x24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f1c3 0307 	rsb	r3, r3, #7
 800161a:	2b04      	cmp	r3, #4
 800161c:	bf28      	it	cs
 800161e:	2304      	movcs	r3, #4
 8001620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3304      	adds	r3, #4
 8001626:	2b06      	cmp	r3, #6
 8001628:	d902      	bls.n	8001630 <NVIC_EncodePriority+0x30>
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3b03      	subs	r3, #3
 800162e:	e000      	b.n	8001632 <NVIC_EncodePriority+0x32>
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43da      	mvns	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	401a      	ands	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001648:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	fa01 f303 	lsl.w	r3, r1, r3
 8001652:	43d9      	mvns	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	4313      	orrs	r3, r2
         );
}
 800165a:	4618      	mov	r0, r3
 800165c:	3724      	adds	r7, #36	; 0x24
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001678:	d301      	bcc.n	800167e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167a:	2301      	movs	r3, #1
 800167c:	e00f      	b.n	800169e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167e:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <SysTick_Config+0x40>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001686:	210f      	movs	r1, #15
 8001688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800168c:	f7ff ff8e 	bl	80015ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <SysTick_Config+0x40>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001696:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <SysTick_Config+0x40>)
 8001698:	2207      	movs	r2, #7
 800169a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	e000e010 	.word	0xe000e010

080016ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ff29 	bl	800150c <__NVIC_SetPriorityGrouping>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b086      	sub	sp, #24
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016d4:	f7ff ff3e 	bl	8001554 <__NVIC_GetPriorityGrouping>
 80016d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	6978      	ldr	r0, [r7, #20]
 80016e0:	f7ff ff8e 	bl	8001600 <NVIC_EncodePriority>
 80016e4:	4602      	mov	r2, r0
 80016e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff5d 	bl	80015ac <__NVIC_SetPriority>
}
 80016f2:	bf00      	nop
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff31 	bl	8001570 <__NVIC_EnableIRQ>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ffa2 	bl	8001668 <SysTick_Config>
 8001724:	4603      	mov	r3, r0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e0ac      	b.n	800189c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f8b2 	bl	80018b0 <DFSDM_GetChannelFromInstance>
 800174c:	4603      	mov	r3, r0
 800174e:	4a55      	ldr	r2, [pc, #340]	; (80018a4 <HAL_DFSDM_ChannelInit+0x174>)
 8001750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e09f      	b.n	800189c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff faed 	bl	8000d3c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001762:	4b51      	ldr	r3, [pc, #324]	; (80018a8 <HAL_DFSDM_ChannelInit+0x178>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	3301      	adds	r3, #1
 8001768:	4a4f      	ldr	r2, [pc, #316]	; (80018a8 <HAL_DFSDM_ChannelInit+0x178>)
 800176a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800176c:	4b4e      	ldr	r3, [pc, #312]	; (80018a8 <HAL_DFSDM_ChannelInit+0x178>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d125      	bne.n	80017c0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001774:	4b4d      	ldr	r3, [pc, #308]	; (80018ac <HAL_DFSDM_ChannelInit+0x17c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a4c      	ldr	r2, [pc, #304]	; (80018ac <HAL_DFSDM_ChannelInit+0x17c>)
 800177a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800177e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001780:	4b4a      	ldr	r3, [pc, #296]	; (80018ac <HAL_DFSDM_ChannelInit+0x17c>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4948      	ldr	r1, [pc, #288]	; (80018ac <HAL_DFSDM_ChannelInit+0x17c>)
 800178a:	4313      	orrs	r3, r2
 800178c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800178e:	4b47      	ldr	r3, [pc, #284]	; (80018ac <HAL_DFSDM_ChannelInit+0x17c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a46      	ldr	r2, [pc, #280]	; (80018ac <HAL_DFSDM_ChannelInit+0x17c>)
 8001794:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001798:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	791b      	ldrb	r3, [r3, #4]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d108      	bne.n	80017b4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80017a2:	4b42      	ldr	r3, [pc, #264]	; (80018ac <HAL_DFSDM_ChannelInit+0x17c>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	041b      	lsls	r3, r3, #16
 80017ae:	493f      	ldr	r1, [pc, #252]	; (80018ac <HAL_DFSDM_ChannelInit+0x17c>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80017b4:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <HAL_DFSDM_ChannelInit+0x17c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a3c      	ldr	r2, [pc, #240]	; (80018ac <HAL_DFSDM_ChannelInit+0x17c>)
 80017ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80017be:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80017ce:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6819      	ldr	r1, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017de:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80017e4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 020f 	bic.w	r2, r2, #15
 80017fc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6819      	ldr	r1, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001824:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6899      	ldr	r1, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	3b01      	subs	r3, #1
 8001836:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f002 0207 	and.w	r2, r2, #7
 8001850:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6859      	ldr	r1, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800187c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f000 f810 	bl	80018b0 <DFSDM_GetChannelFromInstance>
 8001890:	4602      	mov	r2, r0
 8001892:	4904      	ldr	r1, [pc, #16]	; (80018a4 <HAL_DFSDM_ChannelInit+0x174>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200007d8 	.word	0x200007d8
 80018a8:	200007d4 	.word	0x200007d4
 80018ac:	40016000 	.word	0x40016000

080018b0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a1c      	ldr	r2, [pc, #112]	; (800192c <DFSDM_GetChannelFromInstance+0x7c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d102      	bne.n	80018c6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	e02b      	b.n	800191e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a19      	ldr	r2, [pc, #100]	; (8001930 <DFSDM_GetChannelFromInstance+0x80>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d102      	bne.n	80018d4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80018ce:	2301      	movs	r3, #1
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	e024      	b.n	800191e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a17      	ldr	r2, [pc, #92]	; (8001934 <DFSDM_GetChannelFromInstance+0x84>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d102      	bne.n	80018e2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80018dc:	2302      	movs	r3, #2
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	e01d      	b.n	800191e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a14      	ldr	r2, [pc, #80]	; (8001938 <DFSDM_GetChannelFromInstance+0x88>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d102      	bne.n	80018f0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80018ea:	2304      	movs	r3, #4
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	e016      	b.n	800191e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <DFSDM_GetChannelFromInstance+0x8c>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d102      	bne.n	80018fe <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80018f8:	2305      	movs	r3, #5
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	e00f      	b.n	800191e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a0f      	ldr	r2, [pc, #60]	; (8001940 <DFSDM_GetChannelFromInstance+0x90>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d102      	bne.n	800190c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001906:	2306      	movs	r3, #6
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	e008      	b.n	800191e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a0d      	ldr	r2, [pc, #52]	; (8001944 <DFSDM_GetChannelFromInstance+0x94>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d102      	bne.n	800191a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001914:	2307      	movs	r3, #7
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	e001      	b.n	800191e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800191a:	2303      	movs	r3, #3
 800191c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	40016000 	.word	0x40016000
 8001930:	40016020 	.word	0x40016020
 8001934:	40016040 	.word	0x40016040
 8001938:	40016080 	.word	0x40016080
 800193c:	400160a0 	.word	0x400160a0
 8001940:	400160c0 	.word	0x400160c0
 8001944:	400160e0 	.word	0x400160e0

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001956:	e17f      	b.n	8001c58 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	2101      	movs	r1, #1
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 8171 	beq.w	8001c52 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b01      	cmp	r3, #1
 800197a:	d005      	beq.n	8001988 <HAL_GPIO_Init+0x40>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d130      	bne.n	80019ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019be:	2201      	movs	r2, #1
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	091b      	lsrs	r3, r3, #4
 80019d4:	f003 0201 	and.w	r2, r3, #1
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d118      	bne.n	8001a28 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019fc:	2201      	movs	r2, #1
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	08db      	lsrs	r3, r3, #3
 8001a12:	f003 0201 	and.w	r2, r3, #1
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d017      	beq.n	8001a64 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	2203      	movs	r2, #3
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d123      	bne.n	8001ab8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	08da      	lsrs	r2, r3, #3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3208      	adds	r2, #8
 8001a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	220f      	movs	r2, #15
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	08da      	lsrs	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3208      	adds	r2, #8
 8001ab2:	6939      	ldr	r1, [r7, #16]
 8001ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0203 	and.w	r2, r3, #3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 80ac 	beq.w	8001c52 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afa:	4b5f      	ldr	r3, [pc, #380]	; (8001c78 <HAL_GPIO_Init+0x330>)
 8001afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afe:	4a5e      	ldr	r2, [pc, #376]	; (8001c78 <HAL_GPIO_Init+0x330>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6613      	str	r3, [r2, #96]	; 0x60
 8001b06:	4b5c      	ldr	r3, [pc, #368]	; (8001c78 <HAL_GPIO_Init+0x330>)
 8001b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b12:	4a5a      	ldr	r2, [pc, #360]	; (8001c7c <HAL_GPIO_Init+0x334>)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	089b      	lsrs	r3, r3, #2
 8001b18:	3302      	adds	r3, #2
 8001b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	220f      	movs	r2, #15
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b3c:	d025      	beq.n	8001b8a <HAL_GPIO_Init+0x242>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a4f      	ldr	r2, [pc, #316]	; (8001c80 <HAL_GPIO_Init+0x338>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d01f      	beq.n	8001b86 <HAL_GPIO_Init+0x23e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a4e      	ldr	r2, [pc, #312]	; (8001c84 <HAL_GPIO_Init+0x33c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d019      	beq.n	8001b82 <HAL_GPIO_Init+0x23a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a4d      	ldr	r2, [pc, #308]	; (8001c88 <HAL_GPIO_Init+0x340>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d013      	beq.n	8001b7e <HAL_GPIO_Init+0x236>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a4c      	ldr	r2, [pc, #304]	; (8001c8c <HAL_GPIO_Init+0x344>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d00d      	beq.n	8001b7a <HAL_GPIO_Init+0x232>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a4b      	ldr	r2, [pc, #300]	; (8001c90 <HAL_GPIO_Init+0x348>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d007      	beq.n	8001b76 <HAL_GPIO_Init+0x22e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4a      	ldr	r2, [pc, #296]	; (8001c94 <HAL_GPIO_Init+0x34c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d101      	bne.n	8001b72 <HAL_GPIO_Init+0x22a>
 8001b6e:	2306      	movs	r3, #6
 8001b70:	e00c      	b.n	8001b8c <HAL_GPIO_Init+0x244>
 8001b72:	2307      	movs	r3, #7
 8001b74:	e00a      	b.n	8001b8c <HAL_GPIO_Init+0x244>
 8001b76:	2305      	movs	r3, #5
 8001b78:	e008      	b.n	8001b8c <HAL_GPIO_Init+0x244>
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_Init+0x244>
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e004      	b.n	8001b8c <HAL_GPIO_Init+0x244>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e002      	b.n	8001b8c <HAL_GPIO_Init+0x244>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_GPIO_Init+0x244>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	f002 0203 	and.w	r2, r2, #3
 8001b92:	0092      	lsls	r2, r2, #2
 8001b94:	4093      	lsls	r3, r2
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b9c:	4937      	ldr	r1, [pc, #220]	; (8001c7c <HAL_GPIO_Init+0x334>)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001baa:	4b3b      	ldr	r3, [pc, #236]	; (8001c98 <HAL_GPIO_Init+0x350>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bce:	4a32      	ldr	r2, [pc, #200]	; (8001c98 <HAL_GPIO_Init+0x350>)
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bd4:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <HAL_GPIO_Init+0x350>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bf8:	4a27      	ldr	r2, [pc, #156]	; (8001c98 <HAL_GPIO_Init+0x350>)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bfe:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <HAL_GPIO_Init+0x350>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c22:	4a1d      	ldr	r2, [pc, #116]	; (8001c98 <HAL_GPIO_Init+0x350>)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <HAL_GPIO_Init+0x350>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c4c:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <HAL_GPIO_Init+0x350>)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3301      	adds	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f47f ae78 	bne.w	8001958 <HAL_GPIO_Init+0x10>
  }
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	371c      	adds	r7, #28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40010000 	.word	0x40010000
 8001c80:	48000400 	.word	0x48000400
 8001c84:	48000800 	.word	0x48000800
 8001c88:	48000c00 	.word	0x48000c00
 8001c8c:	48001000 	.word	0x48001000
 8001c90:	48001400 	.word	0x48001400
 8001c94:	48001800 	.word	0x48001800
 8001c98:	40010400 	.word	0x40010400

08001c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	807b      	strh	r3, [r7, #2]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cac:	787b      	ldrb	r3, [r7, #1]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cb2:	887a      	ldrh	r2, [r7, #2]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cb8:	e002      	b.n	8001cc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cba:	887a      	ldrh	r2, [r7, #2]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cd8:	695a      	ldr	r2, [r3, #20]
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d006      	beq.n	8001cf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ce2:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ce4:	88fb      	ldrh	r3, [r7, #6]
 8001ce6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f806 	bl	8001cfc <HAL_GPIO_EXTI_Callback>
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40010400 	.word	0x40010400

08001cfc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e08d      	b.n	8001e40 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d106      	bne.n	8001d3e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff f863 	bl	8000e04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2224      	movs	r2, #36	; 0x24
 8001d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0201 	bic.w	r2, r2, #1
 8001d54:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d62:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d72:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d107      	bne.n	8001d8c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	e006      	b.n	8001d9a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d98:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d108      	bne.n	8001db4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	e007      	b.n	8001dc4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dc2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dd6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001de6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69d9      	ldr	r1, [r3, #28]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1a      	ldr	r2, [r3, #32]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0201 	orr.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b20      	cmp	r3, #32
 8001e5c:	d138      	bne.n	8001ed0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e032      	b.n	8001ed2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2224      	movs	r2, #36	; 0x24
 8001e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0201 	bic.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6819      	ldr	r1, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e000      	b.n	8001ed2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ed0:	2302      	movs	r3, #2
  }
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b085      	sub	sp, #20
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b20      	cmp	r3, #32
 8001ef2:	d139      	bne.n	8001f68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e033      	b.n	8001f6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2224      	movs	r2, #36	; 0x24
 8001f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0201 	bic.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	e000      	b.n	8001f6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f68:	2302      	movs	r3, #2
  }
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f78:	b08f      	sub	sp, #60	; 0x3c
 8001f7a:	af0a      	add	r7, sp, #40	; 0x28
 8001f7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e116      	b.n	80021b6 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d106      	bne.n	8001fa8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff f8b8 	bl	8001118 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2203      	movs	r2, #3
 8001fac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f002 fb9f 	bl	800470a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	603b      	str	r3, [r7, #0]
 8001fd2:	687e      	ldr	r6, [r7, #4]
 8001fd4:	466d      	mov	r5, sp
 8001fd6:	f106 0410 	add.w	r4, r6, #16
 8001fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fe6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fea:	1d33      	adds	r3, r6, #4
 8001fec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fee:	6838      	ldr	r0, [r7, #0]
 8001ff0:	f002 fb5f 	bl	80046b2 <USB_CoreInit>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d005      	beq.n	8002006 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e0d7      	b.n	80021b6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f002 fb8d 	bl	800472c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002012:	2300      	movs	r3, #0
 8002014:	73fb      	strb	r3, [r7, #15]
 8002016:	e04a      	b.n	80020ae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002018:	7bfa      	ldrb	r2, [r7, #15]
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	333d      	adds	r3, #61	; 0x3d
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	333c      	adds	r3, #60	; 0x3c
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002040:	7bfa      	ldrb	r2, [r7, #15]
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	b298      	uxth	r0, r3
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	3356      	adds	r3, #86	; 0x56
 8002054:	4602      	mov	r2, r0
 8002056:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	3340      	adds	r3, #64	; 0x40
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	3344      	adds	r3, #68	; 0x44
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4413      	add	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	3348      	adds	r3, #72	; 0x48
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002094:	7bfa      	ldrb	r2, [r7, #15]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	334c      	adds	r3, #76	; 0x4c
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	3301      	adds	r3, #1
 80020ac:	73fb      	strb	r3, [r7, #15]
 80020ae:	7bfa      	ldrb	r2, [r7, #15]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d3af      	bcc.n	8002018 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]
 80020bc:	e044      	b.n	8002148 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020be:	7bfa      	ldrb	r2, [r7, #15]
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020d4:	7bfa      	ldrb	r2, [r7, #15]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800212c:	7bfa      	ldrb	r2, [r7, #15]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	3301      	adds	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	7bfa      	ldrb	r2, [r7, #15]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	429a      	cmp	r2, r3
 8002150:	d3b5      	bcc.n	80020be <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	687e      	ldr	r6, [r7, #4]
 800215a:	466d      	mov	r5, sp
 800215c:	f106 0410 	add.w	r4, r6, #16
 8002160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002168:	e894 0003 	ldmia.w	r4, {r0, r1}
 800216c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002170:	1d33      	adds	r3, r6, #4
 8002172:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002174:	6838      	ldr	r0, [r7, #0]
 8002176:	f002 fb25 	bl	80047c4 <USB_DevInit>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e014      	b.n	80021b6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d102      	bne.n	80021aa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f80a 	bl	80021be <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f002 fcc7 	bl	8004b42 <USB_DevDisconnect>

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021be <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021be:	b480      	push	{r7}
 80021c0:	b085      	sub	sp, #20
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f0:	f043 0303 	orr.w	r3, r3, #3
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a04      	ldr	r2, [pc, #16]	; (8002224 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002216:	6013      	str	r3, [r2, #0]
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40007000 	.word	0x40007000

08002228 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <HAL_PWREx_GetVoltageRange+0x18>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40007000 	.word	0x40007000

08002244 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002252:	d130      	bne.n	80022b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002254:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800225c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002260:	d038      	beq.n	80022d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002262:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800226a:	4a1e      	ldr	r2, [pc, #120]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002270:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2232      	movs	r2, #50	; 0x32
 8002278:	fb02 f303 	mul.w	r3, r2, r3
 800227c:	4a1b      	ldr	r2, [pc, #108]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	0c9b      	lsrs	r3, r3, #18
 8002284:	3301      	adds	r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002288:	e002      	b.n	8002290 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	3b01      	subs	r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002290:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229c:	d102      	bne.n	80022a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1f2      	bne.n	800228a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b0:	d110      	bne.n	80022d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e00f      	b.n	80022d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022b6:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c2:	d007      	beq.n	80022d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022c4:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022cc:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40007000 	.word	0x40007000
 80022e8:	20000000 	.word	0x20000000
 80022ec:	431bde83 	.word	0x431bde83

080022f0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_PWREx_EnableVddUSB+0x1c>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	4a04      	ldr	r2, [pc, #16]	; (800230c <HAL_PWREx_EnableVddUSB+0x1c>)
 80022fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022fe:	6053      	str	r3, [r2, #4]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40007000 	.word	0x40007000

08002310 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af02      	add	r7, sp, #8
 8002316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002318:	f7ff f8c8 	bl	80014ac <HAL_GetTick>
 800231c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e063      	b.n	80023f0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10b      	bne.n	800234c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7fe fdbf 	bl	8000ec0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002342:	f241 3188 	movw	r1, #5000	; 0x1388
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f858 	bl	80023fc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	3b01      	subs	r3, #1
 800235c:	021a      	lsls	r2, r3, #8
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	2120      	movs	r1, #32
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f850 	bl	8002418 <QSPI_WaitFlagStateUntilTimeout>
 8002378:	4603      	mov	r3, r0
 800237a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800237c:	7afb      	ldrb	r3, [r7, #11]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d131      	bne.n	80023e6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800238c:	f023 0310 	bic.w	r3, r3, #16
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6852      	ldr	r2, [r2, #4]
 8002394:	0611      	lsls	r1, r2, #24
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68d2      	ldr	r2, [r2, #12]
 800239a:	4311      	orrs	r1, r2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <HAL_QSPI_Init+0xe8>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6912      	ldr	r2, [r2, #16]
 80023b2:	0411      	lsls	r1, r2, #16
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6952      	ldr	r2, [r2, #20]
 80023b8:	4311      	orrs	r1, r2
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6992      	ldr	r2, [r2, #24]
 80023be:	4311      	orrs	r1, r2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	430b      	orrs	r3, r1
 80023c6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80023ee:	7afb      	ldrb	r3, [r7, #11]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	ffe0f8fe 	.word	0xffe0f8fe

080023fc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	4613      	mov	r3, r2
 8002426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002428:	e01a      	b.n	8002460 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002430:	d016      	beq.n	8002460 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002432:	f7ff f83b 	bl	80014ac <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	429a      	cmp	r2, r3
 8002440:	d302      	bcc.n	8002448 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10b      	bne.n	8002460 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2204      	movs	r2, #4
 800244c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002454:	f043 0201 	orr.w	r2, r3, #1
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e00e      	b.n	800247e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4013      	ands	r3, r2
 800246a:	2b00      	cmp	r3, #0
 800246c:	bf14      	ite	ne
 800246e:	2301      	movne	r3, #1
 8002470:	2300      	moveq	r3, #0
 8002472:	b2db      	uxtb	r3, r3
 8002474:	461a      	mov	r2, r3
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	429a      	cmp	r2, r3
 800247a:	d1d6      	bne.n	800242a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e3ca      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800249a:	4b97      	ldr	r3, [pc, #604]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024a4:	4b94      	ldr	r3, [pc, #592]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80e4 	beq.w	8002684 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d007      	beq.n	80024d2 <HAL_RCC_OscConfig+0x4a>
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	2b0c      	cmp	r3, #12
 80024c6:	f040 808b 	bne.w	80025e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	f040 8087 	bne.w	80025e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024d2:	4b89      	ldr	r3, [pc, #548]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <HAL_RCC_OscConfig+0x62>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e3a2      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1a      	ldr	r2, [r3, #32]
 80024ee:	4b82      	ldr	r3, [pc, #520]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d004      	beq.n	8002504 <HAL_RCC_OscConfig+0x7c>
 80024fa:	4b7f      	ldr	r3, [pc, #508]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002502:	e005      	b.n	8002510 <HAL_RCC_OscConfig+0x88>
 8002504:	4b7c      	ldr	r3, [pc, #496]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800250a:	091b      	lsrs	r3, r3, #4
 800250c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002510:	4293      	cmp	r3, r2
 8002512:	d223      	bcs.n	800255c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	4618      	mov	r0, r3
 800251a:	f000 fd55 	bl	8002fc8 <RCC_SetFlashLatencyFromMSIRange>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e383      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002528:	4b73      	ldr	r3, [pc, #460]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a72      	ldr	r2, [pc, #456]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 800252e:	f043 0308 	orr.w	r3, r3, #8
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	4b70      	ldr	r3, [pc, #448]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	496d      	ldr	r1, [pc, #436]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002546:	4b6c      	ldr	r3, [pc, #432]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	4968      	ldr	r1, [pc, #416]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002556:	4313      	orrs	r3, r2
 8002558:	604b      	str	r3, [r1, #4]
 800255a:	e025      	b.n	80025a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800255c:	4b66      	ldr	r3, [pc, #408]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a65      	ldr	r2, [pc, #404]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002562:	f043 0308 	orr.w	r3, r3, #8
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	4b63      	ldr	r3, [pc, #396]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4960      	ldr	r1, [pc, #384]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800257a:	4b5f      	ldr	r3, [pc, #380]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	495b      	ldr	r1, [pc, #364]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d109      	bne.n	80025a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	4618      	mov	r0, r3
 800259a:	f000 fd15 	bl	8002fc8 <RCC_SetFlashLatencyFromMSIRange>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e343      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025a8:	f000 fc4a 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b52      	ldr	r3, [pc, #328]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	091b      	lsrs	r3, r3, #4
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	4950      	ldr	r1, [pc, #320]	; (80026fc <HAL_RCC_OscConfig+0x274>)
 80025ba:	5ccb      	ldrb	r3, [r1, r3]
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	fa22 f303 	lsr.w	r3, r2, r3
 80025c4:	4a4e      	ldr	r2, [pc, #312]	; (8002700 <HAL_RCC_OscConfig+0x278>)
 80025c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025c8:	4b4e      	ldr	r3, [pc, #312]	; (8002704 <HAL_RCC_OscConfig+0x27c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe ff1d 	bl	800140c <HAL_InitTick>
 80025d2:	4603      	mov	r3, r0
 80025d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d052      	beq.n	8002682 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	e327      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d032      	beq.n	800264e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025e8:	4b43      	ldr	r3, [pc, #268]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a42      	ldr	r2, [pc, #264]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025f4:	f7fe ff5a 	bl	80014ac <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025fc:	f7fe ff56 	bl	80014ac <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e310      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800260e:	4b3a      	ldr	r3, [pc, #232]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800261a:	4b37      	ldr	r3, [pc, #220]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a36      	ldr	r2, [pc, #216]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002620:	f043 0308 	orr.w	r3, r3, #8
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	4b34      	ldr	r3, [pc, #208]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	4931      	ldr	r1, [pc, #196]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002634:	4313      	orrs	r3, r2
 8002636:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002638:	4b2f      	ldr	r3, [pc, #188]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	021b      	lsls	r3, r3, #8
 8002646:	492c      	ldr	r1, [pc, #176]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
 800264c:	e01a      	b.n	8002684 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800264e:	4b2a      	ldr	r3, [pc, #168]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a29      	ldr	r2, [pc, #164]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002654:	f023 0301 	bic.w	r3, r3, #1
 8002658:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800265a:	f7fe ff27 	bl	80014ac <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002662:	f7fe ff23 	bl	80014ac <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e2dd      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002674:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f0      	bne.n	8002662 <HAL_RCC_OscConfig+0x1da>
 8002680:	e000      	b.n	8002684 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002682:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d074      	beq.n	800277a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	2b08      	cmp	r3, #8
 8002694:	d005      	beq.n	80026a2 <HAL_RCC_OscConfig+0x21a>
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	2b0c      	cmp	r3, #12
 800269a:	d10e      	bne.n	80026ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d10b      	bne.n	80026ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d064      	beq.n	8002778 <HAL_RCC_OscConfig+0x2f0>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d160      	bne.n	8002778 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e2ba      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c2:	d106      	bne.n	80026d2 <HAL_RCC_OscConfig+0x24a>
 80026c4:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0b      	ldr	r2, [pc, #44]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80026ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	e026      	b.n	8002720 <HAL_RCC_OscConfig+0x298>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026da:	d115      	bne.n	8002708 <HAL_RCC_OscConfig+0x280>
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80026e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a02      	ldr	r2, [pc, #8]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80026ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	e014      	b.n	8002720 <HAL_RCC_OscConfig+0x298>
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	08005574 	.word	0x08005574
 8002700:	20000000 	.word	0x20000000
 8002704:	20000004 	.word	0x20000004
 8002708:	4ba0      	ldr	r3, [pc, #640]	; (800298c <HAL_RCC_OscConfig+0x504>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a9f      	ldr	r2, [pc, #636]	; (800298c <HAL_RCC_OscConfig+0x504>)
 800270e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4b9d      	ldr	r3, [pc, #628]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a9c      	ldr	r2, [pc, #624]	; (800298c <HAL_RCC_OscConfig+0x504>)
 800271a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d013      	beq.n	8002750 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7fe fec0 	bl	80014ac <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002730:	f7fe febc 	bl	80014ac <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e276      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002742:	4b92      	ldr	r3, [pc, #584]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x2a8>
 800274e:	e014      	b.n	800277a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7fe feac 	bl	80014ac <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002758:	f7fe fea8 	bl	80014ac <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	; 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e262      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800276a:	4b88      	ldr	r3, [pc, #544]	; (800298c <HAL_RCC_OscConfig+0x504>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x2d0>
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d060      	beq.n	8002848 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2b04      	cmp	r3, #4
 800278a:	d005      	beq.n	8002798 <HAL_RCC_OscConfig+0x310>
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2b0c      	cmp	r3, #12
 8002790:	d119      	bne.n	80027c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d116      	bne.n	80027c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002798:	4b7c      	ldr	r3, [pc, #496]	; (800298c <HAL_RCC_OscConfig+0x504>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_OscConfig+0x328>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e23f      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b0:	4b76      	ldr	r3, [pc, #472]	; (800298c <HAL_RCC_OscConfig+0x504>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	061b      	lsls	r3, r3, #24
 80027be:	4973      	ldr	r1, [pc, #460]	; (800298c <HAL_RCC_OscConfig+0x504>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027c4:	e040      	b.n	8002848 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d023      	beq.n	8002816 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ce:	4b6f      	ldr	r3, [pc, #444]	; (800298c <HAL_RCC_OscConfig+0x504>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a6e      	ldr	r2, [pc, #440]	; (800298c <HAL_RCC_OscConfig+0x504>)
 80027d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027da:	f7fe fe67 	bl	80014ac <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e2:	f7fe fe63 	bl	80014ac <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e21d      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f4:	4b65      	ldr	r3, [pc, #404]	; (800298c <HAL_RCC_OscConfig+0x504>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0f0      	beq.n	80027e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002800:	4b62      	ldr	r3, [pc, #392]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	061b      	lsls	r3, r3, #24
 800280e:	495f      	ldr	r1, [pc, #380]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
 8002814:	e018      	b.n	8002848 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002816:	4b5d      	ldr	r3, [pc, #372]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a5c      	ldr	r2, [pc, #368]	; (800298c <HAL_RCC_OscConfig+0x504>)
 800281c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002822:	f7fe fe43 	bl	80014ac <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282a:	f7fe fe3f 	bl	80014ac <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e1f9      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800283c:	4b53      	ldr	r3, [pc, #332]	; (800298c <HAL_RCC_OscConfig+0x504>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f0      	bne.n	800282a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d03c      	beq.n	80028ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01c      	beq.n	8002896 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800285c:	4b4b      	ldr	r3, [pc, #300]	; (800298c <HAL_RCC_OscConfig+0x504>)
 800285e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002862:	4a4a      	ldr	r2, [pc, #296]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286c:	f7fe fe1e 	bl	80014ac <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002874:	f7fe fe1a 	bl	80014ac <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e1d4      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002886:	4b41      	ldr	r3, [pc, #260]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0ef      	beq.n	8002874 <HAL_RCC_OscConfig+0x3ec>
 8002894:	e01b      	b.n	80028ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002896:	4b3d      	ldr	r3, [pc, #244]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002898:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800289c:	4a3b      	ldr	r2, [pc, #236]	; (800298c <HAL_RCC_OscConfig+0x504>)
 800289e:	f023 0301 	bic.w	r3, r3, #1
 80028a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a6:	f7fe fe01 	bl	80014ac <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ae:	f7fe fdfd 	bl	80014ac <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e1b7      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028c0:	4b32      	ldr	r3, [pc, #200]	; (800298c <HAL_RCC_OscConfig+0x504>)
 80028c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ef      	bne.n	80028ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 80a6 	beq.w	8002a28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028dc:	2300      	movs	r3, #0
 80028de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028e0:	4b2a      	ldr	r3, [pc, #168]	; (800298c <HAL_RCC_OscConfig+0x504>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10d      	bne.n	8002908 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ec:	4b27      	ldr	r3, [pc, #156]	; (800298c <HAL_RCC_OscConfig+0x504>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	4a26      	ldr	r2, [pc, #152]	; (800298c <HAL_RCC_OscConfig+0x504>)
 80028f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f6:	6593      	str	r3, [r2, #88]	; 0x58
 80028f8:	4b24      	ldr	r3, [pc, #144]	; (800298c <HAL_RCC_OscConfig+0x504>)
 80028fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002904:	2301      	movs	r3, #1
 8002906:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002908:	4b21      	ldr	r3, [pc, #132]	; (8002990 <HAL_RCC_OscConfig+0x508>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d118      	bne.n	8002946 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002914:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <HAL_RCC_OscConfig+0x508>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a1d      	ldr	r2, [pc, #116]	; (8002990 <HAL_RCC_OscConfig+0x508>)
 800291a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002920:	f7fe fdc4 	bl	80014ac <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002928:	f7fe fdc0 	bl	80014ac <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e17a      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800293a:	4b15      	ldr	r3, [pc, #84]	; (8002990 <HAL_RCC_OscConfig+0x508>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d108      	bne.n	8002960 <HAL_RCC_OscConfig+0x4d8>
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002954:	4a0d      	ldr	r2, [pc, #52]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800295e:	e029      	b.n	80029b4 <HAL_RCC_OscConfig+0x52c>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b05      	cmp	r3, #5
 8002966:	d115      	bne.n	8002994 <HAL_RCC_OscConfig+0x50c>
 8002968:	4b08      	ldr	r3, [pc, #32]	; (800298c <HAL_RCC_OscConfig+0x504>)
 800296a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296e:	4a07      	ldr	r2, [pc, #28]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002970:	f043 0304 	orr.w	r3, r3, #4
 8002974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <HAL_RCC_OscConfig+0x504>)
 800297a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297e:	4a03      	ldr	r2, [pc, #12]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002988:	e014      	b.n	80029b4 <HAL_RCC_OscConfig+0x52c>
 800298a:	bf00      	nop
 800298c:	40021000 	.word	0x40021000
 8002990:	40007000 	.word	0x40007000
 8002994:	4b9c      	ldr	r3, [pc, #624]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299a:	4a9b      	ldr	r2, [pc, #620]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 800299c:	f023 0301 	bic.w	r3, r3, #1
 80029a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029a4:	4b98      	ldr	r3, [pc, #608]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	4a97      	ldr	r2, [pc, #604]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 80029ac:	f023 0304 	bic.w	r3, r3, #4
 80029b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d016      	beq.n	80029ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029bc:	f7fe fd76 	bl	80014ac <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029c2:	e00a      	b.n	80029da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c4:	f7fe fd72 	bl	80014ac <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e12a      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029da:	4b8b      	ldr	r3, [pc, #556]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 80029dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0ed      	beq.n	80029c4 <HAL_RCC_OscConfig+0x53c>
 80029e8:	e015      	b.n	8002a16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ea:	f7fe fd5f 	bl	80014ac <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f2:	f7fe fd5b 	bl	80014ac <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e113      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a08:	4b7f      	ldr	r3, [pc, #508]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1ed      	bne.n	80029f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a16:	7ffb      	ldrb	r3, [r7, #31]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d105      	bne.n	8002a28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1c:	4b7a      	ldr	r3, [pc, #488]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a20:	4a79      	ldr	r2, [pc, #484]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a26:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80fe 	beq.w	8002c2e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	f040 80d0 	bne.w	8002bdc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a3c:	4b72      	ldr	r3, [pc, #456]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f003 0203 	and.w	r2, r3, #3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d130      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d127      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d11f      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a7c:	2a07      	cmp	r2, #7
 8002a7e:	bf14      	ite	ne
 8002a80:	2201      	movne	r2, #1
 8002a82:	2200      	moveq	r2, #0
 8002a84:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d113      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a94:	085b      	lsrs	r3, r3, #1
 8002a96:	3b01      	subs	r3, #1
 8002a98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d109      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	085b      	lsrs	r3, r3, #1
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d06e      	beq.n	8002b90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	2b0c      	cmp	r3, #12
 8002ab6:	d069      	beq.n	8002b8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ab8:	4b53      	ldr	r3, [pc, #332]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d105      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ac4:	4b50      	ldr	r3, [pc, #320]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0ad      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ad4:	4b4c      	ldr	r3, [pc, #304]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a4b      	ldr	r2, [pc, #300]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ade:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ae0:	f7fe fce4 	bl	80014ac <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae8:	f7fe fce0 	bl	80014ac <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e09a      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002afa:	4b43      	ldr	r3, [pc, #268]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b06:	4b40      	ldr	r3, [pc, #256]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	4b40      	ldr	r3, [pc, #256]	; (8002c0c <HAL_RCC_OscConfig+0x784>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b16:	3a01      	subs	r2, #1
 8002b18:	0112      	lsls	r2, r2, #4
 8002b1a:	4311      	orrs	r1, r2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b20:	0212      	lsls	r2, r2, #8
 8002b22:	4311      	orrs	r1, r2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b28:	0852      	lsrs	r2, r2, #1
 8002b2a:	3a01      	subs	r2, #1
 8002b2c:	0552      	lsls	r2, r2, #21
 8002b2e:	4311      	orrs	r1, r2
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b34:	0852      	lsrs	r2, r2, #1
 8002b36:	3a01      	subs	r2, #1
 8002b38:	0652      	lsls	r2, r2, #25
 8002b3a:	4311      	orrs	r1, r2
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b40:	0912      	lsrs	r2, r2, #4
 8002b42:	0452      	lsls	r2, r2, #17
 8002b44:	430a      	orrs	r2, r1
 8002b46:	4930      	ldr	r1, [pc, #192]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b4c:	4b2e      	ldr	r3, [pc, #184]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a2d      	ldr	r2, [pc, #180]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b58:	4b2b      	ldr	r3, [pc, #172]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4a2a      	ldr	r2, [pc, #168]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b64:	f7fe fca2 	bl	80014ac <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7fe fc9e 	bl	80014ac <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e058      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b7e:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b8a:	e050      	b.n	8002c2e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e04f      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b90:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d148      	bne.n	8002c2e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b9c:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a19      	ldr	r2, [pc, #100]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ba6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ba8:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4a16      	ldr	r2, [pc, #88]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bb4:	f7fe fc7a 	bl	80014ac <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7fe fc76 	bl	80014ac <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e030      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x734>
 8002bda:	e028      	b.n	8002c2e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	2b0c      	cmp	r3, #12
 8002be0:	d023      	beq.n	8002c2a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a08      	ldr	r2, [pc, #32]	; (8002c08 <HAL_RCC_OscConfig+0x780>)
 8002be8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bee:	f7fe fc5d 	bl	80014ac <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf4:	e00c      	b.n	8002c10 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf6:	f7fe fc59 	bl	80014ac <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d905      	bls.n	8002c10 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e013      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c10:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <HAL_RCC_OscConfig+0x7b0>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1ec      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_RCC_OscConfig+0x7b0>)
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	4905      	ldr	r1, [pc, #20]	; (8002c38 <HAL_RCC_OscConfig+0x7b0>)
 8002c22:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <HAL_RCC_OscConfig+0x7b4>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	60cb      	str	r3, [r1, #12]
 8002c28:	e001      	b.n	8002c2e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3720      	adds	r7, #32
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	feeefffc 	.word	0xfeeefffc

08002c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0e7      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c54:	4b75      	ldr	r3, [pc, #468]	; (8002e2c <HAL_RCC_ClockConfig+0x1ec>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d910      	bls.n	8002c84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c62:	4b72      	ldr	r3, [pc, #456]	; (8002e2c <HAL_RCC_ClockConfig+0x1ec>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 0207 	bic.w	r2, r3, #7
 8002c6a:	4970      	ldr	r1, [pc, #448]	; (8002e2c <HAL_RCC_ClockConfig+0x1ec>)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c72:	4b6e      	ldr	r3, [pc, #440]	; (8002e2c <HAL_RCC_ClockConfig+0x1ec>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d001      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0cf      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d010      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	4b66      	ldr	r3, [pc, #408]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d908      	bls.n	8002cb2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca0:	4b63      	ldr	r3, [pc, #396]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4960      	ldr	r1, [pc, #384]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d04c      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d107      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc6:	4b5a      	ldr	r3, [pc, #360]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d121      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e0a6      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d107      	bne.n	8002cee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cde:	4b54      	ldr	r3, [pc, #336]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d115      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e09a      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d107      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cf6:	4b4e      	ldr	r3, [pc, #312]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d109      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e08e      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d06:	4b4a      	ldr	r3, [pc, #296]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e086      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d16:	4b46      	ldr	r3, [pc, #280]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f023 0203 	bic.w	r2, r3, #3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	4943      	ldr	r1, [pc, #268]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d28:	f7fe fbc0 	bl	80014ac <HAL_GetTick>
 8002d2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d30:	f7fe fbbc 	bl	80014ac <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e06e      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d46:	4b3a      	ldr	r3, [pc, #232]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 020c 	and.w	r2, r3, #12
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d1eb      	bne.n	8002d30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d010      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	4b31      	ldr	r3, [pc, #196]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d208      	bcs.n	8002d86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d74:	4b2e      	ldr	r3, [pc, #184]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	492b      	ldr	r1, [pc, #172]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d86:	4b29      	ldr	r3, [pc, #164]	; (8002e2c <HAL_RCC_ClockConfig+0x1ec>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d210      	bcs.n	8002db6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d94:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <HAL_RCC_ClockConfig+0x1ec>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f023 0207 	bic.w	r2, r3, #7
 8002d9c:	4923      	ldr	r1, [pc, #140]	; (8002e2c <HAL_RCC_ClockConfig+0x1ec>)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da4:	4b21      	ldr	r3, [pc, #132]	; (8002e2c <HAL_RCC_ClockConfig+0x1ec>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d001      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e036      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d008      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc2:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	4918      	ldr	r1, [pc, #96]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d009      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002de0:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4910      	ldr	r1, [pc, #64]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002df4:	f000 f824 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	091b      	lsrs	r3, r3, #4
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	490b      	ldr	r1, [pc, #44]	; (8002e34 <HAL_RCC_ClockConfig+0x1f4>)
 8002e06:	5ccb      	ldrb	r3, [r1, r3]
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e10:	4a09      	ldr	r2, [pc, #36]	; (8002e38 <HAL_RCC_ClockConfig+0x1f8>)
 8002e12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e14:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <HAL_RCC_ClockConfig+0x1fc>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fe faf7 	bl	800140c <HAL_InitTick>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e22:	7afb      	ldrb	r3, [r7, #11]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40022000 	.word	0x40022000
 8002e30:	40021000 	.word	0x40021000
 8002e34:	08005574 	.word	0x08005574
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	20000004 	.word	0x20000004

08002e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b089      	sub	sp, #36	; 0x24
 8002e44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e4e:	4b3e      	ldr	r3, [pc, #248]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e58:	4b3b      	ldr	r3, [pc, #236]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0x34>
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	2b0c      	cmp	r3, #12
 8002e6c:	d121      	bne.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d11e      	bne.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e74:	4b34      	ldr	r3, [pc, #208]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d107      	bne.n	8002e90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e80:	4b31      	ldr	r3, [pc, #196]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e86:	0a1b      	lsrs	r3, r3, #8
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	e005      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e90:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e9c:	4a2b      	ldr	r2, [pc, #172]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10d      	bne.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eb0:	e00a      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d102      	bne.n	8002ebe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002eb8:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002eba:	61bb      	str	r3, [r7, #24]
 8002ebc:	e004      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ec4:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ec6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	2b0c      	cmp	r3, #12
 8002ecc:	d134      	bne.n	8002f38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ece:	4b1e      	ldr	r3, [pc, #120]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d003      	beq.n	8002ee6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d003      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0xac>
 8002ee4:	e005      	b.n	8002ef2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ee6:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ee8:	617b      	str	r3, [r7, #20]
      break;
 8002eea:	e005      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002eec:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eee:	617b      	str	r3, [r7, #20]
      break;
 8002ef0:	e002      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	617b      	str	r3, [r7, #20]
      break;
 8002ef6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ef8:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	091b      	lsrs	r3, r3, #4
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	3301      	adds	r3, #1
 8002f04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f06:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	0a1b      	lsrs	r3, r3, #8
 8002f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	fb03 f202 	mul.w	r2, r3, r2
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	0e5b      	lsrs	r3, r3, #25
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	3301      	adds	r3, #1
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f38:	69bb      	ldr	r3, [r7, #24]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3724      	adds	r7, #36	; 0x24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	0800558c 	.word	0x0800558c
 8002f50:	00f42400 	.word	0x00f42400
 8002f54:	007a1200 	.word	0x007a1200

08002f58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f5c:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	20000000 	.word	0x20000000

08002f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f74:	f7ff fff0 	bl	8002f58 <HAL_RCC_GetHCLKFreq>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	4904      	ldr	r1, [pc, #16]	; (8002f98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f86:	5ccb      	ldrb	r3, [r1, r3]
 8002f88:	f003 031f 	and.w	r3, r3, #31
 8002f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021000 	.word	0x40021000
 8002f98:	08005584 	.word	0x08005584

08002f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fa0:	f7ff ffda 	bl	8002f58 <HAL_RCC_GetHCLKFreq>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	0adb      	lsrs	r3, r3, #11
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	4904      	ldr	r1, [pc, #16]	; (8002fc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fb2:	5ccb      	ldrb	r3, [r1, r3]
 8002fb4:	f003 031f 	and.w	r3, r3, #31
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	08005584 	.word	0x08005584

08002fc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fd4:	4b2a      	ldr	r3, [pc, #168]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fe0:	f7ff f922 	bl	8002228 <HAL_PWREx_GetVoltageRange>
 8002fe4:	6178      	str	r0, [r7, #20]
 8002fe6:	e014      	b.n	8003012 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fe8:	4b25      	ldr	r3, [pc, #148]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fec:	4a24      	ldr	r2, [pc, #144]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ff4:	4b22      	ldr	r3, [pc, #136]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003000:	f7ff f912 	bl	8002228 <HAL_PWREx_GetVoltageRange>
 8003004:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003006:	4b1e      	ldr	r3, [pc, #120]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300a:	4a1d      	ldr	r2, [pc, #116]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800300c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003010:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003018:	d10b      	bne.n	8003032 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b80      	cmp	r3, #128	; 0x80
 800301e:	d919      	bls.n	8003054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2ba0      	cmp	r3, #160	; 0xa0
 8003024:	d902      	bls.n	800302c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003026:	2302      	movs	r3, #2
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	e013      	b.n	8003054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800302c:	2301      	movs	r3, #1
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	e010      	b.n	8003054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b80      	cmp	r3, #128	; 0x80
 8003036:	d902      	bls.n	800303e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003038:	2303      	movs	r3, #3
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	e00a      	b.n	8003054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b80      	cmp	r3, #128	; 0x80
 8003042:	d102      	bne.n	800304a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003044:	2302      	movs	r3, #2
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	e004      	b.n	8003054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b70      	cmp	r3, #112	; 0x70
 800304e:	d101      	bne.n	8003054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003050:	2301      	movs	r3, #1
 8003052:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003054:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f023 0207 	bic.w	r2, r3, #7
 800305c:	4909      	ldr	r1, [pc, #36]	; (8003084 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003064:	4b07      	ldr	r3, [pc, #28]	; (8003084 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	429a      	cmp	r2, r3
 8003070:	d001      	beq.n	8003076 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021000 	.word	0x40021000
 8003084:	40022000 	.word	0x40022000

08003088 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003090:	2300      	movs	r3, #0
 8003092:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003094:	2300      	movs	r3, #0
 8003096:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d041      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030ac:	d02a      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030b2:	d824      	bhi.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030b8:	d008      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030be:	d81e      	bhi.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00a      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80030c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030c8:	d010      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030ca:	e018      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030cc:	4b86      	ldr	r3, [pc, #536]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4a85      	ldr	r2, [pc, #532]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030d8:	e015      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3304      	adds	r3, #4
 80030de:	2100      	movs	r1, #0
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 facb 	bl	800367c <RCCEx_PLLSAI1_Config>
 80030e6:	4603      	mov	r3, r0
 80030e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030ea:	e00c      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3320      	adds	r3, #32
 80030f0:	2100      	movs	r1, #0
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fbb6 	bl	8003864 <RCCEx_PLLSAI2_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030fc:	e003      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	74fb      	strb	r3, [r7, #19]
      break;
 8003102:	e000      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003104:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003106:	7cfb      	ldrb	r3, [r7, #19]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10b      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800310c:	4b76      	ldr	r3, [pc, #472]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003112:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800311a:	4973      	ldr	r1, [pc, #460]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003122:	e001      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003124:	7cfb      	ldrb	r3, [r7, #19]
 8003126:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d041      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003138:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800313c:	d02a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800313e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003142:	d824      	bhi.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003144:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003148:	d008      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800314a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800314e:	d81e      	bhi.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00a      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003158:	d010      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800315a:	e018      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800315c:	4b62      	ldr	r3, [pc, #392]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4a61      	ldr	r2, [pc, #388]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003166:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003168:	e015      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3304      	adds	r3, #4
 800316e:	2100      	movs	r1, #0
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fa83 	bl	800367c <RCCEx_PLLSAI1_Config>
 8003176:	4603      	mov	r3, r0
 8003178:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800317a:	e00c      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3320      	adds	r3, #32
 8003180:	2100      	movs	r1, #0
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fb6e 	bl	8003864 <RCCEx_PLLSAI2_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800318c:	e003      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	74fb      	strb	r3, [r7, #19]
      break;
 8003192:	e000      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003196:	7cfb      	ldrb	r3, [r7, #19]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10b      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800319c:	4b52      	ldr	r3, [pc, #328]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031aa:	494f      	ldr	r1, [pc, #316]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031b2:	e001      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b4:	7cfb      	ldrb	r3, [r7, #19]
 80031b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80a0 	beq.w	8003306 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031c6:	2300      	movs	r3, #0
 80031c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031ca:	4b47      	ldr	r3, [pc, #284]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80031da:	2300      	movs	r3, #0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00d      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e0:	4b41      	ldr	r3, [pc, #260]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e4:	4a40      	ldr	r2, [pc, #256]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ea:	6593      	str	r3, [r2, #88]	; 0x58
 80031ec:	4b3e      	ldr	r3, [pc, #248]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031f8:	2301      	movs	r3, #1
 80031fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031fc:	4b3b      	ldr	r3, [pc, #236]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a3a      	ldr	r2, [pc, #232]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003206:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003208:	f7fe f950 	bl	80014ac <HAL_GetTick>
 800320c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800320e:	e009      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003210:	f7fe f94c 	bl	80014ac <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d902      	bls.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	74fb      	strb	r3, [r7, #19]
        break;
 8003222:	e005      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003224:	4b31      	ldr	r3, [pc, #196]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0ef      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003230:	7cfb      	ldrb	r3, [r7, #19]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d15c      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003236:	4b2c      	ldr	r3, [pc, #176]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003240:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01f      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	429a      	cmp	r2, r3
 8003252:	d019      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003254:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800325e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003260:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003266:	4a20      	ldr	r2, [pc, #128]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003270:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	4a1c      	ldr	r2, [pc, #112]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003280:	4a19      	ldr	r2, [pc, #100]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d016      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003292:	f7fe f90b 	bl	80014ac <HAL_GetTick>
 8003296:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003298:	e00b      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329a:	f7fe f907 	bl	80014ac <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d902      	bls.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	74fb      	strb	r3, [r7, #19]
            break;
 80032b0:	e006      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b2:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0ec      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80032c0:	7cfb      	ldrb	r3, [r7, #19]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032c6:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d6:	4904      	ldr	r1, [pc, #16]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032de:	e009      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032e0:	7cfb      	ldrb	r3, [r7, #19]
 80032e2:	74bb      	strb	r3, [r7, #18]
 80032e4:	e006      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80032e6:	bf00      	nop
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f0:	7cfb      	ldrb	r3, [r7, #19]
 80032f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032f4:	7c7b      	ldrb	r3, [r7, #17]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d105      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032fa:	4b9e      	ldr	r3, [pc, #632]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fe:	4a9d      	ldr	r2, [pc, #628]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003304:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003312:	4b98      	ldr	r3, [pc, #608]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003318:	f023 0203 	bic.w	r2, r3, #3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003320:	4994      	ldr	r1, [pc, #592]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00a      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003334:	4b8f      	ldr	r3, [pc, #572]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333a:	f023 020c 	bic.w	r2, r3, #12
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003342:	498c      	ldr	r1, [pc, #560]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003356:	4b87      	ldr	r3, [pc, #540]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	4983      	ldr	r1, [pc, #524]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003378:	4b7e      	ldr	r3, [pc, #504]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	497b      	ldr	r1, [pc, #492]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0310 	and.w	r3, r3, #16
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800339a:	4b76      	ldr	r3, [pc, #472]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a8:	4972      	ldr	r1, [pc, #456]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033bc:	4b6d      	ldr	r3, [pc, #436]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ca:	496a      	ldr	r1, [pc, #424]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033de:	4b65      	ldr	r3, [pc, #404]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ec:	4961      	ldr	r1, [pc, #388]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003400:	4b5c      	ldr	r3, [pc, #368]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003406:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340e:	4959      	ldr	r1, [pc, #356]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003422:	4b54      	ldr	r3, [pc, #336]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003428:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003430:	4950      	ldr	r1, [pc, #320]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003444:	4b4b      	ldr	r3, [pc, #300]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003452:	4948      	ldr	r1, [pc, #288]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003466:	4b43      	ldr	r3, [pc, #268]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003474:	493f      	ldr	r1, [pc, #252]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d028      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003488:	4b3a      	ldr	r3, [pc, #232]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003496:	4937      	ldr	r1, [pc, #220]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034a6:	d106      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034a8:	4b32      	ldr	r3, [pc, #200]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4a31      	ldr	r2, [pc, #196]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034b2:	60d3      	str	r3, [r2, #12]
 80034b4:	e011      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034be:	d10c      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3304      	adds	r3, #4
 80034c4:	2101      	movs	r1, #1
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 f8d8 	bl	800367c <RCCEx_PLLSAI1_Config>
 80034cc:	4603      	mov	r3, r0
 80034ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80034d6:	7cfb      	ldrb	r3, [r7, #19]
 80034d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d028      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034e6:	4b23      	ldr	r3, [pc, #140]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f4:	491f      	ldr	r1, [pc, #124]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003504:	d106      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003506:	4b1b      	ldr	r3, [pc, #108]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	4a1a      	ldr	r2, [pc, #104]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003510:	60d3      	str	r3, [r2, #12]
 8003512:	e011      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003518:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800351c:	d10c      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3304      	adds	r3, #4
 8003522:	2101      	movs	r1, #1
 8003524:	4618      	mov	r0, r3
 8003526:	f000 f8a9 	bl	800367c <RCCEx_PLLSAI1_Config>
 800352a:	4603      	mov	r3, r0
 800352c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800352e:	7cfb      	ldrb	r3, [r7, #19]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003534:	7cfb      	ldrb	r3, [r7, #19]
 8003536:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d02b      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003544:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003552:	4908      	ldr	r1, [pc, #32]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003562:	d109      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4a02      	ldr	r2, [pc, #8]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800356e:	60d3      	str	r3, [r2, #12]
 8003570:	e014      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003572:	bf00      	nop
 8003574:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003580:	d10c      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3304      	adds	r3, #4
 8003586:	2101      	movs	r1, #1
 8003588:	4618      	mov	r0, r3
 800358a:	f000 f877 	bl	800367c <RCCEx_PLLSAI1_Config>
 800358e:	4603      	mov	r3, r0
 8003590:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003592:	7cfb      	ldrb	r3, [r7, #19]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003598:	7cfb      	ldrb	r3, [r7, #19]
 800359a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d02f      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035a8:	4b2b      	ldr	r3, [pc, #172]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035b6:	4928      	ldr	r1, [pc, #160]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035c6:	d10d      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3304      	adds	r3, #4
 80035cc:	2102      	movs	r1, #2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 f854 	bl	800367c <RCCEx_PLLSAI1_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035d8:	7cfb      	ldrb	r3, [r7, #19]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d014      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035de:	7cfb      	ldrb	r3, [r7, #19]
 80035e0:	74bb      	strb	r3, [r7, #18]
 80035e2:	e011      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035ec:	d10c      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3320      	adds	r3, #32
 80035f2:	2102      	movs	r1, #2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 f935 	bl	8003864 <RCCEx_PLLSAI2_Config>
 80035fa:	4603      	mov	r3, r0
 80035fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035fe:	7cfb      	ldrb	r3, [r7, #19]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003604:	7cfb      	ldrb	r3, [r7, #19]
 8003606:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003614:	4b10      	ldr	r3, [pc, #64]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003622:	490d      	ldr	r1, [pc, #52]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00b      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003636:	4b08      	ldr	r3, [pc, #32]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003646:	4904      	ldr	r1, [pc, #16]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800364e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40021000 	.word	0x40021000

0800365c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a04      	ldr	r2, [pc, #16]	; (8003678 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003666:	f043 0304 	orr.w	r3, r3, #4
 800366a:	6013      	str	r3, [r2, #0]
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40021000 	.word	0x40021000

0800367c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800368a:	4b75      	ldr	r3, [pc, #468]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d018      	beq.n	80036c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003696:	4b72      	ldr	r3, [pc, #456]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f003 0203 	and.w	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d10d      	bne.n	80036c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
       ||
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d009      	beq.n	80036c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036ae:	4b6c      	ldr	r3, [pc, #432]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	091b      	lsrs	r3, r3, #4
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
       ||
 80036be:	429a      	cmp	r2, r3
 80036c0:	d047      	beq.n	8003752 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	73fb      	strb	r3, [r7, #15]
 80036c6:	e044      	b.n	8003752 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d018      	beq.n	8003702 <RCCEx_PLLSAI1_Config+0x86>
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d825      	bhi.n	8003720 <RCCEx_PLLSAI1_Config+0xa4>
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d002      	beq.n	80036de <RCCEx_PLLSAI1_Config+0x62>
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d009      	beq.n	80036f0 <RCCEx_PLLSAI1_Config+0x74>
 80036dc:	e020      	b.n	8003720 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036de:	4b60      	ldr	r3, [pc, #384]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d11d      	bne.n	8003726 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ee:	e01a      	b.n	8003726 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036f0:	4b5b      	ldr	r3, [pc, #364]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d116      	bne.n	800372a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003700:	e013      	b.n	800372a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003702:	4b57      	ldr	r3, [pc, #348]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10f      	bne.n	800372e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800370e:	4b54      	ldr	r3, [pc, #336]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d109      	bne.n	800372e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800371e:	e006      	b.n	800372e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
      break;
 8003724:	e004      	b.n	8003730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003726:	bf00      	nop
 8003728:	e002      	b.n	8003730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800372a:	bf00      	nop
 800372c:	e000      	b.n	8003730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800372e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003730:	7bfb      	ldrb	r3, [r7, #15]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10d      	bne.n	8003752 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003736:	4b4a      	ldr	r3, [pc, #296]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6819      	ldr	r1, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	3b01      	subs	r3, #1
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	430b      	orrs	r3, r1
 800374c:	4944      	ldr	r1, [pc, #272]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800374e:	4313      	orrs	r3, r2
 8003750:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d17d      	bne.n	8003854 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003758:	4b41      	ldr	r3, [pc, #260]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a40      	ldr	r2, [pc, #256]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003762:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003764:	f7fd fea2 	bl	80014ac <HAL_GetTick>
 8003768:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800376a:	e009      	b.n	8003780 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800376c:	f7fd fe9e 	bl	80014ac <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d902      	bls.n	8003780 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	73fb      	strb	r3, [r7, #15]
        break;
 800377e:	e005      	b.n	800378c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003780:	4b37      	ldr	r3, [pc, #220]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1ef      	bne.n	800376c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d160      	bne.n	8003854 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d111      	bne.n	80037bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003798:	4b31      	ldr	r3, [pc, #196]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6892      	ldr	r2, [r2, #8]
 80037a8:	0211      	lsls	r1, r2, #8
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	68d2      	ldr	r2, [r2, #12]
 80037ae:	0912      	lsrs	r2, r2, #4
 80037b0:	0452      	lsls	r2, r2, #17
 80037b2:	430a      	orrs	r2, r1
 80037b4:	492a      	ldr	r1, [pc, #168]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	610b      	str	r3, [r1, #16]
 80037ba:	e027      	b.n	800380c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d112      	bne.n	80037e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037c2:	4b27      	ldr	r3, [pc, #156]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80037ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6892      	ldr	r2, [r2, #8]
 80037d2:	0211      	lsls	r1, r2, #8
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6912      	ldr	r2, [r2, #16]
 80037d8:	0852      	lsrs	r2, r2, #1
 80037da:	3a01      	subs	r2, #1
 80037dc:	0552      	lsls	r2, r2, #21
 80037de:	430a      	orrs	r2, r1
 80037e0:	491f      	ldr	r1, [pc, #124]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	610b      	str	r3, [r1, #16]
 80037e6:	e011      	b.n	800380c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037e8:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6892      	ldr	r2, [r2, #8]
 80037f8:	0211      	lsls	r1, r2, #8
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6952      	ldr	r2, [r2, #20]
 80037fe:	0852      	lsrs	r2, r2, #1
 8003800:	3a01      	subs	r2, #1
 8003802:	0652      	lsls	r2, r2, #25
 8003804:	430a      	orrs	r2, r1
 8003806:	4916      	ldr	r1, [pc, #88]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003808:	4313      	orrs	r3, r2
 800380a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800380c:	4b14      	ldr	r3, [pc, #80]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a13      	ldr	r2, [pc, #76]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003812:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003816:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003818:	f7fd fe48 	bl	80014ac <HAL_GetTick>
 800381c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800381e:	e009      	b.n	8003834 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003820:	f7fd fe44 	bl	80014ac <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d902      	bls.n	8003834 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	73fb      	strb	r3, [r7, #15]
          break;
 8003832:	e005      	b.n	8003840 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0ef      	beq.n	8003820 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003846:	4b06      	ldr	r3, [pc, #24]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003848:	691a      	ldr	r2, [r3, #16]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	4904      	ldr	r1, [pc, #16]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003850:	4313      	orrs	r3, r2
 8003852:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003854:	7bfb      	ldrb	r3, [r7, #15]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000

08003864 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003872:	4b6a      	ldr	r3, [pc, #424]	; (8003a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d018      	beq.n	80038b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800387e:	4b67      	ldr	r3, [pc, #412]	; (8003a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f003 0203 	and.w	r2, r3, #3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d10d      	bne.n	80038aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
       ||
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003896:	4b61      	ldr	r3, [pc, #388]	; (8003a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	091b      	lsrs	r3, r3, #4
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
       ||
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d047      	beq.n	800393a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]
 80038ae:	e044      	b.n	800393a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d018      	beq.n	80038ea <RCCEx_PLLSAI2_Config+0x86>
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	d825      	bhi.n	8003908 <RCCEx_PLLSAI2_Config+0xa4>
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d002      	beq.n	80038c6 <RCCEx_PLLSAI2_Config+0x62>
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d009      	beq.n	80038d8 <RCCEx_PLLSAI2_Config+0x74>
 80038c4:	e020      	b.n	8003908 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038c6:	4b55      	ldr	r3, [pc, #340]	; (8003a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d11d      	bne.n	800390e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d6:	e01a      	b.n	800390e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038d8:	4b50      	ldr	r3, [pc, #320]	; (8003a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d116      	bne.n	8003912 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e8:	e013      	b.n	8003912 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038ea:	4b4c      	ldr	r3, [pc, #304]	; (8003a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10f      	bne.n	8003916 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038f6:	4b49      	ldr	r3, [pc, #292]	; (8003a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003906:	e006      	b.n	8003916 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
      break;
 800390c:	e004      	b.n	8003918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800390e:	bf00      	nop
 8003910:	e002      	b.n	8003918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003912:	bf00      	nop
 8003914:	e000      	b.n	8003918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003916:	bf00      	nop
    }

    if(status == HAL_OK)
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10d      	bne.n	800393a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800391e:	4b3f      	ldr	r3, [pc, #252]	; (8003a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6819      	ldr	r1, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	3b01      	subs	r3, #1
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	430b      	orrs	r3, r1
 8003934:	4939      	ldr	r1, [pc, #228]	; (8003a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003936:	4313      	orrs	r3, r2
 8003938:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d167      	bne.n	8003a10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003940:	4b36      	ldr	r3, [pc, #216]	; (8003a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a35      	ldr	r2, [pc, #212]	; (8003a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800394a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800394c:	f7fd fdae 	bl	80014ac <HAL_GetTick>
 8003950:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003952:	e009      	b.n	8003968 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003954:	f7fd fdaa 	bl	80014ac <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d902      	bls.n	8003968 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	73fb      	strb	r3, [r7, #15]
        break;
 8003966:	e005      	b.n	8003974 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003968:	4b2c      	ldr	r3, [pc, #176]	; (8003a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1ef      	bne.n	8003954 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d14a      	bne.n	8003a10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d111      	bne.n	80039a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003980:	4b26      	ldr	r3, [pc, #152]	; (8003a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6892      	ldr	r2, [r2, #8]
 8003990:	0211      	lsls	r1, r2, #8
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	68d2      	ldr	r2, [r2, #12]
 8003996:	0912      	lsrs	r2, r2, #4
 8003998:	0452      	lsls	r2, r2, #17
 800399a:	430a      	orrs	r2, r1
 800399c:	491f      	ldr	r1, [pc, #124]	; (8003a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	614b      	str	r3, [r1, #20]
 80039a2:	e011      	b.n	80039c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039a4:	4b1d      	ldr	r3, [pc, #116]	; (8003a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6892      	ldr	r2, [r2, #8]
 80039b4:	0211      	lsls	r1, r2, #8
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6912      	ldr	r2, [r2, #16]
 80039ba:	0852      	lsrs	r2, r2, #1
 80039bc:	3a01      	subs	r2, #1
 80039be:	0652      	lsls	r2, r2, #25
 80039c0:	430a      	orrs	r2, r1
 80039c2:	4916      	ldr	r1, [pc, #88]	; (8003a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039c8:	4b14      	ldr	r3, [pc, #80]	; (8003a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a13      	ldr	r2, [pc, #76]	; (8003a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d4:	f7fd fd6a 	bl	80014ac <HAL_GetTick>
 80039d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039da:	e009      	b.n	80039f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039dc:	f7fd fd66 	bl	80014ac <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d902      	bls.n	80039f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	73fb      	strb	r3, [r7, #15]
          break;
 80039ee:	e005      	b.n	80039fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039f0:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0ef      	beq.n	80039dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d106      	bne.n	8003a10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a02:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a04:	695a      	ldr	r2, [r3, #20]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	4904      	ldr	r1, [pc, #16]	; (8003a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40021000 	.word	0x40021000

08003a20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e095      	b.n	8003b5e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d108      	bne.n	8003a4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a42:	d009      	beq.n	8003a58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	61da      	str	r2, [r3, #28]
 8003a4a:	e005      	b.n	8003a58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fd fa68 	bl	8000f48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a98:	d902      	bls.n	8003aa0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	e002      	b.n	8003aa6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aa4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003aae:	d007      	beq.n	8003ac0 <HAL_SPI_Init+0xa0>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ab8:	d002      	beq.n	8003ac0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b02:	ea42 0103 	orr.w	r1, r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	0c1b      	lsrs	r3, r3, #16
 8003b1c:	f003 0204 	and.w	r2, r3, #4
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	f003 0310 	and.w	r3, r3, #16
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b3c:	ea42 0103 	orr.w	r1, r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e040      	b.n	8003bfa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d106      	bne.n	8003b8e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7fd fa21 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2224      	movs	r2, #36	; 0x24
 8003b92:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0201 	bic.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 fb6b 	bl	8004288 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f8b0 	bl	8003d18 <UART_SetConfig>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e01b      	b.n	8003bfa <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003be0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 0201 	orr.w	r2, r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fbea 	bl	80043cc <UART_CheckIdleState>
 8003bf8:	4603      	mov	r3, r0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b08a      	sub	sp, #40	; 0x28
 8003c06:	af02      	add	r7, sp, #8
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	603b      	str	r3, [r7, #0]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	d178      	bne.n	8003d0c <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <HAL_UART_Transmit+0x24>
 8003c20:	88fb      	ldrh	r3, [r7, #6]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e071      	b.n	8003d0e <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2221      	movs	r2, #33	; 0x21
 8003c36:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c38:	f7fd fc38 	bl	80014ac <HAL_GetTick>
 8003c3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	88fa      	ldrh	r2, [r7, #6]
 8003c42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	88fa      	ldrh	r2, [r7, #6]
 8003c4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c56:	d108      	bne.n	8003c6a <HAL_UART_Transmit+0x68>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d104      	bne.n	8003c6a <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	61bb      	str	r3, [r7, #24]
 8003c68:	e003      	b.n	8003c72 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c72:	e030      	b.n	8003cd6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2180      	movs	r1, #128	; 0x80
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fc4c 	bl	800451c <UART_WaitOnFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d004      	beq.n	8003c94 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e03c      	b.n	8003d0e <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10b      	bne.n	8003cb2 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	881a      	ldrh	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ca6:	b292      	uxth	r2, r2
 8003ca8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	3302      	adds	r3, #2
 8003cae:	61bb      	str	r3, [r7, #24]
 8003cb0:	e008      	b.n	8003cc4 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	781a      	ldrb	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	b292      	uxth	r2, r2
 8003cbc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1c8      	bne.n	8003c74 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	2140      	movs	r1, #64	; 0x40
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 fc15 	bl	800451c <UART_WaitOnFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d004      	beq.n	8003d02 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e005      	b.n	8003d0e <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2220      	movs	r2, #32
 8003d06:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	e000      	b.n	8003d0e <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003d0c:	2302      	movs	r3, #2
  }
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3720      	adds	r7, #32
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d1c:	b08a      	sub	sp, #40	; 0x28
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	431a      	orrs	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	4ba4      	ldr	r3, [pc, #656]	; (8003fd8 <UART_SetConfig+0x2c0>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d50:	430b      	orrs	r3, r1
 8003d52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a99      	ldr	r2, [pc, #612]	; (8003fdc <UART_SetConfig+0x2c4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d004      	beq.n	8003d84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d80:	4313      	orrs	r3, r2
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d94:	430a      	orrs	r2, r1
 8003d96:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a90      	ldr	r2, [pc, #576]	; (8003fe0 <UART_SetConfig+0x2c8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d126      	bne.n	8003df0 <UART_SetConfig+0xd8>
 8003da2:	4b90      	ldr	r3, [pc, #576]	; (8003fe4 <UART_SetConfig+0x2cc>)
 8003da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da8:	f003 0303 	and.w	r3, r3, #3
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d81b      	bhi.n	8003de8 <UART_SetConfig+0xd0>
 8003db0:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <UART_SetConfig+0xa0>)
 8003db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db6:	bf00      	nop
 8003db8:	08003dc9 	.word	0x08003dc9
 8003dbc:	08003dd9 	.word	0x08003dd9
 8003dc0:	08003dd1 	.word	0x08003dd1
 8003dc4:	08003de1 	.word	0x08003de1
 8003dc8:	2301      	movs	r3, #1
 8003dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dce:	e116      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd6:	e112      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003dd8:	2304      	movs	r3, #4
 8003dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dde:	e10e      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003de0:	2308      	movs	r3, #8
 8003de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de6:	e10a      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003de8:	2310      	movs	r3, #16
 8003dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dee:	e106      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a7c      	ldr	r2, [pc, #496]	; (8003fe8 <UART_SetConfig+0x2d0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d138      	bne.n	8003e6c <UART_SetConfig+0x154>
 8003dfa:	4b7a      	ldr	r3, [pc, #488]	; (8003fe4 <UART_SetConfig+0x2cc>)
 8003dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e00:	f003 030c 	and.w	r3, r3, #12
 8003e04:	2b0c      	cmp	r3, #12
 8003e06:	d82d      	bhi.n	8003e64 <UART_SetConfig+0x14c>
 8003e08:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <UART_SetConfig+0xf8>)
 8003e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0e:	bf00      	nop
 8003e10:	08003e45 	.word	0x08003e45
 8003e14:	08003e65 	.word	0x08003e65
 8003e18:	08003e65 	.word	0x08003e65
 8003e1c:	08003e65 	.word	0x08003e65
 8003e20:	08003e55 	.word	0x08003e55
 8003e24:	08003e65 	.word	0x08003e65
 8003e28:	08003e65 	.word	0x08003e65
 8003e2c:	08003e65 	.word	0x08003e65
 8003e30:	08003e4d 	.word	0x08003e4d
 8003e34:	08003e65 	.word	0x08003e65
 8003e38:	08003e65 	.word	0x08003e65
 8003e3c:	08003e65 	.word	0x08003e65
 8003e40:	08003e5d 	.word	0x08003e5d
 8003e44:	2300      	movs	r3, #0
 8003e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e4a:	e0d8      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e52:	e0d4      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003e54:	2304      	movs	r3, #4
 8003e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e5a:	e0d0      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003e5c:	2308      	movs	r3, #8
 8003e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e62:	e0cc      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003e64:	2310      	movs	r3, #16
 8003e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e6a:	e0c8      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a5e      	ldr	r2, [pc, #376]	; (8003fec <UART_SetConfig+0x2d4>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d125      	bne.n	8003ec2 <UART_SetConfig+0x1aa>
 8003e76:	4b5b      	ldr	r3, [pc, #364]	; (8003fe4 <UART_SetConfig+0x2cc>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e80:	2b30      	cmp	r3, #48	; 0x30
 8003e82:	d016      	beq.n	8003eb2 <UART_SetConfig+0x19a>
 8003e84:	2b30      	cmp	r3, #48	; 0x30
 8003e86:	d818      	bhi.n	8003eba <UART_SetConfig+0x1a2>
 8003e88:	2b20      	cmp	r3, #32
 8003e8a:	d00a      	beq.n	8003ea2 <UART_SetConfig+0x18a>
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d814      	bhi.n	8003eba <UART_SetConfig+0x1a2>
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <UART_SetConfig+0x182>
 8003e94:	2b10      	cmp	r3, #16
 8003e96:	d008      	beq.n	8003eaa <UART_SetConfig+0x192>
 8003e98:	e00f      	b.n	8003eba <UART_SetConfig+0x1a2>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ea0:	e0ad      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ea8:	e0a9      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003eaa:	2304      	movs	r3, #4
 8003eac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eb0:	e0a5      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003eb2:	2308      	movs	r3, #8
 8003eb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eb8:	e0a1      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003eba:	2310      	movs	r3, #16
 8003ebc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ec0:	e09d      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a4a      	ldr	r2, [pc, #296]	; (8003ff0 <UART_SetConfig+0x2d8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d125      	bne.n	8003f18 <UART_SetConfig+0x200>
 8003ecc:	4b45      	ldr	r3, [pc, #276]	; (8003fe4 <UART_SetConfig+0x2cc>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ed6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ed8:	d016      	beq.n	8003f08 <UART_SetConfig+0x1f0>
 8003eda:	2bc0      	cmp	r3, #192	; 0xc0
 8003edc:	d818      	bhi.n	8003f10 <UART_SetConfig+0x1f8>
 8003ede:	2b80      	cmp	r3, #128	; 0x80
 8003ee0:	d00a      	beq.n	8003ef8 <UART_SetConfig+0x1e0>
 8003ee2:	2b80      	cmp	r3, #128	; 0x80
 8003ee4:	d814      	bhi.n	8003f10 <UART_SetConfig+0x1f8>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <UART_SetConfig+0x1d8>
 8003eea:	2b40      	cmp	r3, #64	; 0x40
 8003eec:	d008      	beq.n	8003f00 <UART_SetConfig+0x1e8>
 8003eee:	e00f      	b.n	8003f10 <UART_SetConfig+0x1f8>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ef6:	e082      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003efe:	e07e      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003f00:	2304      	movs	r3, #4
 8003f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f06:	e07a      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003f08:	2308      	movs	r3, #8
 8003f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f0e:	e076      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003f10:	2310      	movs	r3, #16
 8003f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f16:	e072      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a35      	ldr	r2, [pc, #212]	; (8003ff4 <UART_SetConfig+0x2dc>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d12a      	bne.n	8003f78 <UART_SetConfig+0x260>
 8003f22:	4b30      	ldr	r3, [pc, #192]	; (8003fe4 <UART_SetConfig+0x2cc>)
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f30:	d01a      	beq.n	8003f68 <UART_SetConfig+0x250>
 8003f32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f36:	d81b      	bhi.n	8003f70 <UART_SetConfig+0x258>
 8003f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f3c:	d00c      	beq.n	8003f58 <UART_SetConfig+0x240>
 8003f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f42:	d815      	bhi.n	8003f70 <UART_SetConfig+0x258>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <UART_SetConfig+0x238>
 8003f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4c:	d008      	beq.n	8003f60 <UART_SetConfig+0x248>
 8003f4e:	e00f      	b.n	8003f70 <UART_SetConfig+0x258>
 8003f50:	2300      	movs	r3, #0
 8003f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f56:	e052      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f5e:	e04e      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003f60:	2304      	movs	r3, #4
 8003f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f66:	e04a      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003f68:	2308      	movs	r3, #8
 8003f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f6e:	e046      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003f70:	2310      	movs	r3, #16
 8003f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f76:	e042      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a17      	ldr	r2, [pc, #92]	; (8003fdc <UART_SetConfig+0x2c4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d13a      	bne.n	8003ff8 <UART_SetConfig+0x2e0>
 8003f82:	4b18      	ldr	r3, [pc, #96]	; (8003fe4 <UART_SetConfig+0x2cc>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f90:	d01a      	beq.n	8003fc8 <UART_SetConfig+0x2b0>
 8003f92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f96:	d81b      	bhi.n	8003fd0 <UART_SetConfig+0x2b8>
 8003f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f9c:	d00c      	beq.n	8003fb8 <UART_SetConfig+0x2a0>
 8003f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa2:	d815      	bhi.n	8003fd0 <UART_SetConfig+0x2b8>
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <UART_SetConfig+0x298>
 8003fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fac:	d008      	beq.n	8003fc0 <UART_SetConfig+0x2a8>
 8003fae:	e00f      	b.n	8003fd0 <UART_SetConfig+0x2b8>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fb6:	e022      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fbe:	e01e      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003fc0:	2304      	movs	r3, #4
 8003fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fc6:	e01a      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003fc8:	2308      	movs	r3, #8
 8003fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fce:	e016      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fd6:	e012      	b.n	8003ffe <UART_SetConfig+0x2e6>
 8003fd8:	efff69f3 	.word	0xefff69f3
 8003fdc:	40008000 	.word	0x40008000
 8003fe0:	40013800 	.word	0x40013800
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	40004400 	.word	0x40004400
 8003fec:	40004800 	.word	0x40004800
 8003ff0:	40004c00 	.word	0x40004c00
 8003ff4:	40005000 	.word	0x40005000
 8003ff8:	2310      	movs	r3, #16
 8003ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a9f      	ldr	r2, [pc, #636]	; (8004280 <UART_SetConfig+0x568>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d17a      	bne.n	80040fe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004008:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800400c:	2b08      	cmp	r3, #8
 800400e:	d824      	bhi.n	800405a <UART_SetConfig+0x342>
 8004010:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <UART_SetConfig+0x300>)
 8004012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004016:	bf00      	nop
 8004018:	0800403d 	.word	0x0800403d
 800401c:	0800405b 	.word	0x0800405b
 8004020:	08004045 	.word	0x08004045
 8004024:	0800405b 	.word	0x0800405b
 8004028:	0800404b 	.word	0x0800404b
 800402c:	0800405b 	.word	0x0800405b
 8004030:	0800405b 	.word	0x0800405b
 8004034:	0800405b 	.word	0x0800405b
 8004038:	08004053 	.word	0x08004053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800403c:	f7fe ff98 	bl	8002f70 <HAL_RCC_GetPCLK1Freq>
 8004040:	61f8      	str	r0, [r7, #28]
        break;
 8004042:	e010      	b.n	8004066 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004044:	4b8f      	ldr	r3, [pc, #572]	; (8004284 <UART_SetConfig+0x56c>)
 8004046:	61fb      	str	r3, [r7, #28]
        break;
 8004048:	e00d      	b.n	8004066 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800404a:	f7fe fef9 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 800404e:	61f8      	str	r0, [r7, #28]
        break;
 8004050:	e009      	b.n	8004066 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004056:	61fb      	str	r3, [r7, #28]
        break;
 8004058:	e005      	b.n	8004066 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004064:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 80fb 	beq.w	8004264 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	4413      	add	r3, r2
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	429a      	cmp	r2, r3
 800407c:	d305      	bcc.n	800408a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	429a      	cmp	r2, r3
 8004088:	d903      	bls.n	8004092 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004090:	e0e8      	b.n	8004264 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	2200      	movs	r2, #0
 8004096:	461c      	mov	r4, r3
 8004098:	4615      	mov	r5, r2
 800409a:	f04f 0200 	mov.w	r2, #0
 800409e:	f04f 0300 	mov.w	r3, #0
 80040a2:	022b      	lsls	r3, r5, #8
 80040a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80040a8:	0222      	lsls	r2, r4, #8
 80040aa:	68f9      	ldr	r1, [r7, #12]
 80040ac:	6849      	ldr	r1, [r1, #4]
 80040ae:	0849      	lsrs	r1, r1, #1
 80040b0:	2000      	movs	r0, #0
 80040b2:	4688      	mov	r8, r1
 80040b4:	4681      	mov	r9, r0
 80040b6:	eb12 0a08 	adds.w	sl, r2, r8
 80040ba:	eb43 0b09 	adc.w	fp, r3, r9
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	603b      	str	r3, [r7, #0]
 80040c6:	607a      	str	r2, [r7, #4]
 80040c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040cc:	4650      	mov	r0, sl
 80040ce:	4659      	mov	r1, fp
 80040d0:	f7fc f8d6 	bl	8000280 <__aeabi_uldivmod>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4613      	mov	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040e2:	d308      	bcc.n	80040f6 <UART_SetConfig+0x3de>
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040ea:	d204      	bcs.n	80040f6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	60da      	str	r2, [r3, #12]
 80040f4:	e0b6      	b.n	8004264 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040fc:	e0b2      	b.n	8004264 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004106:	d15e      	bne.n	80041c6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004108:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800410c:	2b08      	cmp	r3, #8
 800410e:	d828      	bhi.n	8004162 <UART_SetConfig+0x44a>
 8004110:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <UART_SetConfig+0x400>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	0800413d 	.word	0x0800413d
 800411c:	08004145 	.word	0x08004145
 8004120:	0800414d 	.word	0x0800414d
 8004124:	08004163 	.word	0x08004163
 8004128:	08004153 	.word	0x08004153
 800412c:	08004163 	.word	0x08004163
 8004130:	08004163 	.word	0x08004163
 8004134:	08004163 	.word	0x08004163
 8004138:	0800415b 	.word	0x0800415b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800413c:	f7fe ff18 	bl	8002f70 <HAL_RCC_GetPCLK1Freq>
 8004140:	61f8      	str	r0, [r7, #28]
        break;
 8004142:	e014      	b.n	800416e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004144:	f7fe ff2a 	bl	8002f9c <HAL_RCC_GetPCLK2Freq>
 8004148:	61f8      	str	r0, [r7, #28]
        break;
 800414a:	e010      	b.n	800416e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800414c:	4b4d      	ldr	r3, [pc, #308]	; (8004284 <UART_SetConfig+0x56c>)
 800414e:	61fb      	str	r3, [r7, #28]
        break;
 8004150:	e00d      	b.n	800416e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004152:	f7fe fe75 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8004156:	61f8      	str	r0, [r7, #28]
        break;
 8004158:	e009      	b.n	800416e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800415a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800415e:	61fb      	str	r3, [r7, #28]
        break;
 8004160:	e005      	b.n	800416e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800416c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d077      	beq.n	8004264 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	005a      	lsls	r2, r3, #1
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	085b      	lsrs	r3, r3, #1
 800417e:	441a      	add	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	fbb2 f3f3 	udiv	r3, r2, r3
 8004188:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2b0f      	cmp	r3, #15
 800418e:	d916      	bls.n	80041be <UART_SetConfig+0x4a6>
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004196:	d212      	bcs.n	80041be <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	b29b      	uxth	r3, r3
 800419c:	f023 030f 	bic.w	r3, r3, #15
 80041a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	085b      	lsrs	r3, r3, #1
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	8afb      	ldrh	r3, [r7, #22]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	8afa      	ldrh	r2, [r7, #22]
 80041ba:	60da      	str	r2, [r3, #12]
 80041bc:	e052      	b.n	8004264 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041c4:	e04e      	b.n	8004264 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d827      	bhi.n	800421e <UART_SetConfig+0x506>
 80041ce:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <UART_SetConfig+0x4bc>)
 80041d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d4:	080041f9 	.word	0x080041f9
 80041d8:	08004201 	.word	0x08004201
 80041dc:	08004209 	.word	0x08004209
 80041e0:	0800421f 	.word	0x0800421f
 80041e4:	0800420f 	.word	0x0800420f
 80041e8:	0800421f 	.word	0x0800421f
 80041ec:	0800421f 	.word	0x0800421f
 80041f0:	0800421f 	.word	0x0800421f
 80041f4:	08004217 	.word	0x08004217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f8:	f7fe feba 	bl	8002f70 <HAL_RCC_GetPCLK1Freq>
 80041fc:	61f8      	str	r0, [r7, #28]
        break;
 80041fe:	e014      	b.n	800422a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004200:	f7fe fecc 	bl	8002f9c <HAL_RCC_GetPCLK2Freq>
 8004204:	61f8      	str	r0, [r7, #28]
        break;
 8004206:	e010      	b.n	800422a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004208:	4b1e      	ldr	r3, [pc, #120]	; (8004284 <UART_SetConfig+0x56c>)
 800420a:	61fb      	str	r3, [r7, #28]
        break;
 800420c:	e00d      	b.n	800422a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800420e:	f7fe fe17 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8004212:	61f8      	str	r0, [r7, #28]
        break;
 8004214:	e009      	b.n	800422a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800421a:	61fb      	str	r3, [r7, #28]
        break;
 800421c:	e005      	b.n	800422a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004228:	bf00      	nop
    }

    if (pclk != 0U)
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d019      	beq.n	8004264 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	085a      	lsrs	r2, r3, #1
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	441a      	add	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004242:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	2b0f      	cmp	r3, #15
 8004248:	d909      	bls.n	800425e <UART_SetConfig+0x546>
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004250:	d205      	bcs.n	800425e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60da      	str	r2, [r3, #12]
 800425c:	e002      	b.n	8004264 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004270:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004274:	4618      	mov	r0, r3
 8004276:	3728      	adds	r7, #40	; 0x28
 8004278:	46bd      	mov	sp, r7
 800427a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800427e:	bf00      	nop
 8004280:	40008000 	.word	0x40008000
 8004284:	00f42400 	.word	0x00f42400

08004288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01a      	beq.n	800439e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004386:	d10a      	bne.n	800439e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	605a      	str	r2, [r3, #4]
  }
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b098      	sub	sp, #96	; 0x60
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043dc:	f7fd f866 	bl	80014ac <HAL_GetTick>
 80043e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d12e      	bne.n	800444e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043f8:	2200      	movs	r2, #0
 80043fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f88c 	bl	800451c <UART_WaitOnFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d021      	beq.n	800444e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800441e:	653b      	str	r3, [r7, #80]	; 0x50
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004428:	647b      	str	r3, [r7, #68]	; 0x44
 800442a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800442e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e6      	bne.n	800440a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e062      	b.n	8004514 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b04      	cmp	r3, #4
 800445a:	d149      	bne.n	80044f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800445c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004464:	2200      	movs	r2, #0
 8004466:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f856 	bl	800451c <UART_WaitOnFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d03c      	beq.n	80044f0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	e853 3f00 	ldrex	r3, [r3]
 8004482:	623b      	str	r3, [r7, #32]
   return(result);
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800448a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004494:	633b      	str	r3, [r7, #48]	; 0x30
 8004496:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004498:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800449a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e6      	bne.n	8004476 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3308      	adds	r3, #8
 80044ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0301 	bic.w	r3, r3, #1
 80044be:	64bb      	str	r3, [r7, #72]	; 0x48
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3308      	adds	r3, #8
 80044c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044c8:	61fa      	str	r2, [r7, #28]
 80044ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	69b9      	ldr	r1, [r7, #24]
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	617b      	str	r3, [r7, #20]
   return(result);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e5      	bne.n	80044a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2220      	movs	r2, #32
 80044e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e011      	b.n	8004514 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3758      	adds	r7, #88	; 0x58
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	4613      	mov	r3, r2
 800452a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800452c:	e049      	b.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004534:	d045      	beq.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004536:	f7fc ffb9 	bl	80014ac <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	429a      	cmp	r2, r3
 8004544:	d302      	bcc.n	800454c <UART_WaitOnFlagUntilTimeout+0x30>
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e048      	b.n	80045e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	2b00      	cmp	r3, #0
 800455c:	d031      	beq.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b08      	cmp	r3, #8
 800456a:	d110      	bne.n	800458e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2208      	movs	r2, #8
 8004572:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f838 	bl	80045ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2208      	movs	r2, #8
 800457e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e029      	b.n	80045e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800459c:	d111      	bne.n	80045c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f81e 	bl	80045ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e00f      	b.n	80045e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69da      	ldr	r2, [r3, #28]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4013      	ands	r3, r2
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	bf0c      	ite	eq
 80045d2:	2301      	moveq	r3, #1
 80045d4:	2300      	movne	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	79fb      	ldrb	r3, [r7, #7]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d0a6      	beq.n	800452e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b095      	sub	sp, #84	; 0x54
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fa:	e853 3f00 	ldrex	r3, [r3]
 80045fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	461a      	mov	r2, r3
 800460e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004610:	643b      	str	r3, [r7, #64]	; 0x40
 8004612:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004616:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004618:	e841 2300 	strex	r3, r2, [r1]
 800461c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800461e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e6      	bne.n	80045f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3308      	adds	r3, #8
 800462a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	61fb      	str	r3, [r7, #28]
   return(result);
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f023 0301 	bic.w	r3, r3, #1
 800463a:	64bb      	str	r3, [r7, #72]	; 0x48
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3308      	adds	r3, #8
 8004642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004644:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004646:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800464a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e5      	bne.n	8004624 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465c:	2b01      	cmp	r3, #1
 800465e:	d118      	bne.n	8004692 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	e853 3f00 	ldrex	r3, [r3]
 800466c:	60bb      	str	r3, [r7, #8]
   return(result);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f023 0310 	bic.w	r3, r3, #16
 8004674:	647b      	str	r3, [r7, #68]	; 0x44
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800467e:	61bb      	str	r3, [r7, #24]
 8004680:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	6979      	ldr	r1, [r7, #20]
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	e841 2300 	strex	r3, r2, [r1]
 800468a:	613b      	str	r3, [r7, #16]
   return(result);
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e6      	bne.n	8004660 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2220      	movs	r2, #32
 8004696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80046a6:	bf00      	nop
 80046a8:	3754      	adds	r7, #84	; 0x54
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046b2:	b084      	sub	sp, #16
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	f107 001c 	add.w	r0, r7, #28
 80046c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 fa65 	bl	8004ba0 <USB_CoreReset>
 80046d6:	4603      	mov	r3, r0
 80046d8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80046da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d106      	bne.n	80046ee <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	639a      	str	r2, [r3, #56]	; 0x38
 80046ec:	e005      	b.n	80046fa <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004706:	b004      	add	sp, #16
 8004708:	4770      	bx	lr

0800470a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f023 0201 	bic.w	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d115      	bne.n	800477a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800475a:	2001      	movs	r0, #1
 800475c:	f7fc feb2 	bl	80014c4 <HAL_Delay>
      ms++;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	3301      	adds	r3, #1
 8004764:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fa0c 	bl	8004b84 <USB_GetMode>
 800476c:	4603      	mov	r3, r0
 800476e:	2b01      	cmp	r3, #1
 8004770:	d01e      	beq.n	80047b0 <USB_SetCurrentMode+0x84>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2b31      	cmp	r3, #49	; 0x31
 8004776:	d9f0      	bls.n	800475a <USB_SetCurrentMode+0x2e>
 8004778:	e01a      	b.n	80047b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800477a:	78fb      	ldrb	r3, [r7, #3]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d115      	bne.n	80047ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800478c:	2001      	movs	r0, #1
 800478e:	f7fc fe99 	bl	80014c4 <HAL_Delay>
      ms++;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3301      	adds	r3, #1
 8004796:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f9f3 	bl	8004b84 <USB_GetMode>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d005      	beq.n	80047b0 <USB_SetCurrentMode+0x84>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b31      	cmp	r3, #49	; 0x31
 80047a8:	d9f0      	bls.n	800478c <USB_SetCurrentMode+0x60>
 80047aa:	e001      	b.n	80047b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e005      	b.n	80047bc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b32      	cmp	r3, #50	; 0x32
 80047b4:	d101      	bne.n	80047ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047c4:	b084      	sub	sp, #16
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80047d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047de:	2300      	movs	r3, #0
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	e009      	b.n	80047f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	3340      	adds	r3, #64	; 0x40
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	2200      	movs	r2, #0
 80047f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	3301      	adds	r3, #1
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	2b0e      	cmp	r3, #14
 80047fc:	d9f2      	bls.n	80047e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80047fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d11c      	bne.n	800483e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004812:	f043 0302 	orr.w	r3, r3, #2
 8004816:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	e005      	b.n	800484a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004842:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004850:	461a      	mov	r2, r3
 8004852:	2300      	movs	r3, #0
 8004854:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004856:	2103      	movs	r1, #3
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f959 	bl	8004b10 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800485e:	2110      	movs	r1, #16
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f8f1 	bl	8004a48 <USB_FlushTxFifo>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f91d 	bl	8004ab0 <USB_FlushRxFifo>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004886:	461a      	mov	r2, r3
 8004888:	2300      	movs	r3, #0
 800488a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004892:	461a      	mov	r2, r3
 8004894:	2300      	movs	r3, #0
 8004896:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489e:	461a      	mov	r2, r3
 80048a0:	2300      	movs	r3, #0
 80048a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048a4:	2300      	movs	r3, #0
 80048a6:	613b      	str	r3, [r7, #16]
 80048a8:	e043      	b.n	8004932 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048c0:	d118      	bne.n	80048f4 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10a      	bne.n	80048de <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d4:	461a      	mov	r2, r3
 80048d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	e013      	b.n	8004906 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ea:	461a      	mov	r2, r3
 80048ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	e008      	b.n	8004906 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004900:	461a      	mov	r2, r3
 8004902:	2300      	movs	r3, #0
 8004904:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004912:	461a      	mov	r2, r3
 8004914:	2300      	movs	r3, #0
 8004916:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4413      	add	r3, r2
 8004920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004924:	461a      	mov	r2, r3
 8004926:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800492a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	3301      	adds	r3, #1
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	429a      	cmp	r2, r3
 8004938:	d3b7      	bcc.n	80048aa <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800493a:	2300      	movs	r3, #0
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	e043      	b.n	80049c8 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004952:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004956:	d118      	bne.n	800498a <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10a      	bne.n	8004974 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496a:	461a      	mov	r2, r3
 800496c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	e013      	b.n	800499c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004980:	461a      	mov	r2, r3
 8004982:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	e008      	b.n	800499c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004996:	461a      	mov	r2, r3
 8004998:	2300      	movs	r3, #0
 800499a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a8:	461a      	mov	r2, r3
 80049aa:	2300      	movs	r3, #0
 80049ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ba:	461a      	mov	r2, r3
 80049bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	3301      	adds	r3, #1
 80049c6:	613b      	str	r3, [r7, #16]
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d3b7      	bcc.n	8004940 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80049f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	f043 0210 	orr.w	r2, r3, #16
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699a      	ldr	r2, [r3, #24]
 8004a02:	4b10      	ldr	r3, [pc, #64]	; (8004a44 <USB_DevInit+0x280>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	f043 0208 	orr.w	r2, r3, #8
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d107      	bne.n	8004a32 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a2a:	f043 0304 	orr.w	r3, r3, #4
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a3e:	b004      	add	sp, #16
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	803c3800 	.word	0x803c3800

08004a48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4a13      	ldr	r2, [pc, #76]	; (8004aac <USB_FlushTxFifo+0x64>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d901      	bls.n	8004a68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e01b      	b.n	8004aa0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	daf2      	bge.n	8004a56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	019b      	lsls	r3, r3, #6
 8004a78:	f043 0220 	orr.w	r2, r3, #32
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	3301      	adds	r3, #1
 8004a84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4a08      	ldr	r2, [pc, #32]	; (8004aac <USB_FlushTxFifo+0x64>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e006      	b.n	8004aa0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b20      	cmp	r3, #32
 8004a9c:	d0f0      	beq.n	8004a80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	00030d40 	.word	0x00030d40

08004ab0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4a11      	ldr	r2, [pc, #68]	; (8004b0c <USB_FlushRxFifo+0x5c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d901      	bls.n	8004ace <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e018      	b.n	8004b00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	daf2      	bge.n	8004abc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2210      	movs	r2, #16
 8004ade:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4a08      	ldr	r2, [pc, #32]	; (8004b0c <USB_FlushRxFifo+0x5c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d901      	bls.n	8004af2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e006      	b.n	8004b00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	2b10      	cmp	r3, #16
 8004afc:	d0f0      	beq.n	8004ae0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	00030d40 	.word	0x00030d40

08004b10 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	68f9      	ldr	r1, [r7, #12]
 8004b2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b30:	4313      	orrs	r3, r2
 8004b32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b085      	sub	sp, #20
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b5c:	f023 0303 	bic.w	r3, r3, #3
 8004b60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b70:	f043 0302 	orr.w	r3, r3, #2
 8004b74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	f003 0301 	and.w	r3, r3, #1
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4a13      	ldr	r2, [pc, #76]	; (8004c04 <USB_CoreReset+0x64>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d901      	bls.n	8004bbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e01b      	b.n	8004bf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	daf2      	bge.n	8004bac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f043 0201 	orr.w	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4a09      	ldr	r2, [pc, #36]	; (8004c04 <USB_CoreReset+0x64>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d901      	bls.n	8004be8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e006      	b.n	8004bf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d0f0      	beq.n	8004bd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	00030d40 	.word	0x00030d40

08004c08 <siprintf>:
 8004c08:	b40e      	push	{r1, r2, r3}
 8004c0a:	b500      	push	{lr}
 8004c0c:	b09c      	sub	sp, #112	; 0x70
 8004c0e:	ab1d      	add	r3, sp, #116	; 0x74
 8004c10:	9002      	str	r0, [sp, #8]
 8004c12:	9006      	str	r0, [sp, #24]
 8004c14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c18:	4809      	ldr	r0, [pc, #36]	; (8004c40 <siprintf+0x38>)
 8004c1a:	9107      	str	r1, [sp, #28]
 8004c1c:	9104      	str	r1, [sp, #16]
 8004c1e:	4909      	ldr	r1, [pc, #36]	; (8004c44 <siprintf+0x3c>)
 8004c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c24:	9105      	str	r1, [sp, #20]
 8004c26:	6800      	ldr	r0, [r0, #0]
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	a902      	add	r1, sp, #8
 8004c2c:	f000 f89a 	bl	8004d64 <_svfiprintf_r>
 8004c30:	9b02      	ldr	r3, [sp, #8]
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	b01c      	add	sp, #112	; 0x70
 8004c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c3c:	b003      	add	sp, #12
 8004c3e:	4770      	bx	lr
 8004c40:	20000058 	.word	0x20000058
 8004c44:	ffff0208 	.word	0xffff0208

08004c48 <memset>:
 8004c48:	4402      	add	r2, r0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d100      	bne.n	8004c52 <memset+0xa>
 8004c50:	4770      	bx	lr
 8004c52:	f803 1b01 	strb.w	r1, [r3], #1
 8004c56:	e7f9      	b.n	8004c4c <memset+0x4>

08004c58 <__errno>:
 8004c58:	4b01      	ldr	r3, [pc, #4]	; (8004c60 <__errno+0x8>)
 8004c5a:	6818      	ldr	r0, [r3, #0]
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	20000058 	.word	0x20000058

08004c64 <__libc_init_array>:
 8004c64:	b570      	push	{r4, r5, r6, lr}
 8004c66:	4d0d      	ldr	r5, [pc, #52]	; (8004c9c <__libc_init_array+0x38>)
 8004c68:	4c0d      	ldr	r4, [pc, #52]	; (8004ca0 <__libc_init_array+0x3c>)
 8004c6a:	1b64      	subs	r4, r4, r5
 8004c6c:	10a4      	asrs	r4, r4, #2
 8004c6e:	2600      	movs	r6, #0
 8004c70:	42a6      	cmp	r6, r4
 8004c72:	d109      	bne.n	8004c88 <__libc_init_array+0x24>
 8004c74:	4d0b      	ldr	r5, [pc, #44]	; (8004ca4 <__libc_init_array+0x40>)
 8004c76:	4c0c      	ldr	r4, [pc, #48]	; (8004ca8 <__libc_init_array+0x44>)
 8004c78:	f000 fc6a 	bl	8005550 <_init>
 8004c7c:	1b64      	subs	r4, r4, r5
 8004c7e:	10a4      	asrs	r4, r4, #2
 8004c80:	2600      	movs	r6, #0
 8004c82:	42a6      	cmp	r6, r4
 8004c84:	d105      	bne.n	8004c92 <__libc_init_array+0x2e>
 8004c86:	bd70      	pop	{r4, r5, r6, pc}
 8004c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c8c:	4798      	blx	r3
 8004c8e:	3601      	adds	r6, #1
 8004c90:	e7ee      	b.n	8004c70 <__libc_init_array+0xc>
 8004c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c96:	4798      	blx	r3
 8004c98:	3601      	adds	r6, #1
 8004c9a:	e7f2      	b.n	8004c82 <__libc_init_array+0x1e>
 8004c9c:	080055f8 	.word	0x080055f8
 8004ca0:	080055f8 	.word	0x080055f8
 8004ca4:	080055f8 	.word	0x080055f8
 8004ca8:	080055fc 	.word	0x080055fc

08004cac <__retarget_lock_acquire_recursive>:
 8004cac:	4770      	bx	lr

08004cae <__retarget_lock_release_recursive>:
 8004cae:	4770      	bx	lr

08004cb0 <__ssputs_r>:
 8004cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb4:	688e      	ldr	r6, [r1, #8]
 8004cb6:	461f      	mov	r7, r3
 8004cb8:	42be      	cmp	r6, r7
 8004cba:	680b      	ldr	r3, [r1, #0]
 8004cbc:	4682      	mov	sl, r0
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	4690      	mov	r8, r2
 8004cc2:	d82c      	bhi.n	8004d1e <__ssputs_r+0x6e>
 8004cc4:	898a      	ldrh	r2, [r1, #12]
 8004cc6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004cca:	d026      	beq.n	8004d1a <__ssputs_r+0x6a>
 8004ccc:	6965      	ldr	r5, [r4, #20]
 8004cce:	6909      	ldr	r1, [r1, #16]
 8004cd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cd4:	eba3 0901 	sub.w	r9, r3, r1
 8004cd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cdc:	1c7b      	adds	r3, r7, #1
 8004cde:	444b      	add	r3, r9
 8004ce0:	106d      	asrs	r5, r5, #1
 8004ce2:	429d      	cmp	r5, r3
 8004ce4:	bf38      	it	cc
 8004ce6:	461d      	movcc	r5, r3
 8004ce8:	0553      	lsls	r3, r2, #21
 8004cea:	d527      	bpl.n	8004d3c <__ssputs_r+0x8c>
 8004cec:	4629      	mov	r1, r5
 8004cee:	f000 f957 	bl	8004fa0 <_malloc_r>
 8004cf2:	4606      	mov	r6, r0
 8004cf4:	b360      	cbz	r0, 8004d50 <__ssputs_r+0xa0>
 8004cf6:	6921      	ldr	r1, [r4, #16]
 8004cf8:	464a      	mov	r2, r9
 8004cfa:	f000 fbc7 	bl	800548c <memcpy>
 8004cfe:	89a3      	ldrh	r3, [r4, #12]
 8004d00:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d08:	81a3      	strh	r3, [r4, #12]
 8004d0a:	6126      	str	r6, [r4, #16]
 8004d0c:	6165      	str	r5, [r4, #20]
 8004d0e:	444e      	add	r6, r9
 8004d10:	eba5 0509 	sub.w	r5, r5, r9
 8004d14:	6026      	str	r6, [r4, #0]
 8004d16:	60a5      	str	r5, [r4, #8]
 8004d18:	463e      	mov	r6, r7
 8004d1a:	42be      	cmp	r6, r7
 8004d1c:	d900      	bls.n	8004d20 <__ssputs_r+0x70>
 8004d1e:	463e      	mov	r6, r7
 8004d20:	6820      	ldr	r0, [r4, #0]
 8004d22:	4632      	mov	r2, r6
 8004d24:	4641      	mov	r1, r8
 8004d26:	f000 fb86 	bl	8005436 <memmove>
 8004d2a:	68a3      	ldr	r3, [r4, #8]
 8004d2c:	1b9b      	subs	r3, r3, r6
 8004d2e:	60a3      	str	r3, [r4, #8]
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	4433      	add	r3, r6
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	2000      	movs	r0, #0
 8004d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d3c:	462a      	mov	r2, r5
 8004d3e:	f000 fb4b 	bl	80053d8 <_realloc_r>
 8004d42:	4606      	mov	r6, r0
 8004d44:	2800      	cmp	r0, #0
 8004d46:	d1e0      	bne.n	8004d0a <__ssputs_r+0x5a>
 8004d48:	6921      	ldr	r1, [r4, #16]
 8004d4a:	4650      	mov	r0, sl
 8004d4c:	f000 fbac 	bl	80054a8 <_free_r>
 8004d50:	230c      	movs	r3, #12
 8004d52:	f8ca 3000 	str.w	r3, [sl]
 8004d56:	89a3      	ldrh	r3, [r4, #12]
 8004d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d5c:	81a3      	strh	r3, [r4, #12]
 8004d5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d62:	e7e9      	b.n	8004d38 <__ssputs_r+0x88>

08004d64 <_svfiprintf_r>:
 8004d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d68:	4698      	mov	r8, r3
 8004d6a:	898b      	ldrh	r3, [r1, #12]
 8004d6c:	061b      	lsls	r3, r3, #24
 8004d6e:	b09d      	sub	sp, #116	; 0x74
 8004d70:	4607      	mov	r7, r0
 8004d72:	460d      	mov	r5, r1
 8004d74:	4614      	mov	r4, r2
 8004d76:	d50e      	bpl.n	8004d96 <_svfiprintf_r+0x32>
 8004d78:	690b      	ldr	r3, [r1, #16]
 8004d7a:	b963      	cbnz	r3, 8004d96 <_svfiprintf_r+0x32>
 8004d7c:	2140      	movs	r1, #64	; 0x40
 8004d7e:	f000 f90f 	bl	8004fa0 <_malloc_r>
 8004d82:	6028      	str	r0, [r5, #0]
 8004d84:	6128      	str	r0, [r5, #16]
 8004d86:	b920      	cbnz	r0, 8004d92 <_svfiprintf_r+0x2e>
 8004d88:	230c      	movs	r3, #12
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d90:	e0d0      	b.n	8004f34 <_svfiprintf_r+0x1d0>
 8004d92:	2340      	movs	r3, #64	; 0x40
 8004d94:	616b      	str	r3, [r5, #20]
 8004d96:	2300      	movs	r3, #0
 8004d98:	9309      	str	r3, [sp, #36]	; 0x24
 8004d9a:	2320      	movs	r3, #32
 8004d9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004da0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004da4:	2330      	movs	r3, #48	; 0x30
 8004da6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004f4c <_svfiprintf_r+0x1e8>
 8004daa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dae:	f04f 0901 	mov.w	r9, #1
 8004db2:	4623      	mov	r3, r4
 8004db4:	469a      	mov	sl, r3
 8004db6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dba:	b10a      	cbz	r2, 8004dc0 <_svfiprintf_r+0x5c>
 8004dbc:	2a25      	cmp	r2, #37	; 0x25
 8004dbe:	d1f9      	bne.n	8004db4 <_svfiprintf_r+0x50>
 8004dc0:	ebba 0b04 	subs.w	fp, sl, r4
 8004dc4:	d00b      	beq.n	8004dde <_svfiprintf_r+0x7a>
 8004dc6:	465b      	mov	r3, fp
 8004dc8:	4622      	mov	r2, r4
 8004dca:	4629      	mov	r1, r5
 8004dcc:	4638      	mov	r0, r7
 8004dce:	f7ff ff6f 	bl	8004cb0 <__ssputs_r>
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	f000 80a9 	beq.w	8004f2a <_svfiprintf_r+0x1c6>
 8004dd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dda:	445a      	add	r2, fp
 8004ddc:	9209      	str	r2, [sp, #36]	; 0x24
 8004dde:	f89a 3000 	ldrb.w	r3, [sl]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 80a1 	beq.w	8004f2a <_svfiprintf_r+0x1c6>
 8004de8:	2300      	movs	r3, #0
 8004dea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004df2:	f10a 0a01 	add.w	sl, sl, #1
 8004df6:	9304      	str	r3, [sp, #16]
 8004df8:	9307      	str	r3, [sp, #28]
 8004dfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004dfe:	931a      	str	r3, [sp, #104]	; 0x68
 8004e00:	4654      	mov	r4, sl
 8004e02:	2205      	movs	r2, #5
 8004e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e08:	4850      	ldr	r0, [pc, #320]	; (8004f4c <_svfiprintf_r+0x1e8>)
 8004e0a:	f7fb f9e9 	bl	80001e0 <memchr>
 8004e0e:	9a04      	ldr	r2, [sp, #16]
 8004e10:	b9d8      	cbnz	r0, 8004e4a <_svfiprintf_r+0xe6>
 8004e12:	06d0      	lsls	r0, r2, #27
 8004e14:	bf44      	itt	mi
 8004e16:	2320      	movmi	r3, #32
 8004e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e1c:	0711      	lsls	r1, r2, #28
 8004e1e:	bf44      	itt	mi
 8004e20:	232b      	movmi	r3, #43	; 0x2b
 8004e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e26:	f89a 3000 	ldrb.w	r3, [sl]
 8004e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e2c:	d015      	beq.n	8004e5a <_svfiprintf_r+0xf6>
 8004e2e:	9a07      	ldr	r2, [sp, #28]
 8004e30:	4654      	mov	r4, sl
 8004e32:	2000      	movs	r0, #0
 8004e34:	f04f 0c0a 	mov.w	ip, #10
 8004e38:	4621      	mov	r1, r4
 8004e3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e3e:	3b30      	subs	r3, #48	; 0x30
 8004e40:	2b09      	cmp	r3, #9
 8004e42:	d94d      	bls.n	8004ee0 <_svfiprintf_r+0x17c>
 8004e44:	b1b0      	cbz	r0, 8004e74 <_svfiprintf_r+0x110>
 8004e46:	9207      	str	r2, [sp, #28]
 8004e48:	e014      	b.n	8004e74 <_svfiprintf_r+0x110>
 8004e4a:	eba0 0308 	sub.w	r3, r0, r8
 8004e4e:	fa09 f303 	lsl.w	r3, r9, r3
 8004e52:	4313      	orrs	r3, r2
 8004e54:	9304      	str	r3, [sp, #16]
 8004e56:	46a2      	mov	sl, r4
 8004e58:	e7d2      	b.n	8004e00 <_svfiprintf_r+0x9c>
 8004e5a:	9b03      	ldr	r3, [sp, #12]
 8004e5c:	1d19      	adds	r1, r3, #4
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	9103      	str	r1, [sp, #12]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	bfbb      	ittet	lt
 8004e66:	425b      	neglt	r3, r3
 8004e68:	f042 0202 	orrlt.w	r2, r2, #2
 8004e6c:	9307      	strge	r3, [sp, #28]
 8004e6e:	9307      	strlt	r3, [sp, #28]
 8004e70:	bfb8      	it	lt
 8004e72:	9204      	strlt	r2, [sp, #16]
 8004e74:	7823      	ldrb	r3, [r4, #0]
 8004e76:	2b2e      	cmp	r3, #46	; 0x2e
 8004e78:	d10c      	bne.n	8004e94 <_svfiprintf_r+0x130>
 8004e7a:	7863      	ldrb	r3, [r4, #1]
 8004e7c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e7e:	d134      	bne.n	8004eea <_svfiprintf_r+0x186>
 8004e80:	9b03      	ldr	r3, [sp, #12]
 8004e82:	1d1a      	adds	r2, r3, #4
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	9203      	str	r2, [sp, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	bfb8      	it	lt
 8004e8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e90:	3402      	adds	r4, #2
 8004e92:	9305      	str	r3, [sp, #20]
 8004e94:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004f5c <_svfiprintf_r+0x1f8>
 8004e98:	7821      	ldrb	r1, [r4, #0]
 8004e9a:	2203      	movs	r2, #3
 8004e9c:	4650      	mov	r0, sl
 8004e9e:	f7fb f99f 	bl	80001e0 <memchr>
 8004ea2:	b138      	cbz	r0, 8004eb4 <_svfiprintf_r+0x150>
 8004ea4:	9b04      	ldr	r3, [sp, #16]
 8004ea6:	eba0 000a 	sub.w	r0, r0, sl
 8004eaa:	2240      	movs	r2, #64	; 0x40
 8004eac:	4082      	lsls	r2, r0
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	3401      	adds	r4, #1
 8004eb2:	9304      	str	r3, [sp, #16]
 8004eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eb8:	4825      	ldr	r0, [pc, #148]	; (8004f50 <_svfiprintf_r+0x1ec>)
 8004eba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ebe:	2206      	movs	r2, #6
 8004ec0:	f7fb f98e 	bl	80001e0 <memchr>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d038      	beq.n	8004f3a <_svfiprintf_r+0x1d6>
 8004ec8:	4b22      	ldr	r3, [pc, #136]	; (8004f54 <_svfiprintf_r+0x1f0>)
 8004eca:	bb1b      	cbnz	r3, 8004f14 <_svfiprintf_r+0x1b0>
 8004ecc:	9b03      	ldr	r3, [sp, #12]
 8004ece:	3307      	adds	r3, #7
 8004ed0:	f023 0307 	bic.w	r3, r3, #7
 8004ed4:	3308      	adds	r3, #8
 8004ed6:	9303      	str	r3, [sp, #12]
 8004ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eda:	4433      	add	r3, r6
 8004edc:	9309      	str	r3, [sp, #36]	; 0x24
 8004ede:	e768      	b.n	8004db2 <_svfiprintf_r+0x4e>
 8004ee0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ee4:	460c      	mov	r4, r1
 8004ee6:	2001      	movs	r0, #1
 8004ee8:	e7a6      	b.n	8004e38 <_svfiprintf_r+0xd4>
 8004eea:	2300      	movs	r3, #0
 8004eec:	3401      	adds	r4, #1
 8004eee:	9305      	str	r3, [sp, #20]
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	f04f 0c0a 	mov.w	ip, #10
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004efc:	3a30      	subs	r2, #48	; 0x30
 8004efe:	2a09      	cmp	r2, #9
 8004f00:	d903      	bls.n	8004f0a <_svfiprintf_r+0x1a6>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0c6      	beq.n	8004e94 <_svfiprintf_r+0x130>
 8004f06:	9105      	str	r1, [sp, #20]
 8004f08:	e7c4      	b.n	8004e94 <_svfiprintf_r+0x130>
 8004f0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f0e:	4604      	mov	r4, r0
 8004f10:	2301      	movs	r3, #1
 8004f12:	e7f0      	b.n	8004ef6 <_svfiprintf_r+0x192>
 8004f14:	ab03      	add	r3, sp, #12
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	462a      	mov	r2, r5
 8004f1a:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <_svfiprintf_r+0x1f4>)
 8004f1c:	a904      	add	r1, sp, #16
 8004f1e:	4638      	mov	r0, r7
 8004f20:	f3af 8000 	nop.w
 8004f24:	1c42      	adds	r2, r0, #1
 8004f26:	4606      	mov	r6, r0
 8004f28:	d1d6      	bne.n	8004ed8 <_svfiprintf_r+0x174>
 8004f2a:	89ab      	ldrh	r3, [r5, #12]
 8004f2c:	065b      	lsls	r3, r3, #25
 8004f2e:	f53f af2d 	bmi.w	8004d8c <_svfiprintf_r+0x28>
 8004f32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f34:	b01d      	add	sp, #116	; 0x74
 8004f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f3a:	ab03      	add	r3, sp, #12
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	462a      	mov	r2, r5
 8004f40:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <_svfiprintf_r+0x1f4>)
 8004f42:	a904      	add	r1, sp, #16
 8004f44:	4638      	mov	r0, r7
 8004f46:	f000 f919 	bl	800517c <_printf_i>
 8004f4a:	e7eb      	b.n	8004f24 <_svfiprintf_r+0x1c0>
 8004f4c:	080055bc 	.word	0x080055bc
 8004f50:	080055c6 	.word	0x080055c6
 8004f54:	00000000 	.word	0x00000000
 8004f58:	08004cb1 	.word	0x08004cb1
 8004f5c:	080055c2 	.word	0x080055c2

08004f60 <sbrk_aligned>:
 8004f60:	b570      	push	{r4, r5, r6, lr}
 8004f62:	4e0e      	ldr	r6, [pc, #56]	; (8004f9c <sbrk_aligned+0x3c>)
 8004f64:	460c      	mov	r4, r1
 8004f66:	6831      	ldr	r1, [r6, #0]
 8004f68:	4605      	mov	r5, r0
 8004f6a:	b911      	cbnz	r1, 8004f72 <sbrk_aligned+0x12>
 8004f6c:	f000 fa7e 	bl	800546c <_sbrk_r>
 8004f70:	6030      	str	r0, [r6, #0]
 8004f72:	4621      	mov	r1, r4
 8004f74:	4628      	mov	r0, r5
 8004f76:	f000 fa79 	bl	800546c <_sbrk_r>
 8004f7a:	1c43      	adds	r3, r0, #1
 8004f7c:	d00a      	beq.n	8004f94 <sbrk_aligned+0x34>
 8004f7e:	1cc4      	adds	r4, r0, #3
 8004f80:	f024 0403 	bic.w	r4, r4, #3
 8004f84:	42a0      	cmp	r0, r4
 8004f86:	d007      	beq.n	8004f98 <sbrk_aligned+0x38>
 8004f88:	1a21      	subs	r1, r4, r0
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f000 fa6e 	bl	800546c <_sbrk_r>
 8004f90:	3001      	adds	r0, #1
 8004f92:	d101      	bne.n	8004f98 <sbrk_aligned+0x38>
 8004f94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f98:	4620      	mov	r0, r4
 8004f9a:	bd70      	pop	{r4, r5, r6, pc}
 8004f9c:	20000938 	.word	0x20000938

08004fa0 <_malloc_r>:
 8004fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fa4:	1ccd      	adds	r5, r1, #3
 8004fa6:	f025 0503 	bic.w	r5, r5, #3
 8004faa:	3508      	adds	r5, #8
 8004fac:	2d0c      	cmp	r5, #12
 8004fae:	bf38      	it	cc
 8004fb0:	250c      	movcc	r5, #12
 8004fb2:	2d00      	cmp	r5, #0
 8004fb4:	4607      	mov	r7, r0
 8004fb6:	db01      	blt.n	8004fbc <_malloc_r+0x1c>
 8004fb8:	42a9      	cmp	r1, r5
 8004fba:	d905      	bls.n	8004fc8 <_malloc_r+0x28>
 8004fbc:	230c      	movs	r3, #12
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	2600      	movs	r6, #0
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800509c <_malloc_r+0xfc>
 8004fcc:	f000 f9f8 	bl	80053c0 <__malloc_lock>
 8004fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8004fd4:	461c      	mov	r4, r3
 8004fd6:	bb5c      	cbnz	r4, 8005030 <_malloc_r+0x90>
 8004fd8:	4629      	mov	r1, r5
 8004fda:	4638      	mov	r0, r7
 8004fdc:	f7ff ffc0 	bl	8004f60 <sbrk_aligned>
 8004fe0:	1c43      	adds	r3, r0, #1
 8004fe2:	4604      	mov	r4, r0
 8004fe4:	d155      	bne.n	8005092 <_malloc_r+0xf2>
 8004fe6:	f8d8 4000 	ldr.w	r4, [r8]
 8004fea:	4626      	mov	r6, r4
 8004fec:	2e00      	cmp	r6, #0
 8004fee:	d145      	bne.n	800507c <_malloc_r+0xdc>
 8004ff0:	2c00      	cmp	r4, #0
 8004ff2:	d048      	beq.n	8005086 <_malloc_r+0xe6>
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	4631      	mov	r1, r6
 8004ff8:	4638      	mov	r0, r7
 8004ffa:	eb04 0903 	add.w	r9, r4, r3
 8004ffe:	f000 fa35 	bl	800546c <_sbrk_r>
 8005002:	4581      	cmp	r9, r0
 8005004:	d13f      	bne.n	8005086 <_malloc_r+0xe6>
 8005006:	6821      	ldr	r1, [r4, #0]
 8005008:	1a6d      	subs	r5, r5, r1
 800500a:	4629      	mov	r1, r5
 800500c:	4638      	mov	r0, r7
 800500e:	f7ff ffa7 	bl	8004f60 <sbrk_aligned>
 8005012:	3001      	adds	r0, #1
 8005014:	d037      	beq.n	8005086 <_malloc_r+0xe6>
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	442b      	add	r3, r5
 800501a:	6023      	str	r3, [r4, #0]
 800501c:	f8d8 3000 	ldr.w	r3, [r8]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d038      	beq.n	8005096 <_malloc_r+0xf6>
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	42a2      	cmp	r2, r4
 8005028:	d12b      	bne.n	8005082 <_malloc_r+0xe2>
 800502a:	2200      	movs	r2, #0
 800502c:	605a      	str	r2, [r3, #4]
 800502e:	e00f      	b.n	8005050 <_malloc_r+0xb0>
 8005030:	6822      	ldr	r2, [r4, #0]
 8005032:	1b52      	subs	r2, r2, r5
 8005034:	d41f      	bmi.n	8005076 <_malloc_r+0xd6>
 8005036:	2a0b      	cmp	r2, #11
 8005038:	d917      	bls.n	800506a <_malloc_r+0xca>
 800503a:	1961      	adds	r1, r4, r5
 800503c:	42a3      	cmp	r3, r4
 800503e:	6025      	str	r5, [r4, #0]
 8005040:	bf18      	it	ne
 8005042:	6059      	strne	r1, [r3, #4]
 8005044:	6863      	ldr	r3, [r4, #4]
 8005046:	bf08      	it	eq
 8005048:	f8c8 1000 	streq.w	r1, [r8]
 800504c:	5162      	str	r2, [r4, r5]
 800504e:	604b      	str	r3, [r1, #4]
 8005050:	4638      	mov	r0, r7
 8005052:	f104 060b 	add.w	r6, r4, #11
 8005056:	f000 f9b9 	bl	80053cc <__malloc_unlock>
 800505a:	f026 0607 	bic.w	r6, r6, #7
 800505e:	1d23      	adds	r3, r4, #4
 8005060:	1af2      	subs	r2, r6, r3
 8005062:	d0ae      	beq.n	8004fc2 <_malloc_r+0x22>
 8005064:	1b9b      	subs	r3, r3, r6
 8005066:	50a3      	str	r3, [r4, r2]
 8005068:	e7ab      	b.n	8004fc2 <_malloc_r+0x22>
 800506a:	42a3      	cmp	r3, r4
 800506c:	6862      	ldr	r2, [r4, #4]
 800506e:	d1dd      	bne.n	800502c <_malloc_r+0x8c>
 8005070:	f8c8 2000 	str.w	r2, [r8]
 8005074:	e7ec      	b.n	8005050 <_malloc_r+0xb0>
 8005076:	4623      	mov	r3, r4
 8005078:	6864      	ldr	r4, [r4, #4]
 800507a:	e7ac      	b.n	8004fd6 <_malloc_r+0x36>
 800507c:	4634      	mov	r4, r6
 800507e:	6876      	ldr	r6, [r6, #4]
 8005080:	e7b4      	b.n	8004fec <_malloc_r+0x4c>
 8005082:	4613      	mov	r3, r2
 8005084:	e7cc      	b.n	8005020 <_malloc_r+0x80>
 8005086:	230c      	movs	r3, #12
 8005088:	603b      	str	r3, [r7, #0]
 800508a:	4638      	mov	r0, r7
 800508c:	f000 f99e 	bl	80053cc <__malloc_unlock>
 8005090:	e797      	b.n	8004fc2 <_malloc_r+0x22>
 8005092:	6025      	str	r5, [r4, #0]
 8005094:	e7dc      	b.n	8005050 <_malloc_r+0xb0>
 8005096:	605b      	str	r3, [r3, #4]
 8005098:	deff      	udf	#255	; 0xff
 800509a:	bf00      	nop
 800509c:	20000934 	.word	0x20000934

080050a0 <_printf_common>:
 80050a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050a4:	4616      	mov	r6, r2
 80050a6:	4699      	mov	r9, r3
 80050a8:	688a      	ldr	r2, [r1, #8]
 80050aa:	690b      	ldr	r3, [r1, #16]
 80050ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050b0:	4293      	cmp	r3, r2
 80050b2:	bfb8      	it	lt
 80050b4:	4613      	movlt	r3, r2
 80050b6:	6033      	str	r3, [r6, #0]
 80050b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050bc:	4607      	mov	r7, r0
 80050be:	460c      	mov	r4, r1
 80050c0:	b10a      	cbz	r2, 80050c6 <_printf_common+0x26>
 80050c2:	3301      	adds	r3, #1
 80050c4:	6033      	str	r3, [r6, #0]
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	0699      	lsls	r1, r3, #26
 80050ca:	bf42      	ittt	mi
 80050cc:	6833      	ldrmi	r3, [r6, #0]
 80050ce:	3302      	addmi	r3, #2
 80050d0:	6033      	strmi	r3, [r6, #0]
 80050d2:	6825      	ldr	r5, [r4, #0]
 80050d4:	f015 0506 	ands.w	r5, r5, #6
 80050d8:	d106      	bne.n	80050e8 <_printf_common+0x48>
 80050da:	f104 0a19 	add.w	sl, r4, #25
 80050de:	68e3      	ldr	r3, [r4, #12]
 80050e0:	6832      	ldr	r2, [r6, #0]
 80050e2:	1a9b      	subs	r3, r3, r2
 80050e4:	42ab      	cmp	r3, r5
 80050e6:	dc26      	bgt.n	8005136 <_printf_common+0x96>
 80050e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050ec:	1e13      	subs	r3, r2, #0
 80050ee:	6822      	ldr	r2, [r4, #0]
 80050f0:	bf18      	it	ne
 80050f2:	2301      	movne	r3, #1
 80050f4:	0692      	lsls	r2, r2, #26
 80050f6:	d42b      	bmi.n	8005150 <_printf_common+0xb0>
 80050f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050fc:	4649      	mov	r1, r9
 80050fe:	4638      	mov	r0, r7
 8005100:	47c0      	blx	r8
 8005102:	3001      	adds	r0, #1
 8005104:	d01e      	beq.n	8005144 <_printf_common+0xa4>
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	6922      	ldr	r2, [r4, #16]
 800510a:	f003 0306 	and.w	r3, r3, #6
 800510e:	2b04      	cmp	r3, #4
 8005110:	bf02      	ittt	eq
 8005112:	68e5      	ldreq	r5, [r4, #12]
 8005114:	6833      	ldreq	r3, [r6, #0]
 8005116:	1aed      	subeq	r5, r5, r3
 8005118:	68a3      	ldr	r3, [r4, #8]
 800511a:	bf0c      	ite	eq
 800511c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005120:	2500      	movne	r5, #0
 8005122:	4293      	cmp	r3, r2
 8005124:	bfc4      	itt	gt
 8005126:	1a9b      	subgt	r3, r3, r2
 8005128:	18ed      	addgt	r5, r5, r3
 800512a:	2600      	movs	r6, #0
 800512c:	341a      	adds	r4, #26
 800512e:	42b5      	cmp	r5, r6
 8005130:	d11a      	bne.n	8005168 <_printf_common+0xc8>
 8005132:	2000      	movs	r0, #0
 8005134:	e008      	b.n	8005148 <_printf_common+0xa8>
 8005136:	2301      	movs	r3, #1
 8005138:	4652      	mov	r2, sl
 800513a:	4649      	mov	r1, r9
 800513c:	4638      	mov	r0, r7
 800513e:	47c0      	blx	r8
 8005140:	3001      	adds	r0, #1
 8005142:	d103      	bne.n	800514c <_printf_common+0xac>
 8005144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800514c:	3501      	adds	r5, #1
 800514e:	e7c6      	b.n	80050de <_printf_common+0x3e>
 8005150:	18e1      	adds	r1, r4, r3
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	2030      	movs	r0, #48	; 0x30
 8005156:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800515a:	4422      	add	r2, r4
 800515c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005160:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005164:	3302      	adds	r3, #2
 8005166:	e7c7      	b.n	80050f8 <_printf_common+0x58>
 8005168:	2301      	movs	r3, #1
 800516a:	4622      	mov	r2, r4
 800516c:	4649      	mov	r1, r9
 800516e:	4638      	mov	r0, r7
 8005170:	47c0      	blx	r8
 8005172:	3001      	adds	r0, #1
 8005174:	d0e6      	beq.n	8005144 <_printf_common+0xa4>
 8005176:	3601      	adds	r6, #1
 8005178:	e7d9      	b.n	800512e <_printf_common+0x8e>
	...

0800517c <_printf_i>:
 800517c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005180:	7e0f      	ldrb	r7, [r1, #24]
 8005182:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005184:	2f78      	cmp	r7, #120	; 0x78
 8005186:	4691      	mov	r9, r2
 8005188:	4680      	mov	r8, r0
 800518a:	460c      	mov	r4, r1
 800518c:	469a      	mov	sl, r3
 800518e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005192:	d807      	bhi.n	80051a4 <_printf_i+0x28>
 8005194:	2f62      	cmp	r7, #98	; 0x62
 8005196:	d80a      	bhi.n	80051ae <_printf_i+0x32>
 8005198:	2f00      	cmp	r7, #0
 800519a:	f000 80d4 	beq.w	8005346 <_printf_i+0x1ca>
 800519e:	2f58      	cmp	r7, #88	; 0x58
 80051a0:	f000 80c0 	beq.w	8005324 <_printf_i+0x1a8>
 80051a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051ac:	e03a      	b.n	8005224 <_printf_i+0xa8>
 80051ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051b2:	2b15      	cmp	r3, #21
 80051b4:	d8f6      	bhi.n	80051a4 <_printf_i+0x28>
 80051b6:	a101      	add	r1, pc, #4	; (adr r1, 80051bc <_printf_i+0x40>)
 80051b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051bc:	08005215 	.word	0x08005215
 80051c0:	08005229 	.word	0x08005229
 80051c4:	080051a5 	.word	0x080051a5
 80051c8:	080051a5 	.word	0x080051a5
 80051cc:	080051a5 	.word	0x080051a5
 80051d0:	080051a5 	.word	0x080051a5
 80051d4:	08005229 	.word	0x08005229
 80051d8:	080051a5 	.word	0x080051a5
 80051dc:	080051a5 	.word	0x080051a5
 80051e0:	080051a5 	.word	0x080051a5
 80051e4:	080051a5 	.word	0x080051a5
 80051e8:	0800532d 	.word	0x0800532d
 80051ec:	08005255 	.word	0x08005255
 80051f0:	080052e7 	.word	0x080052e7
 80051f4:	080051a5 	.word	0x080051a5
 80051f8:	080051a5 	.word	0x080051a5
 80051fc:	0800534f 	.word	0x0800534f
 8005200:	080051a5 	.word	0x080051a5
 8005204:	08005255 	.word	0x08005255
 8005208:	080051a5 	.word	0x080051a5
 800520c:	080051a5 	.word	0x080051a5
 8005210:	080052ef 	.word	0x080052ef
 8005214:	682b      	ldr	r3, [r5, #0]
 8005216:	1d1a      	adds	r2, r3, #4
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	602a      	str	r2, [r5, #0]
 800521c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005224:	2301      	movs	r3, #1
 8005226:	e09f      	b.n	8005368 <_printf_i+0x1ec>
 8005228:	6820      	ldr	r0, [r4, #0]
 800522a:	682b      	ldr	r3, [r5, #0]
 800522c:	0607      	lsls	r7, r0, #24
 800522e:	f103 0104 	add.w	r1, r3, #4
 8005232:	6029      	str	r1, [r5, #0]
 8005234:	d501      	bpl.n	800523a <_printf_i+0xbe>
 8005236:	681e      	ldr	r6, [r3, #0]
 8005238:	e003      	b.n	8005242 <_printf_i+0xc6>
 800523a:	0646      	lsls	r6, r0, #25
 800523c:	d5fb      	bpl.n	8005236 <_printf_i+0xba>
 800523e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005242:	2e00      	cmp	r6, #0
 8005244:	da03      	bge.n	800524e <_printf_i+0xd2>
 8005246:	232d      	movs	r3, #45	; 0x2d
 8005248:	4276      	negs	r6, r6
 800524a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800524e:	485a      	ldr	r0, [pc, #360]	; (80053b8 <_printf_i+0x23c>)
 8005250:	230a      	movs	r3, #10
 8005252:	e012      	b.n	800527a <_printf_i+0xfe>
 8005254:	682b      	ldr	r3, [r5, #0]
 8005256:	6820      	ldr	r0, [r4, #0]
 8005258:	1d19      	adds	r1, r3, #4
 800525a:	6029      	str	r1, [r5, #0]
 800525c:	0605      	lsls	r5, r0, #24
 800525e:	d501      	bpl.n	8005264 <_printf_i+0xe8>
 8005260:	681e      	ldr	r6, [r3, #0]
 8005262:	e002      	b.n	800526a <_printf_i+0xee>
 8005264:	0641      	lsls	r1, r0, #25
 8005266:	d5fb      	bpl.n	8005260 <_printf_i+0xe4>
 8005268:	881e      	ldrh	r6, [r3, #0]
 800526a:	4853      	ldr	r0, [pc, #332]	; (80053b8 <_printf_i+0x23c>)
 800526c:	2f6f      	cmp	r7, #111	; 0x6f
 800526e:	bf0c      	ite	eq
 8005270:	2308      	moveq	r3, #8
 8005272:	230a      	movne	r3, #10
 8005274:	2100      	movs	r1, #0
 8005276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800527a:	6865      	ldr	r5, [r4, #4]
 800527c:	60a5      	str	r5, [r4, #8]
 800527e:	2d00      	cmp	r5, #0
 8005280:	bfa2      	ittt	ge
 8005282:	6821      	ldrge	r1, [r4, #0]
 8005284:	f021 0104 	bicge.w	r1, r1, #4
 8005288:	6021      	strge	r1, [r4, #0]
 800528a:	b90e      	cbnz	r6, 8005290 <_printf_i+0x114>
 800528c:	2d00      	cmp	r5, #0
 800528e:	d04b      	beq.n	8005328 <_printf_i+0x1ac>
 8005290:	4615      	mov	r5, r2
 8005292:	fbb6 f1f3 	udiv	r1, r6, r3
 8005296:	fb03 6711 	mls	r7, r3, r1, r6
 800529a:	5dc7      	ldrb	r7, [r0, r7]
 800529c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052a0:	4637      	mov	r7, r6
 80052a2:	42bb      	cmp	r3, r7
 80052a4:	460e      	mov	r6, r1
 80052a6:	d9f4      	bls.n	8005292 <_printf_i+0x116>
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d10b      	bne.n	80052c4 <_printf_i+0x148>
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	07de      	lsls	r6, r3, #31
 80052b0:	d508      	bpl.n	80052c4 <_printf_i+0x148>
 80052b2:	6923      	ldr	r3, [r4, #16]
 80052b4:	6861      	ldr	r1, [r4, #4]
 80052b6:	4299      	cmp	r1, r3
 80052b8:	bfde      	ittt	le
 80052ba:	2330      	movle	r3, #48	; 0x30
 80052bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052c0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80052c4:	1b52      	subs	r2, r2, r5
 80052c6:	6122      	str	r2, [r4, #16]
 80052c8:	f8cd a000 	str.w	sl, [sp]
 80052cc:	464b      	mov	r3, r9
 80052ce:	aa03      	add	r2, sp, #12
 80052d0:	4621      	mov	r1, r4
 80052d2:	4640      	mov	r0, r8
 80052d4:	f7ff fee4 	bl	80050a0 <_printf_common>
 80052d8:	3001      	adds	r0, #1
 80052da:	d14a      	bne.n	8005372 <_printf_i+0x1f6>
 80052dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052e0:	b004      	add	sp, #16
 80052e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	f043 0320 	orr.w	r3, r3, #32
 80052ec:	6023      	str	r3, [r4, #0]
 80052ee:	4833      	ldr	r0, [pc, #204]	; (80053bc <_printf_i+0x240>)
 80052f0:	2778      	movs	r7, #120	; 0x78
 80052f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	6829      	ldr	r1, [r5, #0]
 80052fa:	061f      	lsls	r7, r3, #24
 80052fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005300:	d402      	bmi.n	8005308 <_printf_i+0x18c>
 8005302:	065f      	lsls	r7, r3, #25
 8005304:	bf48      	it	mi
 8005306:	b2b6      	uxthmi	r6, r6
 8005308:	07df      	lsls	r7, r3, #31
 800530a:	bf48      	it	mi
 800530c:	f043 0320 	orrmi.w	r3, r3, #32
 8005310:	6029      	str	r1, [r5, #0]
 8005312:	bf48      	it	mi
 8005314:	6023      	strmi	r3, [r4, #0]
 8005316:	b91e      	cbnz	r6, 8005320 <_printf_i+0x1a4>
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	f023 0320 	bic.w	r3, r3, #32
 800531e:	6023      	str	r3, [r4, #0]
 8005320:	2310      	movs	r3, #16
 8005322:	e7a7      	b.n	8005274 <_printf_i+0xf8>
 8005324:	4824      	ldr	r0, [pc, #144]	; (80053b8 <_printf_i+0x23c>)
 8005326:	e7e4      	b.n	80052f2 <_printf_i+0x176>
 8005328:	4615      	mov	r5, r2
 800532a:	e7bd      	b.n	80052a8 <_printf_i+0x12c>
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	6826      	ldr	r6, [r4, #0]
 8005330:	6961      	ldr	r1, [r4, #20]
 8005332:	1d18      	adds	r0, r3, #4
 8005334:	6028      	str	r0, [r5, #0]
 8005336:	0635      	lsls	r5, r6, #24
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	d501      	bpl.n	8005340 <_printf_i+0x1c4>
 800533c:	6019      	str	r1, [r3, #0]
 800533e:	e002      	b.n	8005346 <_printf_i+0x1ca>
 8005340:	0670      	lsls	r0, r6, #25
 8005342:	d5fb      	bpl.n	800533c <_printf_i+0x1c0>
 8005344:	8019      	strh	r1, [r3, #0]
 8005346:	2300      	movs	r3, #0
 8005348:	6123      	str	r3, [r4, #16]
 800534a:	4615      	mov	r5, r2
 800534c:	e7bc      	b.n	80052c8 <_printf_i+0x14c>
 800534e:	682b      	ldr	r3, [r5, #0]
 8005350:	1d1a      	adds	r2, r3, #4
 8005352:	602a      	str	r2, [r5, #0]
 8005354:	681d      	ldr	r5, [r3, #0]
 8005356:	6862      	ldr	r2, [r4, #4]
 8005358:	2100      	movs	r1, #0
 800535a:	4628      	mov	r0, r5
 800535c:	f7fa ff40 	bl	80001e0 <memchr>
 8005360:	b108      	cbz	r0, 8005366 <_printf_i+0x1ea>
 8005362:	1b40      	subs	r0, r0, r5
 8005364:	6060      	str	r0, [r4, #4]
 8005366:	6863      	ldr	r3, [r4, #4]
 8005368:	6123      	str	r3, [r4, #16]
 800536a:	2300      	movs	r3, #0
 800536c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005370:	e7aa      	b.n	80052c8 <_printf_i+0x14c>
 8005372:	6923      	ldr	r3, [r4, #16]
 8005374:	462a      	mov	r2, r5
 8005376:	4649      	mov	r1, r9
 8005378:	4640      	mov	r0, r8
 800537a:	47d0      	blx	sl
 800537c:	3001      	adds	r0, #1
 800537e:	d0ad      	beq.n	80052dc <_printf_i+0x160>
 8005380:	6823      	ldr	r3, [r4, #0]
 8005382:	079b      	lsls	r3, r3, #30
 8005384:	d413      	bmi.n	80053ae <_printf_i+0x232>
 8005386:	68e0      	ldr	r0, [r4, #12]
 8005388:	9b03      	ldr	r3, [sp, #12]
 800538a:	4298      	cmp	r0, r3
 800538c:	bfb8      	it	lt
 800538e:	4618      	movlt	r0, r3
 8005390:	e7a6      	b.n	80052e0 <_printf_i+0x164>
 8005392:	2301      	movs	r3, #1
 8005394:	4632      	mov	r2, r6
 8005396:	4649      	mov	r1, r9
 8005398:	4640      	mov	r0, r8
 800539a:	47d0      	blx	sl
 800539c:	3001      	adds	r0, #1
 800539e:	d09d      	beq.n	80052dc <_printf_i+0x160>
 80053a0:	3501      	adds	r5, #1
 80053a2:	68e3      	ldr	r3, [r4, #12]
 80053a4:	9903      	ldr	r1, [sp, #12]
 80053a6:	1a5b      	subs	r3, r3, r1
 80053a8:	42ab      	cmp	r3, r5
 80053aa:	dcf2      	bgt.n	8005392 <_printf_i+0x216>
 80053ac:	e7eb      	b.n	8005386 <_printf_i+0x20a>
 80053ae:	2500      	movs	r5, #0
 80053b0:	f104 0619 	add.w	r6, r4, #25
 80053b4:	e7f5      	b.n	80053a2 <_printf_i+0x226>
 80053b6:	bf00      	nop
 80053b8:	080055cd 	.word	0x080055cd
 80053bc:	080055de 	.word	0x080055de

080053c0 <__malloc_lock>:
 80053c0:	4801      	ldr	r0, [pc, #4]	; (80053c8 <__malloc_lock+0x8>)
 80053c2:	f7ff bc73 	b.w	8004cac <__retarget_lock_acquire_recursive>
 80053c6:	bf00      	nop
 80053c8:	20000930 	.word	0x20000930

080053cc <__malloc_unlock>:
 80053cc:	4801      	ldr	r0, [pc, #4]	; (80053d4 <__malloc_unlock+0x8>)
 80053ce:	f7ff bc6e 	b.w	8004cae <__retarget_lock_release_recursive>
 80053d2:	bf00      	nop
 80053d4:	20000930 	.word	0x20000930

080053d8 <_realloc_r>:
 80053d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053dc:	4680      	mov	r8, r0
 80053de:	4614      	mov	r4, r2
 80053e0:	460e      	mov	r6, r1
 80053e2:	b921      	cbnz	r1, 80053ee <_realloc_r+0x16>
 80053e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053e8:	4611      	mov	r1, r2
 80053ea:	f7ff bdd9 	b.w	8004fa0 <_malloc_r>
 80053ee:	b92a      	cbnz	r2, 80053fc <_realloc_r+0x24>
 80053f0:	f000 f85a 	bl	80054a8 <_free_r>
 80053f4:	4625      	mov	r5, r4
 80053f6:	4628      	mov	r0, r5
 80053f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053fc:	f000 f8a0 	bl	8005540 <_malloc_usable_size_r>
 8005400:	4284      	cmp	r4, r0
 8005402:	4607      	mov	r7, r0
 8005404:	d802      	bhi.n	800540c <_realloc_r+0x34>
 8005406:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800540a:	d812      	bhi.n	8005432 <_realloc_r+0x5a>
 800540c:	4621      	mov	r1, r4
 800540e:	4640      	mov	r0, r8
 8005410:	f7ff fdc6 	bl	8004fa0 <_malloc_r>
 8005414:	4605      	mov	r5, r0
 8005416:	2800      	cmp	r0, #0
 8005418:	d0ed      	beq.n	80053f6 <_realloc_r+0x1e>
 800541a:	42bc      	cmp	r4, r7
 800541c:	4622      	mov	r2, r4
 800541e:	4631      	mov	r1, r6
 8005420:	bf28      	it	cs
 8005422:	463a      	movcs	r2, r7
 8005424:	f000 f832 	bl	800548c <memcpy>
 8005428:	4631      	mov	r1, r6
 800542a:	4640      	mov	r0, r8
 800542c:	f000 f83c 	bl	80054a8 <_free_r>
 8005430:	e7e1      	b.n	80053f6 <_realloc_r+0x1e>
 8005432:	4635      	mov	r5, r6
 8005434:	e7df      	b.n	80053f6 <_realloc_r+0x1e>

08005436 <memmove>:
 8005436:	4288      	cmp	r0, r1
 8005438:	b510      	push	{r4, lr}
 800543a:	eb01 0402 	add.w	r4, r1, r2
 800543e:	d902      	bls.n	8005446 <memmove+0x10>
 8005440:	4284      	cmp	r4, r0
 8005442:	4623      	mov	r3, r4
 8005444:	d807      	bhi.n	8005456 <memmove+0x20>
 8005446:	1e43      	subs	r3, r0, #1
 8005448:	42a1      	cmp	r1, r4
 800544a:	d008      	beq.n	800545e <memmove+0x28>
 800544c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005450:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005454:	e7f8      	b.n	8005448 <memmove+0x12>
 8005456:	4402      	add	r2, r0
 8005458:	4601      	mov	r1, r0
 800545a:	428a      	cmp	r2, r1
 800545c:	d100      	bne.n	8005460 <memmove+0x2a>
 800545e:	bd10      	pop	{r4, pc}
 8005460:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005464:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005468:	e7f7      	b.n	800545a <memmove+0x24>
	...

0800546c <_sbrk_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	4d06      	ldr	r5, [pc, #24]	; (8005488 <_sbrk_r+0x1c>)
 8005470:	2300      	movs	r3, #0
 8005472:	4604      	mov	r4, r0
 8005474:	4608      	mov	r0, r1
 8005476:	602b      	str	r3, [r5, #0]
 8005478:	f7fb ff3e 	bl	80012f8 <_sbrk>
 800547c:	1c43      	adds	r3, r0, #1
 800547e:	d102      	bne.n	8005486 <_sbrk_r+0x1a>
 8005480:	682b      	ldr	r3, [r5, #0]
 8005482:	b103      	cbz	r3, 8005486 <_sbrk_r+0x1a>
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	bd38      	pop	{r3, r4, r5, pc}
 8005488:	2000093c 	.word	0x2000093c

0800548c <memcpy>:
 800548c:	440a      	add	r2, r1
 800548e:	4291      	cmp	r1, r2
 8005490:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005494:	d100      	bne.n	8005498 <memcpy+0xc>
 8005496:	4770      	bx	lr
 8005498:	b510      	push	{r4, lr}
 800549a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800549e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054a2:	4291      	cmp	r1, r2
 80054a4:	d1f9      	bne.n	800549a <memcpy+0xe>
 80054a6:	bd10      	pop	{r4, pc}

080054a8 <_free_r>:
 80054a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054aa:	2900      	cmp	r1, #0
 80054ac:	d044      	beq.n	8005538 <_free_r+0x90>
 80054ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054b2:	9001      	str	r0, [sp, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f1a1 0404 	sub.w	r4, r1, #4
 80054ba:	bfb8      	it	lt
 80054bc:	18e4      	addlt	r4, r4, r3
 80054be:	f7ff ff7f 	bl	80053c0 <__malloc_lock>
 80054c2:	4a1e      	ldr	r2, [pc, #120]	; (800553c <_free_r+0x94>)
 80054c4:	9801      	ldr	r0, [sp, #4]
 80054c6:	6813      	ldr	r3, [r2, #0]
 80054c8:	b933      	cbnz	r3, 80054d8 <_free_r+0x30>
 80054ca:	6063      	str	r3, [r4, #4]
 80054cc:	6014      	str	r4, [r2, #0]
 80054ce:	b003      	add	sp, #12
 80054d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054d4:	f7ff bf7a 	b.w	80053cc <__malloc_unlock>
 80054d8:	42a3      	cmp	r3, r4
 80054da:	d908      	bls.n	80054ee <_free_r+0x46>
 80054dc:	6825      	ldr	r5, [r4, #0]
 80054de:	1961      	adds	r1, r4, r5
 80054e0:	428b      	cmp	r3, r1
 80054e2:	bf01      	itttt	eq
 80054e4:	6819      	ldreq	r1, [r3, #0]
 80054e6:	685b      	ldreq	r3, [r3, #4]
 80054e8:	1949      	addeq	r1, r1, r5
 80054ea:	6021      	streq	r1, [r4, #0]
 80054ec:	e7ed      	b.n	80054ca <_free_r+0x22>
 80054ee:	461a      	mov	r2, r3
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	b10b      	cbz	r3, 80054f8 <_free_r+0x50>
 80054f4:	42a3      	cmp	r3, r4
 80054f6:	d9fa      	bls.n	80054ee <_free_r+0x46>
 80054f8:	6811      	ldr	r1, [r2, #0]
 80054fa:	1855      	adds	r5, r2, r1
 80054fc:	42a5      	cmp	r5, r4
 80054fe:	d10b      	bne.n	8005518 <_free_r+0x70>
 8005500:	6824      	ldr	r4, [r4, #0]
 8005502:	4421      	add	r1, r4
 8005504:	1854      	adds	r4, r2, r1
 8005506:	42a3      	cmp	r3, r4
 8005508:	6011      	str	r1, [r2, #0]
 800550a:	d1e0      	bne.n	80054ce <_free_r+0x26>
 800550c:	681c      	ldr	r4, [r3, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	6053      	str	r3, [r2, #4]
 8005512:	440c      	add	r4, r1
 8005514:	6014      	str	r4, [r2, #0]
 8005516:	e7da      	b.n	80054ce <_free_r+0x26>
 8005518:	d902      	bls.n	8005520 <_free_r+0x78>
 800551a:	230c      	movs	r3, #12
 800551c:	6003      	str	r3, [r0, #0]
 800551e:	e7d6      	b.n	80054ce <_free_r+0x26>
 8005520:	6825      	ldr	r5, [r4, #0]
 8005522:	1961      	adds	r1, r4, r5
 8005524:	428b      	cmp	r3, r1
 8005526:	bf04      	itt	eq
 8005528:	6819      	ldreq	r1, [r3, #0]
 800552a:	685b      	ldreq	r3, [r3, #4]
 800552c:	6063      	str	r3, [r4, #4]
 800552e:	bf04      	itt	eq
 8005530:	1949      	addeq	r1, r1, r5
 8005532:	6021      	streq	r1, [r4, #0]
 8005534:	6054      	str	r4, [r2, #4]
 8005536:	e7ca      	b.n	80054ce <_free_r+0x26>
 8005538:	b003      	add	sp, #12
 800553a:	bd30      	pop	{r4, r5, pc}
 800553c:	20000934 	.word	0x20000934

08005540 <_malloc_usable_size_r>:
 8005540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005544:	1f18      	subs	r0, r3, #4
 8005546:	2b00      	cmp	r3, #0
 8005548:	bfbc      	itt	lt
 800554a:	580b      	ldrlt	r3, [r1, r0]
 800554c:	18c0      	addlt	r0, r0, r3
 800554e:	4770      	bx	lr

08005550 <_init>:
 8005550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005552:	bf00      	nop
 8005554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005556:	bc08      	pop	{r3}
 8005558:	469e      	mov	lr, r3
 800555a:	4770      	bx	lr

0800555c <_fini>:
 800555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555e:	bf00      	nop
 8005560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005562:	bc08      	pop	{r3}
 8005564:	469e      	mov	lr, r3
 8005566:	4770      	bx	lr
